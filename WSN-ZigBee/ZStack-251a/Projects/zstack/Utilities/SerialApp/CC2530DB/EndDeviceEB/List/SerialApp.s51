///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        31/May/2016  09:30:22 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\BaiduYunDownload\第6章                         /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\Source\SerialApp.c             /
//    Command line       =  -f "F:\BaiduYunDownload\第6章                     /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wEndev.cfg" (-DCPU32MHZ -DROOT=__near_func   /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f "F:\BaiduYunDownload\第6章 /
//                           实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\ /
//                          Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC253 /
//                          0DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0        /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x1688                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "F:\BaiduYunDownload\第6章 /
//                           实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\ /
//                          Utilities\SerialApp\Source\SerialApp.c" -D        /
//                          NWK_AUTO_POLL -D HAL_UART=TRUE -D                 /
//                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED -D             /
//                          xPOWER_SAVING -lC "F:\BaiduYunDownload\第6章      /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\EndDeviceEB\List\"    /
//                          -lA "F:\BaiduYunDownload\第6章                    /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\EndDeviceEB\List\"    /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\EndDeviceEB\Obj\" -e  /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\" -I                  /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\Source\" -I        /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\ZMain\TI2530 /
//                          DB\" -I "F:\BaiduYunDownload\第6章                /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\hal\include\" -I "F:\BaiduYunDownload\第6章  /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\hal\target\CC2530EB\" -I                     /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\include\" -I "F:\BaiduYunDownload\第6章  /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\high_level\" -I                          /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\low_level\srf04\" -I                     /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\low_level\srf04\single_chip\" -I         /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mt\" -I "F:\BaiduYunDownload\第6章           /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\osal\include\" -I "F:\BaiduYunDownload\第6章 /
//                           实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\ /
//                          Utilities\SerialApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\services\saddr\" -I                         /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\services\sdata\" -I                          /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\af\" -I "F:\BaiduYunDownload\第6章     /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\nwk\" -I "F:\BaiduYunDownload\第6章    /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\sapi\" -I "F:\BaiduYunDownload\第6章   /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\sec\" -I "F:\BaiduYunDownload\第6章    /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\sys\" -I "F:\BaiduYunDownload\第6章    /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\zdo\" -I "F:\BaiduYunDownload\第6章    /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\zmac\" -I "F:\BaiduYunDownload\第6章         /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\zmac\f8w\" -Ohz --require_prototypes         /
//    List file          =  F:\BaiduYunDownload\第6章                         /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\EndDeviceEB\List\Seri /
//                          alApp.s51                                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SerialApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_DIV_MOD
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??Delay_MS?relay,0203H
        FUNCTION ??GetDataLen?relay,0203H
        FUNCTION ??MotorData?relay,0203H
        PUBLIC ??SendData?relay
        FUNCTION ??SendData?relay,0203H
        FUNCTION ??SerialApp_CallBack?relay,0203H
        PUBLIC ??SerialApp_Init?relay
        FUNCTION ??SerialApp_Init?relay,0203H
        PUBLIC ??SerialApp_ProcessEvent?relay
        FUNCTION ??SerialApp_ProcessEvent?relay,0203H
        FUNCTION ??SerialApp_ProcessMSGCmd?relay,0203H
        FUNCTION ??SerialApp_Send?relay,0203H
        FUNCTION ??XorCheckSum?relay,0203H
        PUBWEAK `??_IRQ_timer1??INTVEC 75`
        PUBLIC ??init_port?relay
        FUNCTION ??init_port?relay,0203H
        PUBLIC ??init_timer?relay
        FUNCTION ??init_timer?relay,0203H
        PUBLIC ??start_pwm?relay
        FUNCTION ??start_pwm?relay,0203H
        PUBLIC AppTitle
        PUBLIC DataBuf
        FUNCTION Delay_MS,021203H
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION GetDataLen,080203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC LedState
        FUNCTION MotorData,0203H
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC NodeData
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBWEAK PERCFG
        PUBLIC SendData
        FUNCTION SendData,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        FUNCTION SerialApp_CallBack,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SerialApp_ClusterList
        PUBLIC SerialApp_Init
        FUNCTION SerialApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 47, STACK
        PUBLIC SerialApp_ProcessEvent
        FUNCTION SerialApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 48, STACK
        FUNCTION SerialApp_ProcessMSGCmd,0a1203H
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 59, STACK
        FUNCTION SerialApp_Send,021203H
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC SerialApp_SimpleDesc
        PUBLIC SerialApp_TaskID
        PUBLIC SerialApp_epDesc
        PUBWEAK T1CC0H
        PUBWEAK T1CC0L
        PUBWEAK T1CTL
        PUBLIC TxBuffer
        FUNCTION XorCheckSum,0203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBWEAK _A_P0
        PUBLIC _IRQ_timer1
        FUNCTION _IRQ_timer1,0233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        PUBLIC init_port
        FUNCTION init_port,0203H
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC init_timer
        FUNCTION init_timer,0203H
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC phaseccw
        PUBLIC phasecw
        PUBLIC start_pwm
        FUNCTION start_pwm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ucDirection
        PUBLIC ucEdDir
        PUBLIC ucSpeed
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_memset         SYMBOL "osal_memset"
osal_strlen         SYMBOL "osal_strlen"
osal_memcpy         SYMBOL "osal_memcpy"
LCD_write_EN_string SYMBOL "LCD_write_EN_string"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalUARTOpen         SYMBOL "HalUARTOpen"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
AF_DataRequest      SYMBOL "AF_DataRequest"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_rand           SYMBOL "osal_rand"
osal_set_event      SYMBOL "osal_set_event"
memset              SYMBOL "memset"
HalLedSet           SYMBOL "HalLedSet"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
HalUARTWrite        SYMBOL "HalUARTWrite"
HalUARTRead         SYMBOL "HalUARTRead"
Onboard_wait        SYMBOL "Onboard_wait"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??LCD_write_EN_string?relay SYMBOL "?relay", LCD_write_EN_string
??NLME_GetExtAddr?relay SYMBOL "?relay", NLME_GetExtAddr
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??Onboard_wait?relay SYMBOL "?relay", Onboard_wait
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??memset?relay      SYMBOL "?relay", memset
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??osal_strlen?relay SYMBOL "?relay", osal_strlen
SendData            SYMBOL "SendData"
??SendData?relay    SYMBOL "?relay", SendData
SerialApp_Init      SYMBOL "SerialApp_Init"
??SerialApp_Init?relay SYMBOL "?relay", SerialApp_Init
SerialApp_ProcessEvent SYMBOL "SerialApp_ProcessEvent"
??SerialApp_ProcessEvent?relay SYMBOL "?relay", SerialApp_ProcessEvent
_IRQ_timer1         SYMBOL "_IRQ_timer1"
`??_IRQ_timer1??INTVEC 75` SYMBOL "??INTVEC 75", _IRQ_timer1
init_port           SYMBOL "init_port"
??init_port?relay   SYMBOL "?relay", init_port
init_timer          SYMBOL "init_timer"
??init_timer?relay  SYMBOL "?relay", init_timer
start_pwm           SYMBOL "start_pwm"
??start_pwm?relay   SYMBOL "?relay", start_pwm

        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_write_EN_string
        FUNCTION LCD_write_EN_string,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??LCD_write_EN_string?relay
        FUNCTION ??LCD_write_EN_string?relay,00H
        EXTERN ??NLME_GetExtAddr?relay
        FUNCTION ??NLME_GetExtAddr?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??Onboard_wait?relay
        FUNCTION ??Onboard_wait?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??memset?relay
        FUNCTION ??memset?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H
        EXTERN Color
        EXTERN Color_BK

// F:\BaiduYunDownload\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c
//    1 /*********************************************************************
//    2 * INCLUDES
//    3 */
//    4 #include <stdio.h>
//    5 #include <string.h>
//    6 
//    7 #include "AF.h"
//    8 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0daH
// unsigned char volatile __sfr T1CC0L
T1CC0L:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0dbH
// unsigned char volatile __sfr T1CC0H
T1CC0H:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e4H
// unsigned char volatile __sfr T1CTL
T1CTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f1H
// unsigned char volatile __sfr PERCFG
PERCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//    9 #include "OSAL_Tasks.h"
//   10 #include "SerialApp.h"
//   11 #include "ZDApp.h"
//   12 #include "ZDObject.h"
//   13 #include "ZDProfile.h"
//   14 #include "hal_lcd.h"
//   15 #include "hal_drivers.h"
//   16 #include "hal_key.h"
//   17 #if defined ( LCD_SUPPORTED )
//   18 
//   19 #endif
//   20 #include "hal_led.h"
//   21 #include "hal_uart.h"
//   22 #include "hal_adc.h"
//   23 #include "DHT11.h"
//   24 #include "nwk_globals.h"
//   25 
//   26 
//   27 //---------------------------------------------------------------------
//   28 //标准版不同的终端需要修改此ID,用于识别协调器发过来的数据，ID相同则处理

        RSEG XDATA_I:XDATA:NOROOT(0)
//   29 static uint16 EndDeviceID = 0x0005 ; //终端ID，重要
EndDeviceID:
        DATA16
        DS 2
        REQUIRE `?<Initializer for EndDeviceID>`
        REQUIRE __INIT_XDATA_I
//   30 //---------------------------------------------------------------------
//   31 
//   32 //定义节点功能用作传感器或气体+蜂鸣器,还是步进电机
//   33 //#define WSN_SENSOR     //用作4个采集节点
//   34 #define WSN_BEEP     //气体+蜂鸣器 EndDeviceID=5
//   35 //#define WSN_STEP     //步进电机    EndDeviceID=6
//   36 
//   37 
//   38 #define DATA_PIN P0_4            //定义P0.4口为传感器的输入端
//   39 #define LAMP_PIN     P0_5  //定义P0.5口为继电器输入端
//   40 #define DATA_PIN05   P0_5    //定义P0.5口为光敏的输入端
//   41 #define GAS_PIN      P0_6  //定义P0.6口为烟雾传感器的输入端  
//   42 #define BEEP_PIN     P0_7  //定义P0.7口为蜂鸣器的输出端  
//   43 
//   44 #define A1 P0_4            //定义步进电机连接端口
//   45 #define B1 P0_5
//   46 #define C1 P0_6
//   47 #define D1 P0_7
//   48 
//   49 #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
//   50 #define UART0        0x00
//   51 
//   52 #define MAX_NODE     0x04
//   53 #define UART_DEBUG   0x00 //调试宏,通过串口输出协调器和终端的IEEE、短地址
//   54 #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])
//   55 
//   56 #define TIMER1_RUN()  T1CTL|=0X03
//   57 #define TIMER1_STOP() T1CTL&=~0X03
//   58 /*********************************************************************
//   59 * CONSTANTS
//   60 */
//   61 
//   62 #if !defined( SERIAL_APP_PORT )
//   63 #define SERIAL_APP_PORT  0
//   64 #endif
//   65 
//   66 #if !defined( SERIAL_APP_BAUD )
//   67 #define SERIAL_APP_BAUD  HAL_UART_BR_115200  //HAL_UART_BR_38400
//   68 #endif
//   69 
//   70 // When the Rx buf space is less than this threshold, invoke the Rx callback.
//   71 #if !defined( SERIAL_APP_THRESH )
//   72 #define SERIAL_APP_THRESH  64
//   73 #endif
//   74 
//   75 #if !defined( SERIAL_APP_RX_SZ )
//   76 #define SERIAL_APP_RX_SZ  128
//   77 #endif
//   78 
//   79 #if !defined( SERIAL_APP_TX_SZ )
//   80 #define SERIAL_APP_TX_SZ  128
//   81 #endif
//   82 
//   83 // Millisecs of idle time after a byte is received before invoking Rx callback.
//   84 #if !defined( SERIAL_APP_IDLE )
//   85 #define SERIAL_APP_IDLE  6
//   86 #endif
//   87 
//   88 // Loopback Rx bytes to Tx for throughput testing.
//   89 #if !defined( SERIAL_APP_LOOPBACK )
//   90 #define SERIAL_APP_LOOPBACK  FALSE
//   91 #endif
//   92 
//   93 // This is the max byte count per OTA message.
//   94 #if !defined( SERIAL_APP_TX_MAX )
//   95 #define SERIAL_APP_TX_MAX  20
//   96 #endif
//   97 
//   98 #define SERIAL_APP_RSP_CNT  4
//   99 
//  100 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//  101 const cId_t SerialApp_ClusterList[SERIALAPP_MAX_CLUSTERS] =
SerialApp_ClusterList:
        DATA16
        DW 1
        DW 0
//  102 {
//  103   SERIALAPP_CLUSTERID
//  104 };
//  105 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  106 const SimpleDescriptionFormat_t SerialApp_SimpleDesc =
SerialApp_SimpleDesc:
        DB 11
        DATA16
        DW 3845
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SerialApp_ClusterList
        DATA8
        DB 2
        DATA16
        DW SerialApp_ClusterList
//  107 {
//  108   SERIALAPP_ENDPOINT,              //  int   Endpoint;
//  109   SERIALAPP_PROFID,                //  uint16 AppProfId[2];
//  110   SERIALAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  111   SERIALAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  112   SERIALAPP_FLAGS,                 //  int   AppFlags:4;
//  113   SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  114   (cId_t *)SerialApp_ClusterList,  //  byte *pAppInClusterList;
//  115   SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumOutClusters;
//  116   (cId_t *)SerialApp_ClusterList   //  byte *pAppOutClusterList;
//  117 };
//  118 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  119 const endPointDesc_t SerialApp_epDesc =
SerialApp_epDesc:
        DB 11
        DATA16
        DW SerialApp_TaskID
        DW SerialApp_SimpleDesc
        DATA8
        DB 0
//  120 {
//  121   SERIALAPP_ENDPOINT,
//  122   &SerialApp_TaskID,
//  123   (SimpleDescriptionFormat_t *)&SerialApp_SimpleDesc,
//  124   noLatencyReqs
//  125 };
//  126 
//  127 
//  128 /*********************************************************************
//  129 * GLOBAL VARIABLES
//  130 */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  131 uint8 AppTitle[20] = "ALD WSN-system"; //应用程序名称
AppTitle:
        DATA8
        DS 20
        REQUIRE `?<Initializer for AppTitle>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  132 uint8 SerialApp_TaskID;    // Task ID for internal task/event processing.
SerialApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  133 
//  134 
//  135 /*********************************************************************
//  136 * LOCAL VARIABLES
//  137 */
//  138 #ifdef WSN_SENSOR
//  139 static bool SendFlag = 0;
//  140 #endif
//  141 static uint8 SerialApp_MsgID;
//  142 
//  143 static afAddrType_t SerialApp_TxAddr;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  144 static afAddrType_t Broadcast_DstAddr;
Broadcast_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  145 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  146 static uint8 SerialApp_TxSeq;
SerialApp_TxSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  147 static uint8 SerialApp_TxBuf[SERIAL_APP_TX_MAX+1];
SerialApp_TxBuf:
        DS 21
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  148 static uint8 SerialApp_TxLen;
SerialApp_TxLen:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  149 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  150 static afAddrType_t SerialApp_RxAddr;
SerialApp_RxAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  151 static uint8 SerialApp_RspBuf[SERIAL_APP_RSP_CNT];
SerialApp_RspBuf:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  152 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  153 static devStates_t SerialApp_NwkState;
SerialApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  154 static afAddrType_t SerialApp_TxAddr;
SerialApp_TxAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  155 static uint8 SerialApp_MsgID;
SerialApp_MsgID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  156 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  157 uint8 NodeData[MAX_NODE][6];         //终端数据缓冲区 0=温度 1=湿度 2=气体 3=灯
NodeData:
        DS 24
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  158 uint8 TxBuffer[128];
TxBuffer:
        DS 128
        REQUIRE __INIT_XDATA_Z
//  159 
//  160 //电机相关的变量

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  161 uint8 LedState = 0;
LedState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  162 uint8 ucEdDir = 1;      //终端1为正转  2为反转
ucEdDir:
        DATA8
        DS 1
        REQUIRE `?<Initializer for ucEdDir>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  163 uint8 ucDirection = 1;  //1为正转  2为反转
ucDirection:
        DATA8
        DS 1
        REQUIRE `?<Initializer for ucDirection>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  164 uint8 ucSpeed = 2;      //速度2-10之间
ucSpeed:
        DATA8
        DS 1
        REQUIRE `?<Initializer for ucSpeed>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  165 uint8 DataBuf[3];
DataBuf:
        DS 3
        REQUIRE __INIT_XDATA_Z
//  166 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  167 uchar phasecw[4] ={0x80,0x40,0x20,0x10};//正转 电机导通相序 D-C-B-A
phasecw:
        DATA32
        DS 4
        REQUIRE `?<Initializer for phasecw>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  168 uchar phaseccw[4]={0x10,0x20,0x40,0x80};//反转 电机导通相序 A-B-C-D
phaseccw:
        DATA32
        DS 4
        REQUIRE `?<Initializer for phaseccw>`
        REQUIRE __INIT_XDATA_I
//  169 /*********************************************************************
//  170 * LOCAL FUNCTIONS
//  171 */
//  172 
//  173 static void SerialApp_HandleKeys( uint8 shift, uint8 keys );
//  174 static void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
//  175 static void SerialApp_Send(void);
//  176 static void SerialApp_Resp(void);
//  177 static void SerialApp_CallBack(uint8 port, uint8 event);
//  178 
//  179 #if UART_DEBUG  
//  180 static void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr);
//  181 static void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr);
//  182 #endif
//  183 static void AfSendAddrInfo(void);
//  184 static void SerialApp_SendPeriodicMessage( void );
//  185 static uint8 GetDataLen(uint8 fc);
//  186 static uint8 GetLamp( void );
//  187 static uint8 GetGas( void );
//  188 static uint8 GetSecurity( void );
//  189 static uint8 XorCheckSum(uint8 * pBuf, uint8 len);
//  190 static uint16 ReadLightData( void );
//  191 uint8 SendData(uint8 addr, uint8 FC);
//  192 
//  193 //WSN_BEEP
//  194 void init_timer(void);
//  195 void init_port(void);
//  196 void start_pwm(void) ;
//  197 __interrupt void _IRQ_timer1(void);
//  198 
//  199 //WSN_STEP
//  200 static void MotorData(uchar data);
//  201 static void MotorCW(void);
//  202 static void MotorCCW(void);
//  203 static void MotorStop(void);
//  204 
//  205 static void Delay_MS(unsigned int Time);
//  206 #ifdef WSN_STEP
//  207 static void InitStepMotor(void);
//  208 #endif
//  209 /*********************************************************************
//  210 * @fn      SerialApp_Init
//  211 *
//  212 * @brief   This is called during OSAL tasks' initialization.
//  213 *
//  214 * @param   task_id - the Task ID assigned by OSAL.
//  215 *
//  216 * @return  none
//  217 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  218 void SerialApp_Init( uint8 task_id )
SerialApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SerialApp_Init
        CODE
//  219 {
        FUNCALL SerialApp_Init, init_port
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, init_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, LCD_write_EN_string
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     ?V0 + 0,R1
//  220   halUARTCfg_t uartConfig;
//  221   
//  222 #ifdef WSN_SENSOR
//  223   P0SEL &= ~0x20;         //设置P0.5口为普通IO
//  224   P0DIR &= ~0x20;          //设置P0.5为输入(光敏)
//  225   P0SEL &= ~0x40;         //设置P0.6为普通IO口
//  226   P0DIR &= ~0x40;         //P0.6定义为输入口
//  227   P0SEL &= ~0x80;         //P0_7配置成通用io
//  228   P0SEL &= ~0x10;         //设置P0.4为普通IO口
//  229   P0DIR &= ~0x10;         //P0.4定义为输入口
//  230 #elif defined WSN_BEEP
//  231   P0SEL &= ~0x20;         //设置P0.5口为普通IO
        ANL     0xf3,#0xdf
//  232   P0DIR |= 0x20;          //设置P0.5为输出(继电器)
        ORL     0xfd,#0x20
//  233   P0SEL &= ~0x40;         //设置P0.6为普通IO口
        ANL     0xf3,#0xbf
//  234   P0DIR &= ~0x40;         //P0.6定义为输入口
        ANL     0xfd,#0xbf
//  235   start_pwm();            //配置T1输出PWM
        ; Setup parameters for call to function init_port
        LCALL   ??init_port?relay
        ; Setup parameters for call to function init_timer
        LCALL   ??init_timer?relay
//  236   TIMER1_STOP();          //默认关闭蜂鸣器
        ANL     0xe4,#0xfc
//  237   EndDeviceID = 0x0005;   //终端5的内部编号  
        MOV     DPTR,#EndDeviceID
        MOV     A,#0x5
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  238 #elif defined WSN_STEP
//  239   InitStepMotor();        //初始化电机IO引脚
//  240   EndDeviceID = 0x0006;   //终端6的内部编号  
//  241 #endif
//  242 
//  243 #if defined(ZDO_COORDINATOR) 
//  244   EndDeviceID = 0x0000;
//  245   P0SEL &= ~0x20;         //设置P0.5口为普通IO
//  246   P0DIR |= 0x20;          //设置P0.5为输出(继电器)
//  247 #endif
//  248   
//  249   Color    = BLACK; //前景色
        MOV     DPTR,#Color
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  250   Color_BK = GREEN; //背景色
        MOV     DPTR,#Color_BK
        MOV     A,#-0x20
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x7
        MOVX    @DPTR,A
//  251   osal_memset(AppTitle, 0, 20);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x14
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#AppTitle & 0xff
        MOV     R3,#(AppTitle >> 8) & 0xff
        LCALL   ??osal_memset?relay
//  252   //LCD上显示应用程序的标题
//  253   if(EndDeviceID == 0x0001)
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SerialApp_Init_0
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_Init_0:
        JNZ     ??SerialApp_Init_1
//  254     osal_memcpy(AppTitle, "ALD WSN-Node01", osal_strlen("ALD WSN-Node01"));
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node01">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node01">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "ALD WSN-Node01">` & 0xff
        MOV     R3,#(`?<Constant "ALD WSN-Node01">` >> 8) & 0xff
        LJMP    ??SerialApp_Init_2 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 44)
//  255   else if(EndDeviceID == 0x0002)
??SerialApp_Init_1:
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??SerialApp_Init_3
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_Init_3:
        JNZ     ??SerialApp_Init_4
//  256     osal_memcpy(AppTitle, "ALD WSN-Node02", osal_strlen("ALD WSN-Node02"));
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node02">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node02">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "ALD WSN-Node02">` & 0xff
        MOV     R3,#(`?<Constant "ALD WSN-Node02">` >> 8) & 0xff
        LJMP    ??SerialApp_Init_2 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 44)
//  257   else if(EndDeviceID == 0x0003)
??SerialApp_Init_4:
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??SerialApp_Init_5
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_Init_5:
        JNZ     ??SerialApp_Init_6
//  258     osal_memcpy(AppTitle, "ALD WSN-Node03", osal_strlen("ALD WSN-Node03"));
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node03">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node03">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "ALD WSN-Node03">` & 0xff
        MOV     R3,#(`?<Constant "ALD WSN-Node03">` >> 8) & 0xff
        SJMP    ??SerialApp_Init_2
        CFI CFA_XSP16 add(XSP16, 44)
//  259   else if(EndDeviceID == 0x0004)
??SerialApp_Init_6:
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??SerialApp_Init_7
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_Init_7:
        JNZ     ??SerialApp_Init_8
//  260     osal_memcpy(AppTitle, "ALD WSN-Node04", osal_strlen("ALD WSN-Node04"));
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node04">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node04">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "ALD WSN-Node04">` & 0xff
        MOV     R3,#(`?<Constant "ALD WSN-Node04">` >> 8) & 0xff
        SJMP    ??SerialApp_Init_2
        CFI CFA_XSP16 add(XSP16, 44)
//  261   else if(EndDeviceID == 0x0005)
??SerialApp_Init_8:
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??SerialApp_Init_9
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_Init_9:
        JNZ     ??SerialApp_Init_10
//  262     osal_memcpy(AppTitle, "ALD WSN-BEEP05", osal_strlen("ALD WSN-BEEP05"));    
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "ALD WSN-BEEP05">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "ALD WSN-BEEP05">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "ALD WSN-BEEP05">` & 0xff
        MOV     R3,#(`?<Constant "ALD WSN-BEEP05">` >> 8) & 0xff
        SJMP    ??SerialApp_Init_2
        CFI CFA_XSP16 add(XSP16, 44)
//  263   else if(EndDeviceID == 0x0006)
??SerialApp_Init_10:
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SerialApp_Init_11
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_Init_11:
        JNZ     ??SerialApp_Init_12
//  264     osal_memcpy(AppTitle, "stepping motor", osal_strlen("stepping motor")); 
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "stepping motor">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "stepping motor">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "stepping motor">` & 0xff
        MOV     R3,#(`?<Constant "stepping motor">` >> 8) & 0xff
        SJMP    ??SerialApp_Init_2
        CFI CFA_XSP16 add(XSP16, 44)
//  265   else
//  266     osal_memcpy(AppTitle, "ALD WSN-system", osal_strlen("ALD WSN-system")); 
??SerialApp_Init_12:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "ALD WSN-system">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "ALD WSN-system">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "ALD WSN-system">` & 0xff
        MOV     R3,#(`?<Constant "ALD WSN-system">` >> 8) & 0xff
??SerialApp_Init_2:
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#AppTitle & 0xff
        MOV     R3,#(AppTitle >> 8) & 0xff
        LCALL   ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
//  267   
//  268   LCD_write_EN_string(64-7*osal_strlen((char *)AppTitle)/2,3,AppTitle); //显示标题
        ; Setup parameters for call to function LCD_write_EN_string
        MOV     R2,#0x3
        MOV     A,R2
        PUSH    A
        CFI CFA_SP SP+-1
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#AppTitle & 0xff
        MOV     R3,#(AppTitle >> 8) & 0xff
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     R0,B
        MOV     B,#0x7
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,#0x40
        CLR     C
        SUBB    A,R0
        MOV     R1,A
        MOV     R4,#AppTitle & 0xff
        MOV     A,#(AppTitle >> 8) & 0xff
        MOV     R5,A
        POP     A
        CFI CFA_SP SP+0
        MOV     R2,A
        LCALL   ??LCD_write_EN_string?relay
//  269   
//  270   SerialApp_TaskID = task_id;
        MOV     A,?V0 + 0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    @DPTR,A
//  271   //SerialApp_RxSeq = 0xC3;
//  272   afRegister( (endPointDesc_t *)&SerialApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SerialApp_epDesc & 0xff
        MOV     R3,#(SerialApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  273   RegisterForKeys( task_id );
        ; Setup parameters for call to function RegisterForKeys
        MOV     R1,?V0 + 0
        LCALL   ??RegisterForKeys?relay
//  274   
//  275   uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  276   uartConfig.baudRate             = SERIAL_APP_BAUD;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  277   uartConfig.flowControl          = FALSE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  278   uartConfig.flowControlThreshold = SERIAL_APP_THRESH; // 2x30 don't care - see uart driver.
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  279   uartConfig.rx.maxBufSize        = SERIAL_APP_RX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  280   uartConfig.tx.maxBufSize        = SERIAL_APP_TX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  281   uartConfig.idleTimeout          = SERIAL_APP_IDLE;   // 2x30 don't care - see uart driver.
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  282   uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  283   uartConfig.callBackFunc         = SerialApp_CallBack;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??SerialApp_CallBack?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??SerialApp_CallBack?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  284   HalUARTOpen (UART0, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  285   
//  286   //#if defined ( LCD_SUPPORTED )
//  287   //  HalLcdWriteString( "SerialApp", HAL_LCD_LINE_2 );
//  288   //#endif
//  289   //HalUARTWrite(UART0, "Init", 4);
//  290   //ZDO_RegisterForZDOMsg( SerialApp_TaskID, End_Device_Bind_rsp );
//  291   //ZDO_RegisterForZDOMsg( SerialApp_TaskID, Match_Desc_rsp );
//  292 }
        MOV     A,#0x1d
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE T1CTL
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Valid
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  293 
//  294 /*********************************************************************
//  295 * @fn      SerialApp_ProcessEvent
//  296 *
//  297 * @brief   Generic Application Task event processor.
//  298 *
//  299 * @param   task_id  - The OSAL assigned task ID.
//  300 * @param   events   - Bit map of events to process.
//  301 *
//  302 * @return  Event flags of all unprocessed events.
//  303 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  304 UINT16 SerialApp_ProcessEvent( uint8 task_id, UINT16 events )
SerialApp_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SerialApp_ProcessEvent
        CODE
//  305 {
        FUNCALL SerialApp_ProcessEvent, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, SerialApp_ProcessMSGCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, SerialApp_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 24
        MOV     A,#-0x18
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  306   (void)task_id;  // Intentionally unreferenced parameter
//  307   
//  308   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      $+5
        LJMP    ??SerialApp_ProcessEvent_0 & 0xFFFF
//  309   {
//  310     afIncomingMSGPacket_t *MSGpkt;
//  311     
//  312     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SerialApp_TaskID )) )
//  313     {
//  314       switch ( MSGpkt->hdr.event )
//  315       {
//  316       case ZDO_CB_MSG:
//  317         //SerialApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  318         break;
//  319         
//  320       case KEY_CHANGE:
//  321         SerialApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  322         break;
//  323         
//  324       case AF_INCOMING_MSG_CMD:
//  325         SerialApp_ProcessMSGCmd( MSGpkt );
//  326         break;
//  327         
//  328       case ZDO_STATE_CHANGE:
//  329         SerialApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  330         if ( (SerialApp_NwkState == DEV_ZB_COORD)
//  331             || (SerialApp_NwkState == DEV_ROUTER)
//  332               || (SerialApp_NwkState == DEV_END_DEVICE) )
//  333         {
//  334 #if defined(ZDO_COORDINATOR) //协调器通过串口输出自身短地址、IEEE  
//  335           Broadcast_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
//  336           Broadcast_DstAddr.endPoint = SERIALAPP_ENDPOINT;
//  337           Broadcast_DstAddr.addr.shortAddr = 0xFFFF;
//  338 #if UART_DEBUG           
//  339           PrintAddrInfo( NLME_GetShortAddr(), aExtendedAddress + Z_EXTADDR_LEN - 1);
//  340 #endif 
//  341           //初始化灯的状态，1为熄灭状态，0为点亮
//  342           NodeData[0][3] = 1;
//  343           NodeData[1][3] = 1;
//  344           NodeData[2][3] = 1;
//  345           NodeData[3][3] = 1;
//  346 #else                        //终端无线发送短地址、IEEE   
//  347           AfSendAddrInfo();
//  348 #ifdef WSN_BEEP              //蜂鸣器和气体实验时自动检测气体发现异常就报警
//  349           osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT,
//  350                              SERIALAPP_SEND_PERIODIC_TIMEOUT );
//  351           //(SERIALAPP_SEND_PERIODIC_TIMEOUT + (osal_rand() & 0x00FF)) );
//  352 #endif
//  353           
//  354 #endif
//  355         }
//  356         break;				
//  357       default:
//  358         break;
//  359       }
//  360       
//  361       osal_msg_deallocate( (uint8 *)MSGpkt );
//  362     }
//  363     
//  364     return ( events ^ SYS_EVENT_MSG );
//  365   }
//  366   
//  367   //在此事件中可以定时向协调器发送节点传感器参数信息
//  368   if ( events & SERIALAPP_SEND_PERIODIC_EVT )
        MOV     A,R6
        ANL     A,#0x3
        JNZ     $+5
        LJMP    ??SerialApp_ProcessEvent_1 & 0xFFFF
//  369   {
//  370     SerialApp_SendPeriodicMessage();
        MOV     DPTR,#`?<Constant {0}>_1`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0xd
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        MOV     C,0x80.6
        RLC     A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        JZ      $+5
        LJMP    ??SerialApp_ProcessEvent_2 & 0xFFFF
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??SerialApp_ProcessEvent_3
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_ProcessEvent_3:
        JZ      $+5
        LJMP    ??SerialApp_ProcessEvent_2 & 0xFFFF
        ORL     0xe4,#0x3
        LJMP    ??SerialApp_ProcessEvent_4 & 0xFFFF
??SerialApp_ProcessEvent_5:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SerialApp_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??SerialApp_ProcessEvent_6
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??SerialApp_ProcessEvent_6
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_10 & 0xFFFF
??SerialApp_ProcessEvent_6:
        MOV     DPTR,#`?<Constant {0}>_2`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0xb
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        MOV     DPTR,#SerialApp_TxAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
        MOV     DPTR,#SerialApp_TxAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x3b
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 2,#0x1e
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     ?V0 + 2,#SerialApp_MsgID & 0xff
        MOV     ?V0 + 3,#(SerialApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     ?V0 + 2,#0xb
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V0 + 2,#0x1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     R1,#0x0
        MOV     R4,#SerialApp_epDesc & 0xff
        MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
        MOV     R2,#SerialApp_TxAddr & 0xff
        MOV     R3,#(SerialApp_TxAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_10:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
??SerialApp_ProcessEvent_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??SerialApp_ProcessEvent_7
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SerialApp_ProcessEvent_8
        ADD     A,#0x49
        JNZ     $+5
        LJMP    ??SerialApp_ProcessEvent_5 & 0xFFFF
        SJMP    ??CrossCallReturnLabel_10
??SerialApp_ProcessEvent_8:
        ; Setup parameters for call to function SerialApp_ProcessMSGCmd
        LCALL   ??SerialApp_ProcessMSGCmd?relay
        SJMP    ??CrossCallReturnLabel_10
??SerialApp_ProcessEvent_7:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SerialApp_ProcessEvent_9:
        MOV     R3,A
        LJMP    ??SerialApp_ProcessEvent_10 & 0xFFFF
??SerialApp_ProcessEvent_2:
        ANL     0xe4,#0xfc
//  371     
//  372     osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT,
//  373                        (SERIALAPP_SEND_PERIODIC_TIMEOUT + (osal_rand() & 0x00FF)) );
??SerialApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0x18
        MOV     R4,A
        CLR     A
        ADDC    A,#0x3
        MOV     R5,A
        LCALL   ?Subroutine7 & 0xFFFF
//  374     
//  375     return (events ^ SERIALAPP_SEND_PERIODIC_EVT);
??CrossCallReturnLabel_11:
        MOV     A,R6
        XRL     A,#0x3
??SerialApp_ProcessEvent_11:
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SerialApp_ProcessEvent_9
//  376   }
//  377   
//  378   if ( events & SERIALAPP_SEND_EVT )
??SerialApp_ProcessEvent_1:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SerialApp_ProcessEvent_12
//  379   {
//  380     SerialApp_Send();
        ; Setup parameters for call to function SerialApp_Send
        LCALL   ??SerialApp_Send?relay
//  381     return ( events ^ SERIALAPP_SEND_EVT );
        MOV     A,R6
        XRL     A,#0x1
        SJMP    ??SerialApp_ProcessEvent_11
//  382   }
//  383   
//  384   if ( events & SERIALAPP_RESP_EVT )
??SerialApp_ProcessEvent_12:
        ANL     A,#0x2
        JZ      ??SerialApp_ProcessEvent_13
//  385   {
//  386     SerialApp_Resp();
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
        MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     ?V0 + 0,#SerialApp_RspBuf & 0xff
        MOV     ?V0 + 1,#(SerialApp_RspBuf >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     R1,#0x0
        MOV     R4,#SerialApp_epDesc & 0xff
        MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
        MOV     R2,#SerialApp_RxAddr & 0xff
        MOV     R3,#(SerialApp_RxAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,R1
        JZ      ??SerialApp_ProcessEvent_14
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  387     return ( events ^ SERIALAPP_RESP_EVT );
??SerialApp_ProcessEvent_14:
        MOV     A,R6
        XRL     A,#0x2
        SJMP    ??SerialApp_ProcessEvent_11
//  388   }
//  389   
//  390   return ( 0 ); 
??SerialApp_ProcessEvent_13:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SerialApp_ProcessEvent_10:
        MOV     A,#0x18
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock2
        REQUIRE T1CTL
        REQUIRE _A_P0
//  391 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV     R2,#0x3
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
        REQUIRE ??Subroutine10_0
        ; // Fall through to label ??Subroutine10_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine10_0:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9
//  392 
//  393 /*********************************************************************
//  394 * @fn      SerialApp_HandleKeys
//  395 *
//  396 * @brief   Handles all key events for this device.
//  397 *
//  398 * @param   shift - true if in shift/alt.
//  399 * @param   keys  - bit field for key events.
//  400 *
//  401 * @return  none
//  402 */
//  403 void SerialApp_HandleKeys( uint8 shift, uint8 keys )
//  404 { 
//  405   if ( keys & HAL_KEY_SW_6 ) //按S1键启动或停止终端定时上报数据 
//  406   {
//  407 #ifdef WSN_SENSOR
//  408     if(SendFlag == 0)
//  409     {
//  410       SendFlag = 1;
//  411       HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  412       osal_start_timerEx( SerialApp_TaskID,
//  413                          SERIALAPP_SEND_PERIODIC_EVT,
//  414                          SERIALAPP_SEND_PERIODIC_TIMEOUT );
//  415     }
//  416     else
//  417     {      
//  418       SendFlag = 0;
//  419       HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
//  420       osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT);
//  421     }
//  422 #endif
//  423   }
//  424   
//  425   if ( keys & HAL_KEY_SW_1 ) //按S2
//  426   {
//  427     //LAMP_PIN = ~LAMP_PIN;
//  428   }
//  429   
//  430 }
//  431 

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 59)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine11_0:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 59)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  432 void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
SerialApp_ProcessMSGCmd:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function SerialApp_ProcessMSGCmd
        CODE
//  433 {
        FUNCALL SerialApp_ProcessMSGCmd, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, MotorData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, MotorData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, Delay_MS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, MotorData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, Delay_MS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 45
        MOV     A,#-0x2d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 56)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  434   uint16 i, shortAddr;
//  435   uint8 *pIeeeAddr; 
//  436   uint8 delay;
//  437   uint8 afRxData[30]={0};
        MOV     DPTR,#`?<Constant {0}>`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x1e
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  438   uint8 wendu[3];
//  439   uint8 shidu[3];
//  440   memset(wendu, 0, 3);
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 56)
//  441   memset(shidu, 0, 3);
        ; Setup parameters for call to function memset
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 56)
//  442   char state0;
//  443   char gas;
//  444   char secustate;
//  445   char str[9];
//  446   osal_memset(str, 0, 9);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x9
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  447   //查询单个终端上所有传感器的数据 3A 00 01 02 39 23  响应：3A 00 01 02 00 00 00 00 xor 23
//  448   switch ( pkt->clusterId )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for SerialApp_ProcessMSGCmd>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??CrossCallReturnLabel_12
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SerialApp_ProcessMSGCmd_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SerialApp_ProcessMSGCmd_1
        CODE
//  449   {
//  450     // A message with a serial data block to be transmitted on the serial port.
//  451   case SERIALAPP_CLUSTERID:
//  452     osal_memcpy(afRxData, pkt->cmd.Data, pkt->cmd.DataLength);
??SerialApp_ProcessMSGCmd_0:
        ; Setup parameters for call to function osal_memcpy
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 59)
        MOV     A,R6
        ADD     A,#0x20
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 56)
//  453     switch(afRxData[0]) //简单协议命令字解析
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x3a
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_12 & 0xFFFF
//  454     {
//  455 #if defined(ZDO_COORDINATOR)
//  456     case 0x3B:  //收到终端无线发过来的短地址和IEEE地址,通过串口输出显示      
//  457       shortAddr=(afRxData[1]<<8)|afRxData[2];
//  458       pIeeeAddr = &afRxData[3];
//  459 #if UART_DEBUG
//  460       PrintAddrInfo(shortAddr, pIeeeAddr + Z_EXTADDR_LEN - 1);
//  461 #endif   
//  462       break;
//  463     case 0x3A:	
//  464       if(afRxData[3] == 0x02) //收到终端传过来的传感器数据并保存
//  465       {  
//  466         NodeData[afRxData[2]-1][0] = afRxData[4];
//  467         NodeData[afRxData[2]-1][1] = afRxData[5];
//  468         NodeData[afRxData[2]-1][2] = afRxData[6];
//  469         NodeData[afRxData[2]-1][3] = afRxData[7];
//  470         NodeData[afRxData[2]-1][4] = afRxData[9];
//  471         NodeData[afRxData[2]-1][5] = 0x00;
//  472         state0=afRxData[8];
//  473         sprintf(str, "BRI:%03d ", afRxData[7]);
//  474         gas=afRxData[6];
//  475         secustate=afRxData[9];
//  476         wendu[0]=afRxData[4]/10+0x30;
//  477         wendu[1]=afRxData[4]%10+0x30;
//  478         shidu[0]=afRxData[5]/10+0x30;
//  479         shidu[1]=afRxData[5]%10+0x30;
//  480         LCD_write_EN_string(45,80,wendu);
//  481         LCD_write_EN_string(45,95,shidu);
//  482         LCD_write_CN_string(60,80,"℃");
//  483         LCD_write_CN_string(60,95,"％");
//  484         LCD_write_EN_string(70,110,str);
//  485         if(gas==0x00)
//  486         {
//  487           LCD_write_CN_string(9,110,"气体异常");
//  488         }
//  489         else
//  490         {
//  491           LCD_write_CN_string(9,110,"气体正常");
//  492         }
//  493         if(secustate==0x00)
//  494         {
//  495           LCD_write_EN_string(70,80,"security");
//  496         }
//  497         else
//  498         {
//  499           LCD_write_EN_string(70,80,"insecurity");
//  500         }
//  501       }
//  502       
//  503 #if UART_DEBUG
//  504       HalUARTWrite (UART0, NodeData[afRxData[3]-1], 4); //调试时通过串口输出
//  505       HalUARTWrite (UART0, "\n", 1);
//  506 #endif            
//  507       break;
//  508 #else  
//  509     case 0x3A:  //开关灯设备          
//  510       if(afRxData[3] == 0x0A || afRxData[3] == 0x0B || afRxData[3] == 0x0C) //控制终端          
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xa
        JZ      ??SerialApp_ProcessMSGCmd_2
        MOVX    A,@DPTR
        XRL     A,#0xb
        JZ      ??SerialApp_ProcessMSGCmd_2
        MOVX    A,@DPTR
        XRL     A,#0xc
        JNZ     ??SerialApp_ProcessMSGCmd_3
//  511       {  
//  512         if(EndDeviceID == afRxData[2] || afRxData[2]==0xFF)
??SerialApp_ProcessMSGCmd_2:
        MOV     DPTR,#EndDeviceID
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        POP     DPL
        CFI CFA_SP SP+0
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??SerialApp_ProcessMSGCmd_4
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_ProcessMSGCmd_4:
        JZ      ??SerialApp_ProcessMSGCmd_5
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_12 & 0xFFFF
//  513         {
//  514           if(afRxData[4] == 0)
??SerialApp_ProcessMSGCmd_5:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     ??SerialApp_ProcessMSGCmd_6
//  515           {
//  516             //LAMP_PIN = 0;
//  517             HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
??SerialApp_ProcessMSGCmd_7:
        MOV     R2,#0x0
??SerialApp_ProcessMSGCmd_8:
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
        LJMP    ??CrossCallReturnLabel_12 & 0xFFFF
//  518           }
//  519           else
//  520           {
//  521             //LAMP_PIN = 1;
//  522             HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
??SerialApp_ProcessMSGCmd_6:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??SerialApp_ProcessMSGCmd_8
//  523           }
//  524         }
//  525         break;
//  526       }	
//  527       else if(afRxData[3] == 0x07)      //蜂鸣器 功能码为07
??SerialApp_ProcessMSGCmd_3:
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??SerialApp_ProcessMSGCmd_9
//  528       {
//  529         if(EndDeviceID == afRxData[2] || afRxData[2] == 0xFF)  //蜂鸣器 EndDeviceID为05
        MOV     DPTR,#EndDeviceID
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        POP     DPL
        CFI CFA_SP SP+0
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??SerialApp_ProcessMSGCmd_10
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_ProcessMSGCmd_10:
        JZ      ??SerialApp_ProcessMSGCmd_11
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_12 & 0xFFFF
//  530         {
//  531           if(afRxData[4] == 0)
??SerialApp_ProcessMSGCmd_11:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     ??SerialApp_ProcessMSGCmd_12
//  532           {
//  533             TIMER1_STOP();               //收到协调发出的蜂鸣器不响的指令
        ANL     0xe4,#0xfc
//  534             HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        SJMP    ??SerialApp_ProcessMSGCmd_7
//  535           }
//  536           else
//  537           {
//  538             TIMER1_RUN();               //收到协调发出的蜂鸣器响的指令
??SerialApp_ProcessMSGCmd_12:
        ORL     0xe4,#0x3
//  539             HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        SJMP    ??SerialApp_ProcessMSGCmd_6
//  540           }
//  541         } 
//  542       }
//  543       else if(afRxData[3] == 0x08)    //电机 功能码为08
??SerialApp_ProcessMSGCmd_9:
        MOVX    A,@DPTR
        XRL     A,#0x8
        JNZ     ??SerialApp_ProcessMSGCmd_13
//  544       {
//  545         if(EndDeviceID == afRxData[2] || afRxData[2] == 0xFF)//电机 EndDeviceID为06
        MOV     DPTR,#EndDeviceID
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_4:
        POP     DPL
        CFI CFA_SP SP+0
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??SerialApp_ProcessMSGCmd_14
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_ProcessMSGCmd_14:
        JZ      ??SerialApp_ProcessMSGCmd_15
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_12 & 0xFFFF
//  546         {
//  547           ucEdDir = afRxData[4];      //保存旋转方向给调速用
??SerialApp_ProcessMSGCmd_15:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     DPTR,#ucEdDir
        MOVX    @DPTR,A
//  548           MotorStop();                //停止转动
        ; Setup parameters for call to function MotorData
        MOV     R1,#0x0
        LCALL   ??MotorData?relay
//  549           if(afRxData[4] == 0x02)   
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??SerialApp_ProcessMSGCmd_16
//  550           {
//  551             for(i=0;i<200;i++)
        MOV     R7,#-0x38
//  552               MotorCW();              //顺时针转动
??SerialApp_ProcessMSGCmd_17:
        MOV     R6,#0x0
??SerialApp_ProcessMSGCmd_18:
        ; Setup parameters for call to function MotorData
        MOV     ?V0 + 0,R6
        MOV     A,#phasecw & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#(phasecw >> 8) & 0xff
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_0:
        JC      ??SerialApp_ProcessMSGCmd_18
        DEC     R7
        MOV     A,R7
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_12 & 0xFFFF
        SJMP    ??SerialApp_ProcessMSGCmd_17
//  553           }
//  554           else if(afRxData[4] == 0x01)//左转标记 
??SerialApp_ProcessMSGCmd_16:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_12 & 0xFFFF
//  555           {
//  556             for(i=0;i<200;i++)
        MOV     R7,#-0x38
//  557               MotorCCW();             //逆时针转动
??SerialApp_ProcessMSGCmd_19:
        MOV     R6,#0x0
??SerialApp_ProcessMSGCmd_20:
        ; Setup parameters for call to function MotorData
        MOV     ?V0 + 0,R6
        MOV     A,#phaseccw & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#(phaseccw >> 8) & 0xff
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        JC      ??SerialApp_ProcessMSGCmd_20
        DEC     R7
        MOV     A,R7
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_12 & 0xFFFF
        SJMP    ??SerialApp_ProcessMSGCmd_19
//  558           }
//  559         }
//  560       }
//  561          else if(afRxData[3] == 0x09)      //继电器 功能码为09
??SerialApp_ProcessMSGCmd_13:
        MOVX    A,@DPTR
        XRL     A,#0x9
        JNZ     ??CrossCallReturnLabel_12
//  562       {
//  563         if(EndDeviceID == afRxData[2] || afRxData[2] == 0xFF)  //继电器 EndDeviceID为05
        MOV     DPTR,#EndDeviceID
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_5:
        POP     DPL
        CFI CFA_SP SP+0
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??SerialApp_ProcessMSGCmd_21
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_ProcessMSGCmd_21:
        JZ      ??SerialApp_ProcessMSGCmd_22
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??CrossCallReturnLabel_12
//  564         {
//  565           if(afRxData[4] == 0)
??SerialApp_ProcessMSGCmd_22:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     ??SerialApp_ProcessMSGCmd_23
//  566           {
//  567             LAMP_PIN=1;
        SETB    0x80.5
        SJMP    ??CrossCallReturnLabel_12
//  568           }
//  569           else
//  570           {
//  571             LAMP_PIN=0;
??SerialApp_ProcessMSGCmd_23:
        CLR     0x80.5
        SJMP    ??CrossCallReturnLabel_12
//  572           }
//  573         } 
//  574       }
//  575 #endif
//  576       default :
//  577         break;
//  578       }
//  579       break;
//  580       // A response to a received serial data block.
//  581     case SERIALAPP_CLUSTERID2:
//  582       if ((pkt->cmd.Data[1] == SerialApp_TxSeq) &&
//  583           ((pkt->cmd.Data[0] == OTA_SUCCESS) || (pkt->cmd.Data[0] == OTA_DUP_MSG)))
??SerialApp_ProcessMSGCmd_1:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#SerialApp_TxSeq
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??SerialApp_ProcessMSGCmd_24
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        JZ      ??SerialApp_ProcessMSGCmd_25
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SerialApp_ProcessMSGCmd_24
//  584       {
//  585         SerialApp_TxLen = 0;
??SerialApp_ProcessMSGCmd_25:
        MOV     DPTR,#SerialApp_TxLen
        CLR     A
        MOVX    @DPTR,A
//  586         osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_EVT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,A
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
        SJMP    ??CrossCallReturnLabel_12
//  587       }
//  588       else
//  589       {
//  590         // Re-start timeout according to delay sent from other device.
//  591         delay = BUILD_UINT16( pkt->cmd.Data[2], pkt->cmd.Data[3] );
//  592         osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_EVT, delay );
??SerialApp_ProcessMSGCmd_24:
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine6 & 0xFFFF
//  593       }
//  594       break;
//  595       
//  596     default:
//  597       break;
//  598     }
??CrossCallReturnLabel_7:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#0x1
        LCALL   ??Subroutine10_0 & 0xFFFF
//  599   }
??CrossCallReturnLabel_12:
        MOV     A,#0x2d
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock19
        REQUIRE T1CTL
        REQUIRE _A_P0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_22:
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_9
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_6
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_7
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        MOV     A,R6
        ADD     A,#0x22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 59)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_8
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_9
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_6
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_7
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        MOV     DPL,A
        MOV     A,R7
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_1
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 59)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_8
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_9
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_6
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_7
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker45 Using cfiCommon1
        CFI (cfiPicker45) NoFunction
        CFI (cfiPicker45) Picker
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiPicker45

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond46 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+-1
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+-1
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+-1
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker50 Using cfiCommon1
        CFI (cfiPicker50) NoFunction
        CFI (cfiPicker50) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPH,#(EndDeviceID >> 8) & 0xff
        RET
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiPicker50

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond51 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker53 Using cfiCommon1
        CFI (cfiPicker53) NoFunction
        CFI (cfiPicker53) Picker
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     R1,A
        LCALL   ??MotorData?relay
        ; Setup parameters for call to function Delay_MS
        ; Setup parameters for call to function Delay_MS
        MOV     DPTR,#ucSpeed
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??Delay_MS?relay
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x4
        RET
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiPicker53
//  600   

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  601 uint8 SendData(uint8 addr, uint8 FC)
SendData:
        CFI Block cfiBlock54 Using cfiCommon0
        CFI Function SendData
        CODE
//  602 {
        FUNCALL SendData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, XorCheckSum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, XorCheckSum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
//  603   uint8 ret, i, index=4;
        MOV     ?V0 + 4,#0x4
//  604   
//  605   TxBuffer[0] = 0x3A;
        MOV     DPTR,#TxBuffer
        MOV     A,#0x3a
        MOVX    @DPTR,A
//  606   TxBuffer[1] = 0x00;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  607   TxBuffer[2] = addr;
        MOV     A,R1
        INC     DPTR
        MOVX    @DPTR,A
//  608   TxBuffer[3] = FC;
        MOV     A,R2
        INC     DPTR
        MOVX    @DPTR,A
//  609   
//  610   switch(FC)
        DEC     A
        JZ      ??SendData_0
        DEC     A
        JZ      ??SendData_1
        LJMP    ??SendData_2 & 0xFFFF
//  611   {
//  612   case 0x01: //查询所有终端传感器的数据
//  613     for (i=0; i<MAX_NODE; i++)
??SendData_0:
        MOV     R6,#0x0
//  614     {
//  615       osal_memcpy(&TxBuffer[index], NodeData[i], 5);
??SendData_3:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R6
        MOV     B,#0x6
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#NodeData & 0xff
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,#(NodeData >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 8,?V0 + 0
        MOV     ?V0 + 9,A
        MOV     ?V0 + 10,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     ?V0 + 0,?V0 + 4
        MOV     A,#TxBuffer & 0xff
        ADD     A,?V0 + 0
        MOV     R2,A
        MOV     A,#(TxBuffer >> 8) & 0xff
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  616       index += 5;
        MOV     A,#0x5
        ADD     A,?V0 + 4
        MOV     ?V0 + 4,A
//  617     }
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x4
        JC      ??SendData_3
//  618     TxBuffer[index] = XorCheckSum(TxBuffer, index);
        MOV     DPL,?V0 + 4
        MOV     ?V0 + 0,DPL
        MOV     A,#TxBuffer & 0xff
        ADD     A,?V0 + 0
        MOV     R6,A
        MOV     A,#(TxBuffer >> 8) & 0xff
        ADDC    A,#0x0
        MOV     R7,A
        ; Setup parameters for call to function XorCheckSum
        MOV     R1,?V0 + 4
        MOV     R2,#TxBuffer & 0xff
        MOV     R3,#(TxBuffer >> 8) & 0xff
        LCALL   ??XorCheckSum?relay
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
//  619     TxBuffer[index+1] = 0x23; 
        INC     DPTR
        MOV     A,#0x23
        MOVX    @DPTR,A
//  620     
//  621     HalUARTWrite(UART0, TxBuffer, index+2);
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,#0x0
        MOV     R5,A
??SendData_4:
        MOV     R2,#TxBuffer & 0xff
        MOV     R3,#(TxBuffer >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  622     ret = 1;
        MOV     R1,#0x1
//  623     break;
        SJMP    ??SendData_5
//  624   case 0x02: //查询单个终端上所有传感器的数据
//  625     osal_memcpy(&TxBuffer[index], NodeData[addr-1], 4);
??SendData_1:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R1
        MOV     B,#0x6
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#(NodeData + 250) & 0xff
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,#((NodeData - 6) >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#(TxBuffer + 4) & 0xff
        MOV     R3,#((TxBuffer + 4) >> 8) & 0xff
        LCALL   ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  626     index += 4;
//  627     TxBuffer[index] = XorCheckSum(TxBuffer, index);
        ; Setup parameters for call to function XorCheckSum
        MOV     R1,#0x8
        MOV     R2,#TxBuffer & 0xff
        MOV     R3,#(TxBuffer >> 8) & 0xff
        LCALL   ??XorCheckSum?relay
        MOV     A,R1
        MOV     DPTR,#TxBuffer + 8
        MOVX    @DPTR,A
//  628     TxBuffer[index+1] = 0x23; 
        INC     DPTR
        MOV     A,#0x23
        MOVX    @DPTR,A
//  629     HalUARTWrite(UART0, TxBuffer, index+2);		
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xa
        MOV     R5,#0x0
        SJMP    ??SendData_4
//  630     ret = 1;
//  631     break;   
//  632   default:
//  633     ret = 0;
??SendData_2:
        MOV     R1,#0x0
//  634     break;
//  635   }
//  636   
//  637   return ret;
??SendData_5:
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock54
//  638 }
//  639 
//  640 /*********************************************************************
//  641 * @fn      SerialApp_Send
//  642 *
//  643 * @brief   Send data OTA.
//  644 *
//  645 * @param   none
//  646 *  3A000507013923    3A 00 01 01 3A 23
//  647 * @return  none
//  648 */
//  649 #pragma optimize=none  

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  650 static void SerialApp_Send(void)
SerialApp_Send:
        CFI Block cfiBlock55 Using cfiCommon0
        CFI Function SerialApp_Send
        CODE
//  651 {
        FUNCALL SerialApp_Send, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, GetDataLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, XorCheckSum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  652   uint8 len=0, addr, FC;
        MOV     R7,#0x0
//  653   uint8 checksum=0;
        MOV     ?V0 + 0,#0x0
//  654 
//  655   if (!SerialApp_TxLen && 
//  656       (SerialApp_TxLen = HalUARTRead(UART0, SerialApp_TxBuf, SERIAL_APP_TX_MAX)))
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x14
        MOV     R5,#0x0
        MOV     R2,#SerialApp_TxBuf & 0xff
        MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
        MOV     A,R2
        MOV     DPTR,#SerialApp_TxLen
        MOVX    @DPTR,A
        JNZ     $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
//  657   {
//  658     if (SerialApp_TxLen)
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
//  659     {
//  660       SerialApp_TxLen = 0;
        MOV     DPTR,#SerialApp_TxLen
        MOV     A,#0x0
        MOVX    @DPTR,A
//  661       if(SerialApp_TxBuf[0] == 0x3A)
        MOV     DPTR,#SerialApp_TxBuf
        MOVX    A,@DPTR
        XRL     A,#0x3a
        JZ      $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
//  662       {
//  663         addr = SerialApp_TxBuf[2];
        MOV     DPTR,#SerialApp_TxBuf + 2
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  664         FC = SerialApp_TxBuf[3];
        MOV     DPTR,#SerialApp_TxBuf + 3
        MOVX    A,@DPTR
        MOV     R6,A
//  665         len = GetDataLen(FC); 
        ; Setup parameters for call to function GetDataLen
        MOV     A,R6
        MOV     R1,A
        LCALL   ??GetDataLen?relay
        MOV     A,R1
        MOV     R7,A
//  666         len += 4;
        MOV     A,#0x4
        ADD     A,R7
        MOV     R7,A
//  667         checksum = XorCheckSum(SerialApp_TxBuf, len);
        ; Setup parameters for call to function XorCheckSum
        MOV     A,R7
        MOV     R1,A
        MOV     R2,#SerialApp_TxBuf & 0xff
        MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
        LCALL   ??XorCheckSum?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
//  668 
//  669         //接收数据正确返回相应数据
//  670         if(checksum == SerialApp_TxBuf[len] && SerialApp_TxBuf[len+1] == 0x23)
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,#SerialApp_TxBuf & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#(SerialApp_TxBuf >> 8) & 0xff
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,?V0 + 0
        JZ      $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,#(SerialApp_TxBuf + 1) & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#((SerialApp_TxBuf + 1) >> 8) & 0xff
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x23
        JZ      $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
//  671         {
//  672           if(FC == 7 || FC == 8 || FC == 0x0A || FC == 0x0B || FC == 0x0C || FC == 9) //控制终端
        MOV     A,#0x7
        XRL     A,R6
        JZ      ??SerialApp_Send_1
        MOV     A,#0x8
        XRL     A,R6
        JZ      ??SerialApp_Send_1
        MOV     A,#0xa
        XRL     A,R6
        JZ      ??SerialApp_Send_1
        MOV     A,#0xb
        XRL     A,R6
        JZ      ??SerialApp_Send_1
        MOV     A,#0xc
        XRL     A,R6
        JZ      ??SerialApp_Send_1
        MOV     A,#0x9
        XRL     A,R6
        JZ      $+5
        LJMP    ??SerialApp_Send_2 & 0xFFFF
//  673           {                            
//  674             if (afStatus_SUCCESS == AF_DataRequest(&Broadcast_DstAddr,
//  675                                                    (endPointDesc_t *)&SerialApp_epDesc,
//  676                                                    SERIALAPP_CLUSTERID,
//  677                                                    len+2, SerialApp_TxBuf,
//  678                                                    &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
??SerialApp_Send_1:
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 2,#0x1e
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 2,#SerialApp_MsgID & 0xff
        MOV     ?V0 + 3,#(SerialApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 2,#SerialApp_TxBuf & 0xff
        MOV     ?V0 + 3,#(SerialApp_TxBuf >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,?V0 + 2
        ADD     A,#0x2
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,#0x0
        MOV     R4,#SerialApp_epDesc & 0xff
        MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
        MOV     R2,#Broadcast_DstAddr & 0xff
        MOV     R3,#(Broadcast_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        JNZ     ??SerialApp_Send_3
//  679             {
//  680               if(FC == 0x0A) //如果开启自动刷新则不需要这步操作
        MOV     A,#0xa
        XRL     A,R6
        JNZ     ??SerialApp_Send_4
//  681                 NodeData[addr-1][3] = SerialApp_TxBuf[len-1];  //更新缓冲区灯的状态
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,#(SerialApp_TxBuf + 255) & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#((SerialApp_TxBuf - 1) >> 8) & 0xff
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,?V0 + 1
        MOV     R0,?V0 + 1
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x6
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x6
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(NodeData + 253) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((NodeData - 3) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  682               HalUARTWrite(UART0, SerialApp_TxBuf, len+2); //无线发送成功后原样返回给上位机	
??SerialApp_Send_4:
        ; Setup parameters for call to function HalUARTWrite
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,?V0 + 2
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,#SerialApp_TxBuf & 0xff
        MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        SJMP    ??SerialApp_Send_0
//  683             }
//  684             else  //暂时没发现错误，关闭终端发送也正常。无线发送失败后将数据位和校验位置0返给上位机	
//  685             {
//  686               SerialApp_TxBuf[len-1] = 0x00;
??SerialApp_Send_3:
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,#(SerialApp_TxBuf + 255) & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#((SerialApp_TxBuf - 1) >> 8) & 0xff
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  687               SerialApp_TxBuf[len] = 0x00;
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,#SerialApp_TxBuf & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#(SerialApp_TxBuf >> 8) & 0xff
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  688               HalUARTWrite(UART0, SerialApp_TxBuf, len+2);
        ; Setup parameters for call to function HalUARTWrite
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,?V0 + 2
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,#SerialApp_TxBuf & 0xff
        MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        SJMP    ??SerialApp_Send_0
//  689             }
//  690           }
//  691           else
//  692           {
//  693             SendData(addr, FC);   //查询操作
??SerialApp_Send_2:
        ; Setup parameters for call to function SendData
        MOV     A,R6
        MOV     R2,A
        MOV     R1,?V0 + 1
        LCALL   ??SendData?relay
        MOV     A,R1
//  694           }
//  695         }
//  696       }
//  697     }
//  698   }
//  699 }
??SerialApp_Send_0:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock55
//  700 
//  701 /*********************************************************************
//  702 * @fn      SerialApp_Resp
//  703 *
//  704 * @brief   Send data OTA.
//  705 *
//  706 * @param   none
//  707 *
//  708 * @return  none
//  709 */
//  710 static void SerialApp_Resp(void)
//  711 {
//  712   if (afStatus_SUCCESS != AF_DataRequest(&SerialApp_RxAddr,
//  713                                          (endPointDesc_t *)&SerialApp_epDesc,
//  714                                          SERIALAPP_CLUSTERID2,
//  715                                          SERIAL_APP_RSP_CNT, SerialApp_RspBuf,
//  716                                          &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
//  717   {
//  718     osal_set_event(SerialApp_TaskID, SERIALAPP_RESP_EVT);
//  719   }
//  720 }
//  721 
//  722 /*********************************************************************
//  723 * @fn      SerialApp_CallBack
//  724 *
//  725 * @brief   Send data OTA.
//  726 *
//  727 * @param   port - UART port.
//  728 * @param   event - the UART port event flag.
//  729 *
//  730 * @return  none
//  731 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  732 static void SerialApp_CallBack(uint8 port, uint8 event)
SerialApp_CallBack:
        CFI Block cfiBlock56 Using cfiCommon0
        CFI Function SerialApp_CallBack
        CODE
//  733 {
        FUNCALL SerialApp_CallBack, SerialApp_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  734   (void)port;
//  735   
//  736   if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
//  737 #if SERIAL_APP_LOOPBACK
//  738       (SerialApp_TxLen < SERIAL_APP_TX_MAX))
//  739 #else
//  740     !SerialApp_TxLen)
        MOV     A,#0x7
        ANL     A,R6
        JZ      ??SerialApp_CallBack_0
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        JNZ     ??SerialApp_CallBack_0
//  741 #endif
//  742   {
//  743     SerialApp_Send();
        ; Setup parameters for call to function SerialApp_Send
        LCALL   ??SerialApp_Send?relay
        CFI EndBlock cfiBlock56
//  744   }
//  745 }
??SerialApp_CallBack_0:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock57 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock57
//  746 
//  747 
//  748 //--------------------------------------------------------------------------------------
//  749 //查询单个终端上所有传感器的数据 3A 00 01 02 XX 23  响应：3A 00 01 02 00 00 00 00 xor 23
//  750 void SerialApp_SendPeriodicMessage( void )
//  751 {
//  752   uint8 SendBuf[13]={0};
//  753   char state0;
//  754 #ifdef WSN_SENSOR  
//  755   SendBuf[0] = 0x3A;                          
//  756   SendBuf[1] = HI_UINT16( EndDeviceID );
//  757   SendBuf[2] = LO_UINT16( EndDeviceID );
//  758   SendBuf[3] = 0x02;                       //FC
//  759   
//  760   DHT11();                //获取温湿度
//  761   SendBuf[4] = wendu;  
//  762   SendBuf[5] = shidu;  
//  763   SendBuf[6] = GetGas();  //获取气体传感器的状态 
//  764    if(DATA_PIN05 == 1)
//  765     state0 = 0x30;       //当光敏电阻处于黑暗中时P0.5高电平
//  766   else
//  767     state0 = 0x31;
//  768   SendBuf[7]=ReadLightData();
//  769   SendBuf[8]=state0;//获得光敏电阻的状态
//  770   SendBuf[9]=GetSecurity();
//  771   SendBuf[10] = XorCheckSum(SendBuf, 11);
//  772   SendBuf[11] = 0x23;
//  773   
//  774   SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  775   SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
//  776   SerialApp_TxAddr.addr.shortAddr = 0x00;  
//  777   if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
//  778                       SERIALAPP_CLUSTERID,
//  779                       12,
//  780                       SendBuf,
//  781                       &SerialApp_MsgID, 
//  782                       0, 
//  783                       AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
//  784   {
//  785     // Successfully requested to be sent.
//  786   }
//  787   else
//  788   {
//  789     // Error occurred in request to send.
//  790   }
//  791 #endif
//  792   
//  793 #ifdef WSN_BEEP
//  794   SendBuf[0] = GetGas();  //获取气体传感器的状态 0为有害气体   1为正常
//  795   
//  796   //终端5执行蜂鸣器操作   蜂鸣器动作电平 1: 响 ，0: 不响
//  797   if(SendBuf[0] == 0 && EndDeviceID == 5)
//  798   {
//  799     TIMER1_RUN();      //检测到异常气体时蜂鸣器响
//  800   }
//  801   else
//  802   {
//  803     TIMER1_STOP();    //气体正常不响
//  804   }    
//  805 #endif
//  806 }
//  807 
//  808 
//  809 #if UART_DEBUG   
//  810 //通过串口输出短地址 IEEE
//  811 void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr)
//  812 {
//  813   uint8 strIeeeAddr[17] = {0};
//  814   char  buff[30] = {0};    
//  815   
//  816   //获得短地址   
//  817   sprintf(buff, "shortAddr:%04X   IEEE:", shortAddr);  
//  818   
//  819   //获得IEEE地址
//  820   GetIeeeAddr(pIeeeAddr, strIeeeAddr);
//  821   
//  822   HalUARTWrite (UART0, (uint8 *)buff, strlen(buff));
//  823   Delay_ms(10);
//  824   HalUARTWrite (UART0, strIeeeAddr, 16); 
//  825   HalUARTWrite (UART0, "\n", 1);
//  826 }
//  827 
//  828 void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr)
//  829 {
//  830   uint8 i;
//  831   uint8 *xad = pIeeeAddr;
//  832   
//  833   for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
//  834   {
//  835     uint8 ch;
//  836     ch = (*xad >> 4) & 0x0F;
//  837     *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
//  838     i++;
//  839     ch = *xad & 0x0F;
//  840     *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
//  841     i++;
//  842   }
//  843 }
//  844 #endif  
//  845 
//  846 void AfSendAddrInfo(void)
//  847 {
//  848   uint16 shortAddr;
//  849   uint8 strBuf[11]={0};  
//  850   
//  851   SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  852   SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
//  853   SerialApp_TxAddr.addr.shortAddr = 0x00;   
//  854   
//  855   shortAddr=NLME_GetShortAddr();
//  856   
//  857   strBuf[0] = 0x3B;                          //发送地址给协调器 可用于点播
//  858   strBuf[1] = HI_UINT16( shortAddr );        //存放短地址高8位
//  859   strBuf[2] = LO_UINT16( shortAddr );        //存放短地址低8位
//  860   
//  861   osal_memcpy(&strBuf[3], NLME_GetExtAddr(), 8);
//  862   
//  863   if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
//  864                       SERIALAPP_CLUSTERID,
//  865                       11,
//  866                       strBuf,
//  867                       &SerialApp_MsgID, 
//  868                       0, 
//  869                       AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
//  870   {
//  871   }
//  872   else
//  873   {
//  874     // Error occurred in request to send.
//  875   }   
//  876 }
//  877 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  878 uint8 XorCheckSum(uint8 * pBuf, uint8 len)
XorCheckSum:
        CFI Block cfiBlock58 Using cfiCommon0
        CFI Function XorCheckSum
        CODE
//  879 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
//  880   uint8 i;
//  881   uint8 byRet=0;
//  882   
//  883   if(len == 0)
        JNZ     ??XorCheckSum_0
//  884     return byRet;
        MOV     R1,#0x0
        SJMP    ??XorCheckSum_1
//  885   else
//  886     byRet = pBuf[0];
??XorCheckSum_0:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R1,A
//  887   
//  888   for(i = 1; i < len; i ++)
        MOV     R0,#0x1
        SJMP    ??XorCheckSum_2
//  889     byRet = byRet ^ pBuf[i];
??XorCheckSum_3:
        MOV     ?V0 + 0,R0
        MOV     A,R2
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_18:
        XCH     A,R1
        XRL     A,R1
        MOV     R1,A
        INC     R0
??XorCheckSum_2:
        MOV     A,R0
        CLR     C
        SUBB    A,R4
        JC      ??XorCheckSum_3
//  890   
//  891   return byRet;
??XorCheckSum_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock58
//  892 }
//  893 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  894 uint8 GetDataLen(uint8 fc)
GetDataLen:
        CFI Block cfiBlock59 Using cfiCommon0
        CFI Function GetDataLen
        CODE
//  895 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
//  896   uint8 len=0;
        MOV     R1,#0x0
//  897   switch(fc)
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for GetDataLen>_0`:
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        7
        DATA
        DATA8
        DATA
        DATA8
        DB        13
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GetDataLen_0
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GetDataLen_1
        CODE
//  898   {
//  899   case 0x07:
//  900   case 0x08:
//  901   case 0x0A:
//  902   case 0x0B:
//  903   case 0x0C:
//  904   case 0x0D:
//  905   case 0x09:
//  906     len = 1;
??GetDataLen_0:
        INC     R1
        CFI EndBlock cfiBlock59
//  907     break;
//  908   }
//  909   
//  910   return len;
??GetDataLen_1:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  911 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock60 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock60
//  912 
//  913 //获得P0_5 继电器引脚的电平
//  914 uint8 GetLamp( void )
//  915 {
//  916   uint8 ret;
//  917   
//  918  //if(LAMP_PIN == 0)
//  919    // ret = 0;
//  920   //else
//  921     //ret = 1;
//  922   
//  923   return ret;
//  924 }
//  925 
//  926 //获得P0_6 MQ-2气体传感器的数据 0为有害气体   1为正常
//  927 uint8 GetGas( void )
//  928 {
//  929   uint8 ret;
//  930   
//  931   if(GAS_PIN == 0)
//  932   {
//  933     ret = 0;
//  934   }
//  935   else
//  936   {
//  937     ret = 1;
//  938   }
//  939   
//  940   return ret;
//  941 }
//  942 uint8 GetSecurity(void)
//  943 {
//  944   uint8 ret;
//  945     if(DATA_PIN == 0)
//  946   {
//  947     ret = 0;
//  948   }
//  949   else
//  950   {
//  951     ret = 1;
//  952   }
//  953   
//  954   return ret;
//  955 }
//  956 //-------------------------------------------------------------------
//  957 
//  958 
//  959 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//  960 //#ifdef WSN_BEEP
//  961 //步进电机驱动部分

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  962 static void MotorData(uchar data)
MotorData:
        CFI Block cfiBlock61 Using cfiCommon0
        CFI Function MotorData
        CODE
//  963 {
        ; Saved register size: 0
        ; Auto size: 0
//  964   A1 = 1&(data>>4);
        MOV     A,R1
        MOV     C,0xE0 /* A   */.4
        MOV     0x80.4,C
//  965   B1 = 1&(data>>5);
        MOV     C,0xE0 /* A   */.5
        MOV     0x80.5,C
//  966   C1 = 1&(data>>6);
        MOV     C,0xE0 /* A   */.6
        MOV     0x80.6,C
//  967   D1 = 1&(data>>7);
        MOV     C,0xE0 /* A   */.7
        MOV     0x80.7,C
//  968 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock61
        REQUIRE _A_P0
//  969 
//  970 //顺时针转动
//  971 static void MotorCW(void)
//  972 {
//  973   uchar i;
//  974   for(i=0;i<4;i++)
//  975   {
//  976     MotorData(phasecw[i]);
//  977     Delay_MS(ucSpeed);//转速调节
//  978   }
//  979 }
//  980 //逆时针转动
//  981 static void MotorCCW(void)
//  982 {
//  983   uchar i;
//  984   for(i=0;i<4;i++)
//  985   {
//  986     MotorData(phaseccw[i]);
//  987     Delay_MS(ucSpeed);//转速调节
//  988   }
//  989 }
//  990 
//  991 //停止转动
//  992 static void MotorStop(void)
//  993 {
//  994   MotorData(0x00);
//  995 }
//  996 
//  997 #ifdef WSN_STEP
//  998 //初始化IO口程序
//  999 static void InitStepMotor(void)
// 1000 {
// 1001   P0SEL &= 0x0F;  //P04 05 06 07定义为普通IO
// 1002   P0DIR |= 0xF0;  //P04 05 06 07定义为输出
// 1003   
// 1004   MotorData(0x00);//停止转动
// 1005 }
// 1006 #endif
// 1007 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1008 static void Delay_MS(unsigned int Time)// 1ms延时
Delay_MS:
        CFI Block cfiBlock62 Using cfiCommon0
        CFI Function Delay_MS
        CODE
// 1009 {
        FUNCALL Delay_MS, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1010   char i;
// 1011   
// 1012   while(Time--)
??Delay_MS_0:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R7,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??Delay_MS_1
// 1013   {
// 1014     for(i=0;i<100;i++)
        MOV     ?V0 + 0,#0x64
// 1015       MicroWait(10);
??Delay_MS_2:
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
        DEC     ?V0 + 0
        MOV     A,?V0 + 0
        JZ      ??Delay_MS_0
        SJMP    ??Delay_MS_2
// 1016   }
// 1017 }
??Delay_MS_1:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock62
// 1018 //#endif
// 1019 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 1020 
// 1021 
// 1022 //-------------------------------------------------------------------
// 1023 //协议栈里使用timer 1输出PWM，使用的是正计数/倒计数模式，占空比可调整

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1024 void init_port(void)
init_port:
        CFI Block cfiBlock63 Using cfiCommon0
        CFI Function init_port
        CODE
// 1025 {
        ; Saved register size: 0
        ; Auto size: 0
// 1026   P0SEL |= 0x80;         //设置P0.7口为外设
        ORL     0xf3,#0x80
// 1027   P0DIR |= 0x80;         //设置P0.7为输出
        ORL     0xfd,#0x80
// 1028   PERCFG |= 0x40;        //设置定时器1 的I / O 位置   1： 备用位置2
        ORL     0xf1,#0x40
// 1029   
// 1030   return ;
        LJMP    ?BRET
        CFI EndBlock cfiBlock63
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE PERCFG
// 1031 }
// 1032 
// 1033 // 将基准值放入T1CC0 寄存器, 将被比较值放入T1CC3寄存器
// 1034 // 当T1CC3中的值与T1CC0中的值相等时，则T1CC3 设置or清除

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1035 void init_timer(void)
init_timer:
        CFI Block cfiBlock64 Using cfiCommon0
        CFI Function init_timer
        CODE
// 1036 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1037   T1CC0L = 0xff;         //PWM duty cycle  周期
        MOV     0xda,#-0x1
// 1038   T1CC0H = 0x0;
        MOV     0xdb,#0x0
// 1039   
// 1040   T1CC3L = 0x00;        //PWM signal period 占空比
        MOV     DPTR,#0x62ac
        CLR     A
        MOVX    @DPTR,A
// 1041   T1CC3H = 0x00;
        INC     DPTR
        MOVX    @DPTR,A
// 1042   
// 1043   //等于T1CC0中的数值时候，输出高电平 1； 等于T1CC3中的数值时候，输出低电平 0 
// 1044   //其实整个占空比就为50%  为了蜂鸣器输出连续的响声修改了占空比
// 1045   T1CCTL3 = 0x34;       
        MOV     DPTR,#0x62a3
        MOV     A,#0x34
        MOVX    @DPTR,A
// 1046   T1CTL |= 0x0f;         // divide with 128 and to do i up-down mode
        ORL     0xe4,#0xf
// 1047   return ;
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock64
        REQUIRE T1CC0L
        REQUIRE T1CC0H
        REQUIRE T1CTL
// 1048 }
// 1049 uint16 ReadLightData( void )
// 1050 {
// 1051   uint16 reading = 0;
// 1052   
// 1053   P0DIR &= ~0x20;  // 设置P0.5为输入方式
// 1054   asm("NOP");asm("NOP");
// 1055   
// 1056   /* Clear ADC interrupt flag */
// 1057   ADCIF = 0;
// 1058   
// 1059   ADCCON3 = (0x80 | HAL_ADC_DEC_064 | HAL_ADC_CHANNEL_5);
// 1060   
// 1061   /* Wait for the conversion to finish */
// 1062   while ( !ADCIF );
// 1063   
// 1064   asm("NOP");asm("NOP");
// 1065   
// 1066   /* Read the result */
// 1067   reading = ADCL;
// 1068   reading |= (int16) (ADCH << 8);
// 1069   reading >>= 8;
// 1070   
// 1071   return reading;
// 1072 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1073 void start_pwm(void) 
start_pwm:
        CFI Block cfiBlock65 Using cfiCommon0
        CFI Function start_pwm
        CODE
// 1074 {
        FUNCALL start_pwm, init_port
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL start_pwm, init_timer
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1075   init_port();
        ; Setup parameters for call to function init_port
        LCALL   ??init_port?relay
// 1076   init_timer();
        ; Setup parameters for call to function init_timer
        LCALL   ??init_timer?relay
// 1077   // IEN1 |=0x02;     //Timer 1 中断使能
// 1078   // EA = 1;          //全局中断使能
// 1079   // while(1) {;}
// 1080   return ;
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock65
// 1081 }
// 1082 
// 1083 //volatile unsigned char count = 0;
// 1084 
// 1085 #pragma vector=T1_VECTOR

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1086 __interrupt void _IRQ_timer1(void)
_IRQ_timer1:
        CFI Block cfiBlock66 Using cfiCommon1
        CFI Function _IRQ_timer1
        CODE
// 1087 {
        ; Saved register size: 1
        ; Auto size: 0
// 1088   //TODO....
// 1089 }
        RETI
        CFI EndBlock cfiBlock66

        COMMON INTVEC:CODE:ROOT(0)
        ORG 75
`??_IRQ_timer1??INTVEC 75`:
        LJMP       (_IRQ_timer1)

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for EndDeviceID>`:
        DATA16
        DW 5

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for AppTitle>`:
        DB "ALD WSN-system"
        DB 0, 0, 0, 0, 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ucEdDir>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ucDirection>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ucSpeed>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for phasecw>`:
        DATA8
        DB 128
        DB 64
        DB 32
        DB 16

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for phaseccw>`:
        DATA8
        DB 16
        DB 32
        DB 64
        DB 128

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_ProcessMSGCmd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_ProcessMSGCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SendData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SendData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_Send?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_Send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_CallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??XorCheckSum?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    XorCheckSum

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetDataLen?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetDataLen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MotorData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MotorData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_MS?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_MS

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??init_port?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    init_port

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??init_timer?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    init_timer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??start_pwm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    start_pwm

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ALD WSN-Node01">`:
        DB "ALD WSN-Node01"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ALD WSN-Node02">`:
        DB "ALD WSN-Node02"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ALD WSN-Node03">`:
        DB "ALD WSN-Node03"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ALD WSN-Node04">`:
        DB "ALD WSN-Node04"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ALD WSN-BEEP05">`:
        DB "ALD WSN-BEEP05"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "stepping motor">`:
        DB "stepping motor"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ALD WSN-system">`:
        DB "ALD WSN-system"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_1`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_2`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0

        END
// 1090 //-------------------------------------------------------------------
// 1091 
// 1092 
// 1093 /*********************************************************************
// 1094 *********************************************************************/
// 1095   
// 
// 2 530 bytes in segment BANKED_CODE
//    78 bytes in segment BANK_RELAYS
//     3 bytes in segment INTVEC
//     1 byte  in segment NEAR_CODE
//     7 bytes in segment SFR_AN
//    33 bytes in segment XDATA_I
//    33 bytes in segment XDATA_ID
//   181 bytes in segment XDATA_ROM_C
//   222 bytes in segment XDATA_Z
// 
// 2 642 bytes of CODE  memory (+ 3 bytes shared)
//   181 bytes of CONST memory
//     0 bytes of DATA  memory (+ 7 bytes shared)
//   255 bytes of XDATA memory
//
//Errors: none
//Warnings: 10
