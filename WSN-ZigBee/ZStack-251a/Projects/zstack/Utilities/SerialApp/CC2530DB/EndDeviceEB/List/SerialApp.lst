###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         31/May/2016  09:30:22 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\BaiduYunDownload\第6章                          #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\Source\SerialApp.c               #
#    Command line       =  -f "F:\BaiduYunDownload\第6章                      #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wEndev.cfg" (-DCPU32MHZ -DROOT=__near_func      #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f "F:\BaiduYunDownload\第6章  #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0            #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1688                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "F:\BaiduYunDownload\第6章  #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\Source\SerialApp.c" -D           #
#                          NWK_AUTO_POLL -D HAL_UART=TRUE -D                  #
#                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED -D              #
#                          xPOWER_SAVING -lC "F:\BaiduYunDownload\第6章       #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\EndDeviceEB\List\" -lA  #
#                          "F:\BaiduYunDownload\第6章                         #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\EndDeviceEB\List\"      #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "F:\BaiduYunDownload\第6章                         #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\EndDeviceEB\Obj\" -e    #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "F:\BaiduYunDownload\第6章                      #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\" -I                    #
#                          "F:\BaiduYunDownload\第6章                         #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\Source\" -I          #
#                          "F:\BaiduYunDownload\第6章                         #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\ZMain\TI2530DB #
#                          \" -I "F:\BaiduYunDownload\第6章                   #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\hal\include\" -I "F:\BaiduYunDownload\第6章     #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\hal\target\CC2530EB\" -I                        #
#                          "F:\BaiduYunDownload\第6章                         #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\include\" -I "F:\BaiduYunDownload\第6章     #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\high_level\" -I "F:\BaiduYunDownload\第6章  #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\low_level\srf04\" -I                        #
#                          "F:\BaiduYunDownload\第6章                         #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\low_level\srf04\single_chip\" -I            #
#                          "F:\BaiduYunDownload\第6章                         #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mt\" -I "F:\BaiduYunDownload\第6章              #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\osal\include\" -I "F:\BaiduYunDownload\第6章    #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\services\saddr\" -I "F:\BaiduYunDownload\第6章  #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\services\sdata\" -I "F:\BaiduYunDownload\第6章  #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\af\" -I "F:\BaiduYunDownload\第6章        #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\nwk\" -I "F:\BaiduYunDownload\第6章       #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sapi\" -I "F:\BaiduYunDownload\第6章      #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sec\" -I "F:\BaiduYunDownload\第6章       #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sys\" -I "F:\BaiduYunDownload\第6章       #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\zdo\" -I "F:\BaiduYunDownload\第6章       #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\zmac\" -I "F:\BaiduYunDownload\第6章            #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\zmac\f8w\" -Ohz --require_prototypes            #
#    List file          =  F:\BaiduYunDownload\第6章                          #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\EndDeviceEB\List\Serial #
#                          App.lst                                            #
#    Object file        =  F:\BaiduYunDownload\第6章                          #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\EndDeviceEB\Obj\SerialA #
#                          pp.r51                                             #
#                                                                             #
#                                                                             #
###############################################################################

F:\BaiduYunDownload\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c
      1          /*********************************************************************
      2          * INCLUDES
      3          */
      4          #include <stdio.h>
      5          #include <string.h>
      6          
      7          #include "AF.h"
      8          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xda
   \   unsigned char volatile __sfr T1CC0L
   \                     T1CC0L:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xdb
   \   unsigned char volatile __sfr T1CC0H
   \                     T1CC0H:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe4
   \   unsigned char volatile __sfr T1CTL
   \                     T1CTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
      9          #include "OSAL_Tasks.h"
     10          #include "SerialApp.h"
     11          #include "ZDApp.h"
     12          #include "ZDObject.h"
     13          #include "ZDProfile.h"
     14          #include "hal_lcd.h"
     15          #include "hal_drivers.h"
     16          #include "hal_key.h"
     17          #if defined ( LCD_SUPPORTED )
     18          
     19          #endif
     20          #include "hal_led.h"
     21          #include "hal_uart.h"
     22          #include "hal_adc.h"
     23          #include "DHT11.h"
     24          #include "nwk_globals.h"
     25          
     26          
     27          //---------------------------------------------------------------------
     28          //标准版不同的终端需要修改此ID,用于识别协调器发过来的数据，ID相同则处理

   \                                 In  segment XDATA_I, align 1, keep-with-next
     29          static uint16 EndDeviceID = 0x0005 ; //终端ID，重要
   \                     EndDeviceID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for EndDeviceID>`
   \   000002                REQUIRE __INIT_XDATA_I
     30          //---------------------------------------------------------------------
     31          
     32          //定义节点功能用作传感器或气体+蜂鸣器,还是步进电机
     33          //#define WSN_SENSOR     //用作4个采集节点
     34          #define WSN_BEEP     //气体+蜂鸣器 EndDeviceID=5
     35          //#define WSN_STEP     //步进电机    EndDeviceID=6
     36          
     37          
     38          #define DATA_PIN P0_4            //定义P0.4口为传感器的输入端
     39          #define LAMP_PIN     P0_5  //定义P0.5口为继电器输入端
     40          #define DATA_PIN05   P0_5    //定义P0.5口为光敏的输入端
     41          #define GAS_PIN      P0_6  //定义P0.6口为烟雾传感器的输入端  
     42          #define BEEP_PIN     P0_7  //定义P0.7口为蜂鸣器的输出端  
     43          
     44          #define A1 P0_4            //定义步进电机连接端口
     45          #define B1 P0_5
     46          #define C1 P0_6
     47          #define D1 P0_7
     48          
     49          #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
     50          #define UART0        0x00
     51          
     52          #define MAX_NODE     0x04
     53          #define UART_DEBUG   0x00 //调试宏,通过串口输出协调器和终端的IEEE、短地址
     54          #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])
     55          
     56          #define TIMER1_RUN()  T1CTL|=0X03
     57          #define TIMER1_STOP() T1CTL&=~0X03
     58          /*********************************************************************
     59          * CONSTANTS
     60          */
     61          
     62          #if !defined( SERIAL_APP_PORT )
     63          #define SERIAL_APP_PORT  0
     64          #endif
     65          
     66          #if !defined( SERIAL_APP_BAUD )
     67          #define SERIAL_APP_BAUD  HAL_UART_BR_115200  //HAL_UART_BR_38400
     68          #endif
     69          
     70          // When the Rx buf space is less than this threshold, invoke the Rx callback.
     71          #if !defined( SERIAL_APP_THRESH )
     72          #define SERIAL_APP_THRESH  64
     73          #endif
     74          
     75          #if !defined( SERIAL_APP_RX_SZ )
     76          #define SERIAL_APP_RX_SZ  128
     77          #endif
     78          
     79          #if !defined( SERIAL_APP_TX_SZ )
     80          #define SERIAL_APP_TX_SZ  128
     81          #endif
     82          
     83          // Millisecs of idle time after a byte is received before invoking Rx callback.
     84          #if !defined( SERIAL_APP_IDLE )
     85          #define SERIAL_APP_IDLE  6
     86          #endif
     87          
     88          // Loopback Rx bytes to Tx for throughput testing.
     89          #if !defined( SERIAL_APP_LOOPBACK )
     90          #define SERIAL_APP_LOOPBACK  FALSE
     91          #endif
     92          
     93          // This is the max byte count per OTA message.
     94          #if !defined( SERIAL_APP_TX_MAX )
     95          #define SERIAL_APP_TX_MAX  20
     96          #endif
     97          
     98          #define SERIAL_APP_RSP_CNT  4
     99          
    100          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    101          const cId_t SerialApp_ClusterList[SERIALAPP_MAX_CLUSTERS] =
   \                     SerialApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0000         DW 0
    102          {
    103            SERIALAPP_CLUSTERID
    104          };
    105          

   \                                 In  segment XDATA_ROM_C, align 1
    106          const SimpleDescriptionFormat_t SerialApp_SimpleDesc =
   \                     SerialApp_SimpleDesc:
   \   000000   0B           DB 11
   \   000001   050F         DW 3845
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SerialApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SerialApp_ClusterList
    107          {
    108            SERIALAPP_ENDPOINT,              //  int   Endpoint;
    109            SERIALAPP_PROFID,                //  uint16 AppProfId[2];
    110            SERIALAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    111            SERIALAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    112            SERIALAPP_FLAGS,                 //  int   AppFlags:4;
    113            SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    114            (cId_t *)SerialApp_ClusterList,  //  byte *pAppInClusterList;
    115            SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumOutClusters;
    116            (cId_t *)SerialApp_ClusterList   //  byte *pAppOutClusterList;
    117          };
    118          

   \                                 In  segment XDATA_ROM_C, align 1
    119          const endPointDesc_t SerialApp_epDesc =
   \                     SerialApp_epDesc:
   \   000000   0B           DB 11
   \   000001   ....         DW SerialApp_TaskID
   \   000003   ....         DW SerialApp_SimpleDesc
   \   000005   00           DB 0
    120          {
    121            SERIALAPP_ENDPOINT,
    122            &SerialApp_TaskID,
    123            (SimpleDescriptionFormat_t *)&SerialApp_SimpleDesc,
    124            noLatencyReqs
    125          };
    126          
    127          
    128          /*********************************************************************
    129          * GLOBAL VARIABLES
    130          */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    131          uint8 AppTitle[20] = "ALD WSN-system"; //应用程序名称
   \                     AppTitle:
   \   000000                DS 20
   \   000014                REQUIRE `?<Initializer for AppTitle>`
   \   000014                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          uint8 SerialApp_TaskID;    // Task ID for internal task/event processing.
   \                     SerialApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    133          
    134          
    135          /*********************************************************************
    136          * LOCAL VARIABLES
    137          */
    138          #ifdef WSN_SENSOR
    139          static bool SendFlag = 0;
    140          #endif
    141          static uint8 SerialApp_MsgID;
    142          
    143          static afAddrType_t SerialApp_TxAddr;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          static afAddrType_t Broadcast_DstAddr;
   \                     Broadcast_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          static uint8 SerialApp_TxSeq;
   \                     SerialApp_TxSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          static uint8 SerialApp_TxBuf[SERIAL_APP_TX_MAX+1];
   \                     SerialApp_TxBuf:
   \   000000                DS 21
   \   000015                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          static uint8 SerialApp_TxLen;
   \                     SerialApp_TxLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          static afAddrType_t SerialApp_RxAddr;
   \                     SerialApp_RxAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          static uint8 SerialApp_RspBuf[SERIAL_APP_RSP_CNT];
   \                     SerialApp_RspBuf:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    152          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          static devStates_t SerialApp_NwkState;
   \                     SerialApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          static afAddrType_t SerialApp_TxAddr;
   \                     SerialApp_TxAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          static uint8 SerialApp_MsgID;
   \                     SerialApp_MsgID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          uint8 NodeData[MAX_NODE][6];         //终端数据缓冲区 0=温度 1=湿度 2=气体 3=灯
   \                     NodeData:
   \   000000                DS 24
   \   000018                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          uint8 TxBuffer[128];
   \                     TxBuffer:
   \   000000                DS 128
   \   000080                REQUIRE __INIT_XDATA_Z
    159          
    160          //电机相关的变量

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          uint8 LedState = 0;
   \                     LedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    162          uint8 ucEdDir = 1;      //终端1为正转  2为反转
   \                     ucEdDir:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ucEdDir>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    163          uint8 ucDirection = 1;  //1为正转  2为反转
   \                     ucDirection:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ucDirection>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    164          uint8 ucSpeed = 2;      //速度2-10之间
   \                     ucSpeed:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ucSpeed>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          uint8 DataBuf[3];
   \                     DataBuf:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z
    166          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    167          uchar phasecw[4] ={0x80,0x40,0x20,0x10};//正转 电机导通相序 D-C-B-A
   \                     phasecw:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for phasecw>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    168          uchar phaseccw[4]={0x10,0x20,0x40,0x80};//反转 电机导通相序 A-B-C-D
   \                     phaseccw:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for phaseccw>`
   \   000004                REQUIRE __INIT_XDATA_I
    169          /*********************************************************************
    170          * LOCAL FUNCTIONS
    171          */
    172          
    173          static void SerialApp_HandleKeys( uint8 shift, uint8 keys );
    174          static void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
    175          static void SerialApp_Send(void);
    176          static void SerialApp_Resp(void);
    177          static void SerialApp_CallBack(uint8 port, uint8 event);
    178          
    179          #if UART_DEBUG  
    180          static void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr);
    181          static void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr);
    182          #endif
    183          static void AfSendAddrInfo(void);
    184          static void SerialApp_SendPeriodicMessage( void );
    185          static uint8 GetDataLen(uint8 fc);
    186          static uint8 GetLamp( void );
    187          static uint8 GetGas( void );
    188          static uint8 GetSecurity( void );
    189          static uint8 XorCheckSum(uint8 * pBuf, uint8 len);
    190          static uint16 ReadLightData( void );
    191          uint8 SendData(uint8 addr, uint8 FC);
    192          
    193          //WSN_BEEP
    194          void init_timer(void);
    195          void init_port(void);
    196          void start_pwm(void) ;
    197          __interrupt void _IRQ_timer1(void);
    198          
    199          //WSN_STEP
    200          static void MotorData(uchar data);
    201          static void MotorCW(void);
    202          static void MotorCCW(void);
    203          static void MotorStop(void);
    204          
    205          static void Delay_MS(unsigned int Time);
    206          #ifdef WSN_STEP
    207          static void InitStepMotor(void);
    208          #endif
    209          /*********************************************************************
    210          * @fn      SerialApp_Init
    211          *
    212          * @brief   This is called during OSAL tasks' initialization.
    213          *
    214          * @param   task_id - the Task ID assigned by OSAL.
    215          *
    216          * @return  none
    217          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    218          void SerialApp_Init( uint8 task_id )
   \                     SerialApp_Init:
    219          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 0,R1
    220            halUARTCfg_t uartConfig;
    221            
    222          #ifdef WSN_SENSOR
    223            P0SEL &= ~0x20;         //设置P0.5口为普通IO
    224            P0DIR &= ~0x20;          //设置P0.5为输入(光敏)
    225            P0SEL &= ~0x40;         //设置P0.6为普通IO口
    226            P0DIR &= ~0x40;         //P0.6定义为输入口
    227            P0SEL &= ~0x80;         //P0_7配置成通用io
    228            P0SEL &= ~0x10;         //设置P0.4为普通IO口
    229            P0DIR &= ~0x10;         //P0.4定义为输入口
    230          #elif defined WSN_BEEP
    231            P0SEL &= ~0x20;         //设置P0.5口为普通IO
   \   00000C   53F3DF       ANL     0xf3,#0xdf
    232            P0DIR |= 0x20;          //设置P0.5为输出(继电器)
   \   00000F   43FD20       ORL     0xfd,#0x20
    233            P0SEL &= ~0x40;         //设置P0.6为普通IO口
   \   000012   53F3BF       ANL     0xf3,#0xbf
    234            P0DIR &= ~0x40;         //P0.6定义为输入口
   \   000015   53FDBF       ANL     0xfd,#0xbf
    235            start_pwm();            //配置T1输出PWM
   \   000018                ; Setup parameters for call to function init_port
   \   000018   12....       LCALL   ??init_port?relay
   \   00001B                ; Setup parameters for call to function init_timer
   \   00001B   12....       LCALL   ??init_timer?relay
    236            TIMER1_STOP();          //默认关闭蜂鸣器
   \   00001E   53E4FC       ANL     0xe4,#0xfc
    237            EndDeviceID = 0x0005;   //终端5的内部编号  
   \   000021   90....       MOV     DPTR,#EndDeviceID
   \   000024   7405         MOV     A,#0x5
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   E4           CLR     A
   \   000029   F0           MOVX    @DPTR,A
    238          #elif defined WSN_STEP
    239            InitStepMotor();        //初始化电机IO引脚
    240            EndDeviceID = 0x0006;   //终端6的内部编号  
    241          #endif
    242          
    243          #if defined(ZDO_COORDINATOR) 
    244            EndDeviceID = 0x0000;
    245            P0SEL &= ~0x20;         //设置P0.5口为普通IO
    246            P0DIR |= 0x20;          //设置P0.5为输出(继电器)
    247          #endif
    248            
    249            Color    = BLACK; //前景色
   \   00002A   90....       MOV     DPTR,#Color
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   F0           MOVX    @DPTR,A
    250            Color_BK = GREEN; //背景色
   \   000030   90....       MOV     DPTR,#Color_BK
   \   000033   74E0         MOV     A,#-0x20
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   7407         MOV     A,#0x7
   \   000039   F0           MOVX    @DPTR,A
    251            osal_memset(AppTitle, 0, 20);
   \   00003A                ; Setup parameters for call to function osal_memset
   \   00003A   7C14         MOV     R4,#0x14
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   7900         MOV     R1,#0x0
   \   000040   7A..         MOV     R2,#AppTitle & 0xff
   \   000042   7B..         MOV     R3,#(AppTitle >> 8) & 0xff
   \   000044   12....       LCALL   ??osal_memset?relay
    252            //LCD上显示应用程序的标题
    253            if(EndDeviceID == 0x0001)
   \   000047   90....       MOV     DPTR,#EndDeviceID
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6401         XRL     A,#0x1
   \   00004D   7002         JNZ     ??SerialApp_Init_0
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \                     ??SerialApp_Init_0:
   \   000051   7015         JNZ     ??SerialApp_Init_1
    254              osal_memcpy(AppTitle, "ALD WSN-Node01", osal_strlen("ALD WSN-Node01"));
   \   000053                ; Setup parameters for call to function osal_memcpy
   \   000053   75....       MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node01">` & 0xff
   \   000056   75....       MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node01">` >> 8) & 0xff
   \   000059   75..00       MOV     ?V0 + 6,#0x0
   \   00005C   78..         MOV     R0,#?V0 + 4
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000061                ; Setup parameters for call to function osal_strlen
   \   000061   7A..         MOV     R2,#`?<Constant "ALD WSN-Node01">` & 0xff
   \   000063   7B..         MOV     R3,#(`?<Constant "ALD WSN-Node01">` >> 8) & 0xff
   \   000065   02....       LJMP    ??SerialApp_Init_2 & 0xFFFF
    255            else if(EndDeviceID == 0x0002)
   \                     ??SerialApp_Init_1:
   \   000068   90....       MOV     DPTR,#EndDeviceID
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   6402         XRL     A,#0x2
   \   00006E   7002         JNZ     ??SerialApp_Init_3
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \                     ??SerialApp_Init_3:
   \   000072   7015         JNZ     ??SerialApp_Init_4
    256              osal_memcpy(AppTitle, "ALD WSN-Node02", osal_strlen("ALD WSN-Node02"));
   \   000074                ; Setup parameters for call to function osal_memcpy
   \   000074   75....       MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node02">` & 0xff
   \   000077   75....       MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node02">` >> 8) & 0xff
   \   00007A   75..00       MOV     ?V0 + 6,#0x0
   \   00007D   78..         MOV     R0,#?V0 + 4
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000082                ; Setup parameters for call to function osal_strlen
   \   000082   7A..         MOV     R2,#`?<Constant "ALD WSN-Node02">` & 0xff
   \   000084   7B..         MOV     R3,#(`?<Constant "ALD WSN-Node02">` >> 8) & 0xff
   \   000086   02....       LJMP    ??SerialApp_Init_2 & 0xFFFF
    257            else if(EndDeviceID == 0x0003)
   \                     ??SerialApp_Init_4:
   \   000089   90....       MOV     DPTR,#EndDeviceID
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   6403         XRL     A,#0x3
   \   00008F   7002         JNZ     ??SerialApp_Init_5
   \   000091   A3           INC     DPTR
   \   000092   E0           MOVX    A,@DPTR
   \                     ??SerialApp_Init_5:
   \   000093   7014         JNZ     ??SerialApp_Init_6
    258              osal_memcpy(AppTitle, "ALD WSN-Node03", osal_strlen("ALD WSN-Node03"));
   \   000095                ; Setup parameters for call to function osal_memcpy
   \   000095   75....       MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node03">` & 0xff
   \   000098   75....       MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node03">` >> 8) & 0xff
   \   00009B   75..00       MOV     ?V0 + 6,#0x0
   \   00009E   78..         MOV     R0,#?V0 + 4
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A3                ; Setup parameters for call to function osal_strlen
   \   0000A3   7A..         MOV     R2,#`?<Constant "ALD WSN-Node03">` & 0xff
   \   0000A5   7B..         MOV     R3,#(`?<Constant "ALD WSN-Node03">` >> 8) & 0xff
   \   0000A7   8072         SJMP    ??SerialApp_Init_2
    259            else if(EndDeviceID == 0x0004)
   \                     ??SerialApp_Init_6:
   \   0000A9   90....       MOV     DPTR,#EndDeviceID
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   6404         XRL     A,#0x4
   \   0000AF   7002         JNZ     ??SerialApp_Init_7
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \                     ??SerialApp_Init_7:
   \   0000B3   7014         JNZ     ??SerialApp_Init_8
    260              osal_memcpy(AppTitle, "ALD WSN-Node04", osal_strlen("ALD WSN-Node04"));
   \   0000B5                ; Setup parameters for call to function osal_memcpy
   \   0000B5   75....       MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node04">` & 0xff
   \   0000B8   75....       MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node04">` >> 8) & 0xff
   \   0000BB   75..00       MOV     ?V0 + 6,#0x0
   \   0000BE   78..         MOV     R0,#?V0 + 4
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C3                ; Setup parameters for call to function osal_strlen
   \   0000C3   7A..         MOV     R2,#`?<Constant "ALD WSN-Node04">` & 0xff
   \   0000C5   7B..         MOV     R3,#(`?<Constant "ALD WSN-Node04">` >> 8) & 0xff
   \   0000C7   8052         SJMP    ??SerialApp_Init_2
    261            else if(EndDeviceID == 0x0005)
   \                     ??SerialApp_Init_8:
   \   0000C9   90....       MOV     DPTR,#EndDeviceID
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   6405         XRL     A,#0x5
   \   0000CF   7002         JNZ     ??SerialApp_Init_9
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \                     ??SerialApp_Init_9:
   \   0000D3   7014         JNZ     ??SerialApp_Init_10
    262              osal_memcpy(AppTitle, "ALD WSN-BEEP05", osal_strlen("ALD WSN-BEEP05"));    
   \   0000D5                ; Setup parameters for call to function osal_memcpy
   \   0000D5   75....       MOV     ?V0 + 4,#`?<Constant "ALD WSN-BEEP05">` & 0xff
   \   0000D8   75....       MOV     ?V0 + 5,#(`?<Constant "ALD WSN-BEEP05">` >> 8) & 0xff
   \   0000DB   75..00       MOV     ?V0 + 6,#0x0
   \   0000DE   78..         MOV     R0,#?V0 + 4
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E3                ; Setup parameters for call to function osal_strlen
   \   0000E3   7A..         MOV     R2,#`?<Constant "ALD WSN-BEEP05">` & 0xff
   \   0000E5   7B..         MOV     R3,#(`?<Constant "ALD WSN-BEEP05">` >> 8) & 0xff
   \   0000E7   8032         SJMP    ??SerialApp_Init_2
    263            else if(EndDeviceID == 0x0006)
   \                     ??SerialApp_Init_10:
   \   0000E9   90....       MOV     DPTR,#EndDeviceID
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   6406         XRL     A,#0x6
   \   0000EF   7002         JNZ     ??SerialApp_Init_11
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \                     ??SerialApp_Init_11:
   \   0000F3   7014         JNZ     ??SerialApp_Init_12
    264              osal_memcpy(AppTitle, "stepping motor", osal_strlen("stepping motor")); 
   \   0000F5                ; Setup parameters for call to function osal_memcpy
   \   0000F5   75....       MOV     ?V0 + 4,#`?<Constant "stepping motor">` & 0xff
   \   0000F8   75....       MOV     ?V0 + 5,#(`?<Constant "stepping motor">` >> 8) & 0xff
   \   0000FB   75..00       MOV     ?V0 + 6,#0x0
   \   0000FE   78..         MOV     R0,#?V0 + 4
   \   000100   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000103                ; Setup parameters for call to function osal_strlen
   \   000103   7A..         MOV     R2,#`?<Constant "stepping motor">` & 0xff
   \   000105   7B..         MOV     R3,#(`?<Constant "stepping motor">` >> 8) & 0xff
   \   000107   8012         SJMP    ??SerialApp_Init_2
    265            else
    266              osal_memcpy(AppTitle, "ALD WSN-system", osal_strlen("ALD WSN-system")); 
   \                     ??SerialApp_Init_12:
   \   000109                ; Setup parameters for call to function osal_memcpy
   \   000109   75....       MOV     ?V0 + 4,#`?<Constant "ALD WSN-system">` & 0xff
   \   00010C   75....       MOV     ?V0 + 5,#(`?<Constant "ALD WSN-system">` >> 8) & 0xff
   \   00010F   75..00       MOV     ?V0 + 6,#0x0
   \   000112   78..         MOV     R0,#?V0 + 4
   \   000114   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000117                ; Setup parameters for call to function osal_strlen
   \   000117   7A..         MOV     R2,#`?<Constant "ALD WSN-system">` & 0xff
   \   000119   7B..         MOV     R3,#(`?<Constant "ALD WSN-system">` >> 8) & 0xff
   \                     ??SerialApp_Init_2:
   \   00011B   12....       LCALL   ??osal_strlen?relay
   \   00011E   EA           MOV     A,R2
   \   00011F   FC           MOV     R4,A
   \   000120   EB           MOV     A,R3
   \   000121   FD           MOV     R5,A
   \   000122   7A..         MOV     R2,#AppTitle & 0xff
   \   000124   7B..         MOV     R3,#(AppTitle >> 8) & 0xff
   \   000126   12....       LCALL   ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000129   12....       LCALL   ?DEALLOC_XSTACK8
    267            
    268            LCD_write_EN_string(64-7*osal_strlen((char *)AppTitle)/2,3,AppTitle); //显示标题
   \   00012C                ; Setup parameters for call to function LCD_write_EN_string
   \   00012C   7A03         MOV     R2,#0x3
   \   00012E   EA           MOV     A,R2
   \   00012F   C0E0         PUSH    A
   \   000131                ; Setup parameters for call to function osal_strlen
   \   000131   7A..         MOV     R2,#AppTitle & 0xff
   \   000133   7B..         MOV     R3,#(AppTitle >> 8) & 0xff
   \   000135   12....       LCALL   ??osal_strlen?relay
   \   000138   EA           MOV     A,R2
   \   000139   75F007       MOV     B,#0x7
   \   00013C   A4           MUL     AB
   \   00013D   FA           MOV     R2,A
   \   00013E   A8F0         MOV     R0,B
   \   000140   75F007       MOV     B,#0x7
   \   000143   EB           MOV     A,R3
   \   000144   A4           MUL     AB
   \   000145   28           ADD     A,R0
   \   000146   FB           MOV     R3,A
   \   000147   EA           MOV     A,R2
   \   000148   F8           MOV     R0,A
   \   000149   EB           MOV     A,R3
   \   00014A   F9           MOV     R1,A
   \   00014B   7A02         MOV     R2,#0x2
   \   00014D   7B00         MOV     R3,#0x0
   \   00014F   12....       LCALL   ?S_DIV_MOD
   \   000152   7440         MOV     A,#0x40
   \   000154   C3           CLR     C
   \   000155   98           SUBB    A,R0
   \   000156   F9           MOV     R1,A
   \   000157   7C..         MOV     R4,#AppTitle & 0xff
   \   000159   74..         MOV     A,#(AppTitle >> 8) & 0xff
   \   00015B   FD           MOV     R5,A
   \   00015C   D0E0         POP     A
   \   00015E   FA           MOV     R2,A
   \   00015F   12....       LCALL   ??LCD_write_EN_string?relay
    269            
    270            SerialApp_TaskID = task_id;
   \   000162   E5..         MOV     A,?V0 + 0
   \   000164   90....       MOV     DPTR,#SerialApp_TaskID
   \   000167   F0           MOVX    @DPTR,A
    271            //SerialApp_RxSeq = 0xC3;
    272            afRegister( (endPointDesc_t *)&SerialApp_epDesc );
   \   000168                ; Setup parameters for call to function afRegister
   \   000168   7A..         MOV     R2,#SerialApp_epDesc & 0xff
   \   00016A   7B..         MOV     R3,#(SerialApp_epDesc >> 8) & 0xff
   \   00016C   12....       LCALL   ??afRegister?relay
    273            RegisterForKeys( task_id );
   \   00016F                ; Setup parameters for call to function RegisterForKeys
   \   00016F   A9..         MOV     R1,?V0 + 0
   \   000171   12....       LCALL   ??RegisterForKeys?relay
    274            
    275            uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
   \   000174   85..82       MOV     DPL,?XSP + 0
   \   000177   85..83       MOV     DPH,?XSP + 1
   \   00017A   7401         MOV     A,#0x1
   \   00017C   F0           MOVX    @DPTR,A
    276            uartConfig.baudRate             = SERIAL_APP_BAUD;
   \   00017D   12....       LCALL   ?XSTACK_DISP0_8
   \   000180   7404         MOV     A,#0x4
   \   000182   F0           MOVX    @DPTR,A
    277            uartConfig.flowControl          = FALSE;
   \   000183   7402         MOV     A,#0x2
   \   000185   12....       LCALL   ?XSTACK_DISP0_8
   \   000188   E4           CLR     A
   \   000189   F0           MOVX    @DPTR,A
    278            uartConfig.flowControlThreshold = SERIAL_APP_THRESH; // 2x30 don't care - see uart driver.
   \   00018A   7403         MOV     A,#0x3
   \   00018C   12....       LCALL   ?XSTACK_DISP0_8
   \   00018F   7440         MOV     A,#0x40
   \   000191   F0           MOVX    @DPTR,A
   \   000192   A3           INC     DPTR
   \   000193   E4           CLR     A
   \   000194   F0           MOVX    @DPTR,A
    279            uartConfig.rx.maxBufSize        = SERIAL_APP_RX_SZ;  // 2x30 don't care - see uart driver.
   \   000195   740A         MOV     A,#0xa
   \   000197   12....       LCALL   ?XSTACK_DISP0_8
   \   00019A   7480         MOV     A,#-0x80
   \   00019C   F0           MOVX    @DPTR,A
   \   00019D   A3           INC     DPTR
   \   00019E   E4           CLR     A
   \   00019F   F0           MOVX    @DPTR,A
    280            uartConfig.tx.maxBufSize        = SERIAL_APP_TX_SZ;  // 2x30 don't care - see uart driver.
   \   0001A0   7412         MOV     A,#0x12
   \   0001A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A5   7480         MOV     A,#-0x80
   \   0001A7   F0           MOVX    @DPTR,A
   \   0001A8   A3           INC     DPTR
   \   0001A9   E4           CLR     A
   \   0001AA   F0           MOVX    @DPTR,A
    281            uartConfig.idleTimeout          = SERIAL_APP_IDLE;   // 2x30 don't care - see uart driver.
   \   0001AB   7405         MOV     A,#0x5
   \   0001AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B0   7406         MOV     A,#0x6
   \   0001B2   F0           MOVX    @DPTR,A
    282            uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
   \   0001B3   7416         MOV     A,#0x16
   \   0001B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B8   7401         MOV     A,#0x1
   \   0001BA   F0           MOVX    @DPTR,A
    283            uartConfig.callBackFunc         = SerialApp_CallBack;
   \   0001BB   741B         MOV     A,#0x1b
   \   0001BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C0   74..         MOV     A,#??SerialApp_CallBack?relay & 0xff
   \   0001C2   F0           MOVX    @DPTR,A
   \   0001C3   A3           INC     DPTR
   \   0001C4   74..         MOV     A,#(??SerialApp_CallBack?relay >> 8) & 0xff
   \   0001C6   F0           MOVX    @DPTR,A
    284            HalUARTOpen (UART0, &uartConfig);
   \   0001C7                ; Setup parameters for call to function HalUARTOpen
   \   0001C7   85..82       MOV     DPL,?XSP + 0
   \   0001CA   85..83       MOV     DPH,?XSP + 1
   \   0001CD   AA82         MOV     R2,DPL
   \   0001CF   AB83         MOV     R3,DPH
   \   0001D1   7900         MOV     R1,#0x0
   \   0001D3   12....       LCALL   ??HalUARTOpen?relay
    285            
    286            //#if defined ( LCD_SUPPORTED )
    287            //  HalLcdWriteString( "SerialApp", HAL_LCD_LINE_2 );
    288            //#endif
    289            //HalUARTWrite(UART0, "Init", 4);
    290            //ZDO_RegisterForZDOMsg( SerialApp_TaskID, End_Device_Bind_rsp );
    291            //ZDO_RegisterForZDOMsg( SerialApp_TaskID, Match_Desc_rsp );
    292          }
   \   0001D6   741D         MOV     A,#0x1d
   \   0001D8                REQUIRE ?Subroutine0
   \   0001D8                REQUIRE P0SEL
   \   0001D8                REQUIRE P0DIR
   \   0001D8                REQUIRE T1CTL
   \   0001D8                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
    293          
    294          /*********************************************************************
    295          * @fn      SerialApp_ProcessEvent
    296          *
    297          * @brief   Generic Application Task event processor.
    298          *
    299          * @param   task_id  - The OSAL assigned task ID.
    300          * @param   events   - Bit map of events to process.
    301          *
    302          * @return  Event flags of all unprocessed events.
    303          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    304          UINT16 SerialApp_ProcessEvent( uint8 task_id, UINT16 events )
   \                     SerialApp_ProcessEvent:
    305          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV     A,#-0x18
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    306            (void)task_id;  // Intentionally unreferenced parameter
    307            
    308            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   6003         JZ      $+5
   \   000012   02....       LJMP    ??SerialApp_ProcessEvent_0 & 0xFFFF
    309            {
    310              afIncomingMSGPacket_t *MSGpkt;
    311              
    312              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SerialApp_TaskID )) )
    313              {
    314                switch ( MSGpkt->hdr.event )
    315                {
    316                case ZDO_CB_MSG:
    317                  //SerialApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    318                  break;
    319                  
    320                case KEY_CHANGE:
    321                  SerialApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    322                  break;
    323                  
    324                case AF_INCOMING_MSG_CMD:
    325                  SerialApp_ProcessMSGCmd( MSGpkt );
    326                  break;
    327                  
    328                case ZDO_STATE_CHANGE:
    329                  SerialApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    330                  if ( (SerialApp_NwkState == DEV_ZB_COORD)
    331                      || (SerialApp_NwkState == DEV_ROUTER)
    332                        || (SerialApp_NwkState == DEV_END_DEVICE) )
    333                  {
    334          #if defined(ZDO_COORDINATOR) //协调器通过串口输出自身短地址、IEEE  
    335                    Broadcast_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
    336                    Broadcast_DstAddr.endPoint = SERIALAPP_ENDPOINT;
    337                    Broadcast_DstAddr.addr.shortAddr = 0xFFFF;
    338          #if UART_DEBUG           
    339                    PrintAddrInfo( NLME_GetShortAddr(), aExtendedAddress + Z_EXTADDR_LEN - 1);
    340          #endif 
    341                    //初始化灯的状态，1为熄灭状态，0为点亮
    342                    NodeData[0][3] = 1;
    343                    NodeData[1][3] = 1;
    344                    NodeData[2][3] = 1;
    345                    NodeData[3][3] = 1;
    346          #else                        //终端无线发送短地址、IEEE   
    347                    AfSendAddrInfo();
    348          #ifdef WSN_BEEP              //蜂鸣器和气体实验时自动检测气体发现异常就报警
    349                    osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT,
    350                                       SERIALAPP_SEND_PERIODIC_TIMEOUT );
    351                    //(SERIALAPP_SEND_PERIODIC_TIMEOUT + (osal_rand() & 0x00FF)) );
    352          #endif
    353                    
    354          #endif
    355                  }
    356                  break;				
    357                default:
    358                  break;
    359                }
    360                
    361                osal_msg_deallocate( (uint8 *)MSGpkt );
    362              }
    363              
    364              return ( events ^ SYS_EVENT_MSG );
    365            }
    366            
    367            //在此事件中可以定时向协调器发送节点传感器参数信息
    368            if ( events & SERIALAPP_SEND_PERIODIC_EVT )
   \   000015   EE           MOV     A,R6
   \   000016   5403         ANL     A,#0x3
   \   000018   7003         JNZ     $+5
   \   00001A   02....       LJMP    ??SerialApp_ProcessEvent_1 & 0xFFFF
    369            {
    370              SerialApp_SendPeriodicMessage();
   \   00001D   90....       MOV     DPTR,#`?<Constant {0}>_1`
   \   000020   C082         PUSH    DPL
   \   000022   740B         MOV     A,#0xb
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   AC82         MOV     R4,DPL
   \   000029   AD83         MOV     R5,DPH
   \   00002B   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   00002E   D082         POP     DPL
   \   000030   740D         MOV     A,#0xd
   \   000032   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000035   A286         MOV     C,0x80.6
   \   000037   33           RLC     A
   \   000038   C0E0         PUSH    A
   \   00003A   740B         MOV     A,#0xb
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   D0E0         POP     A
   \   000041   F0           MOVX    @DPTR,A
   \   000042   6003         JZ      $+5
   \   000044   02....       LJMP    ??SerialApp_ProcessEvent_2 & 0xFFFF
   \   000047   90....       MOV     DPTR,#EndDeviceID
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6405         XRL     A,#0x5
   \   00004D   7002         JNZ     ??SerialApp_ProcessEvent_3
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \                     ??SerialApp_ProcessEvent_3:
   \   000051   6003         JZ      $+5
   \   000053   02....       LJMP    ??SerialApp_ProcessEvent_2 & 0xFFFF
   \   000056   43E403       ORL     0xe4,#0x3
   \   000059   02....       LJMP    ??SerialApp_ProcessEvent_4 & 0xFFFF
   \                     ??SerialApp_ProcessEvent_5:
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   90....       MOV     DPTR,#SerialApp_NwkState
   \   000061   F0           MOVX    @DPTR,A
   \   000062   6409         XRL     A,#0x9
   \   000064   600D         JZ      ??SerialApp_ProcessEvent_6
   \   000066   E0           MOVX    A,@DPTR
   \   000067   6407         XRL     A,#0x7
   \   000069   6008         JZ      ??SerialApp_ProcessEvent_6
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   6406         XRL     A,#0x6
   \   00006E   6003         JZ      $+5
   \   000070   02....       LJMP    ??CrossCallReturnLabel_10 & 0xFFFF
   \                     ??SerialApp_ProcessEvent_6:
   \   000073   90....       MOV     DPTR,#`?<Constant {0}>_2`
   \   000076   C082         PUSH    DPL
   \   000078   85..82       MOV     DPL,?XSP + 0
   \   00007B   85..83       MOV     DPH,?XSP + 1
   \   00007E   AC82         MOV     R4,DPL
   \   000080   AD83         MOV     R5,DPH
   \   000082   7583..       MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
   \   000085   D082         POP     DPL
   \   000087   740B         MOV     A,#0xb
   \   000089   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   00008C   90....       MOV     DPTR,#SerialApp_TxAddr + 8
   \   00008F   7402         MOV     A,#0x2
   \   000091   F0           MOVX    @DPTR,A
   \   000092   A3           INC     DPTR
   \   000093   740B         MOV     A,#0xb
   \   000095   F0           MOVX    @DPTR,A
   \   000096   90....       MOV     DPTR,#SerialApp_TxAddr
   \   000099   E4           CLR     A
   \   00009A   F0           MOVX    @DPTR,A
   \   00009B   A3           INC     DPTR
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00009D   12....       LCALL   ??NLME_GetShortAddr?relay
   \   0000A0   85..82       MOV     DPL,?XSP + 0
   \   0000A3   85..83       MOV     DPH,?XSP + 1
   \   0000A6   743B         MOV     A,#0x3b
   \   0000A8   F0           MOVX    @DPTR,A
   \   0000A9   7401         MOV     A,#0x1
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   EB           MOV     A,R3
   \   0000AF   F0           MOVX    @DPTR,A
   \   0000B0   7402         MOV     A,#0x2
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   EA           MOV     A,R2
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7                ; Setup parameters for call to function osal_memcpy
   \   0000B7                ; Setup parameters for call to function NLME_GetExtAddr
   \   0000B7   12....       LCALL   ??NLME_GetExtAddr?relay
   \   0000BA   8A..         MOV     ?V0 + 4,R2
   \   0000BC   8B..         MOV     ?V0 + 5,R3
   \   0000BE   75..00       MOV     ?V0 + 6,#0x0
   \   0000C1   78..         MOV     R0,#?V0 + 4
   \   0000C3   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C6   7C08         MOV     R4,#0x8
   \   0000C8   7D00         MOV     R5,#0x0
   \   0000CA   7406         MOV     A,#0x6
   \   0000CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CF   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000D2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D5                ; Setup parameters for call to function AF_DataRequest
   \   0000D5   75..1E       MOV     ?V0 + 2,#0x1e
   \   0000D8   78..         MOV     R0,#?V0 + 2
   \   0000DA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DD   75....       MOV     ?V0 + 2,#SerialApp_MsgID & 0xff
   \   0000E0   75....       MOV     ?V0 + 3,#(SerialApp_MsgID >> 8) & 0xff
   \   0000E3   78..         MOV     R0,#?V0 + 2
   \   0000E5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E8   7403         MOV     A,#0x3
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   8582..       MOV     ?V0 + 2,DPL
   \   0000F0   8583..       MOV     ?V0 + 3,DPH
   \   0000F3   78..         MOV     R0,#?V0 + 2
   \   0000F5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F8   75..0B       MOV     ?V0 + 2,#0xb
   \   0000FB   75..00       MOV     ?V0 + 3,#0x0
   \   0000FE   78..         MOV     R0,#?V0 + 2
   \   000100   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000103   75..01       MOV     ?V0 + 2,#0x1
   \   000106   78..         MOV     R0,#?V0 + 2
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010B   7900         MOV     R1,#0x0
   \   00010D   7C..         MOV     R4,#SerialApp_epDesc & 0xff
   \   00010F   7D..         MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
   \   000111   7A..         MOV     R2,#SerialApp_TxAddr & 0xff
   \   000113   7B..         MOV     R3,#(SerialApp_TxAddr >> 8) & 0xff
   \   000115   12....       LCALL   ??AF_DataRequest?relay
   \   000118   7409         MOV     A,#0x9
   \   00011A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011D                ; Setup parameters for call to function osal_start_timerEx
   \   00011D   7CE8         MOV     R4,#-0x18
   \   00011F   7D03         MOV     R5,#0x3
   \   000121   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000124                ; Setup parameters for call to function osal_msg_deallocate
   \   000124   AA..         MOV     R2,?V0 + 0
   \   000126   AB..         MOV     R3,?V0 + 1
   \   000128   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??SerialApp_ProcessEvent_0:
   \   00012B                ; Setup parameters for call to function osal_msg_receive
   \   00012B   90....       MOV     DPTR,#SerialApp_TaskID
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   F9           MOV     R1,A
   \   000130   12....       LCALL   ??osal_msg_receive?relay
   \   000133   8A..         MOV     ?V0 + 0,R2
   \   000135   8B..         MOV     ?V0 + 1,R3
   \   000137   EA           MOV     A,R2
   \   000138   45..         ORL     A,?V0 + 1
   \   00013A   6017         JZ      ??SerialApp_ProcessEvent_7
   \   00013C   8A82         MOV     DPL,R2
   \   00013E   8B83         MOV     DPH,R3
   \   000140   E0           MOVX    A,@DPTR
   \   000141   24E6         ADD     A,#-0x1a
   \   000143   6009         JZ      ??SerialApp_ProcessEvent_8
   \   000145   2449         ADD     A,#0x49
   \   000147   7003         JNZ     $+5
   \   000149   02....       LJMP    ??SerialApp_ProcessEvent_5 & 0xFFFF
   \   00014C   80D6         SJMP    ??CrossCallReturnLabel_10
   \                     ??SerialApp_ProcessEvent_8:
   \   00014E                ; Setup parameters for call to function SerialApp_ProcessMSGCmd
   \   00014E   12....       LCALL   ??SerialApp_ProcessMSGCmd?relay
   \   000151   80D1         SJMP    ??CrossCallReturnLabel_10
   \                     ??SerialApp_ProcessEvent_7:
   \   000153   EE           MOV     A,R6
   \   000154   FA           MOV     R2,A
   \   000155   EF           MOV     A,R7
   \   000156   6480         XRL     A,#0x80
   \                     ??SerialApp_ProcessEvent_9:
   \   000158   FB           MOV     R3,A
   \   000159   02....       LJMP    ??SerialApp_ProcessEvent_10 & 0xFFFF
   \                     ??SerialApp_ProcessEvent_2:
   \   00015C   53E4FC       ANL     0xe4,#0xfc
    371              
    372              osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT,
    373                                 (SERIALAPP_SEND_PERIODIC_TIMEOUT + (osal_rand() & 0x00FF)) );
   \                     ??SerialApp_ProcessEvent_4:
   \   00015F                ; Setup parameters for call to function osal_rand
   \   00015F   12....       LCALL   ??osal_rand?relay
   \   000162                ; Setup parameters for call to function osal_start_timerEx
   \   000162   EA           MOV     A,R2
   \   000163   24E8         ADD     A,#-0x18
   \   000165   FC           MOV     R4,A
   \   000166   E4           CLR     A
   \   000167   3403         ADDC    A,#0x3
   \   000169   FD           MOV     R5,A
   \   00016A   12....       LCALL   ?Subroutine7 & 0xFFFF
    374              
    375              return (events ^ SERIALAPP_SEND_PERIODIC_EVT);
   \                     ??CrossCallReturnLabel_11:
   \   00016D   EE           MOV     A,R6
   \   00016E   6403         XRL     A,#0x3
   \                     ??SerialApp_ProcessEvent_11:
   \   000170   FA           MOV     R2,A
   \   000171   EF           MOV     A,R7
   \   000172   80E4         SJMP    ??SerialApp_ProcessEvent_9
    376            }
    377            
    378            if ( events & SERIALAPP_SEND_EVT )
   \                     ??SerialApp_ProcessEvent_1:
   \   000174   EE           MOV     A,R6
   \   000175   A2E0         MOV     C,0xE0 /* A   */.0
   \   000177   5008         JNC     ??SerialApp_ProcessEvent_12
    379            {
    380              SerialApp_Send();
   \   000179                ; Setup parameters for call to function SerialApp_Send
   \   000179   12....       LCALL   ??SerialApp_Send?relay
    381              return ( events ^ SERIALAPP_SEND_EVT );
   \   00017C   EE           MOV     A,R6
   \   00017D   6401         XRL     A,#0x1
   \   00017F   80EF         SJMP    ??SerialApp_ProcessEvent_11
    382            }
    383            
    384            if ( events & SERIALAPP_RESP_EVT )
   \                     ??SerialApp_ProcessEvent_12:
   \   000181   5402         ANL     A,#0x2
   \   000183   6057         JZ      ??SerialApp_ProcessEvent_13
    385            {
    386              SerialApp_Resp();
   \   000185                ; Setup parameters for call to function AF_DataRequest
   \   000185   75..1E       MOV     ?V0 + 0,#0x1e
   \   000188   78..         MOV     R0,#?V0 + 0
   \   00018A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00018D   75....       MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
   \   000190   75....       MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
   \   000193   78..         MOV     R0,#?V0 + 0
   \   000195   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000198   75....       MOV     ?V0 + 0,#SerialApp_RspBuf & 0xff
   \   00019B   75....       MOV     ?V0 + 1,#(SerialApp_RspBuf >> 8) & 0xff
   \   00019E   78..         MOV     R0,#?V0 + 0
   \   0001A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A3   75..04       MOV     ?V0 + 0,#0x4
   \   0001A6   75..00       MOV     ?V0 + 1,#0x0
   \   0001A9   78..         MOV     R0,#?V0 + 0
   \   0001AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AE   75..02       MOV     ?V0 + 0,#0x2
   \   0001B1   78..         MOV     R0,#?V0 + 0
   \   0001B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B6   7900         MOV     R1,#0x0
   \   0001B8   7C..         MOV     R4,#SerialApp_epDesc & 0xff
   \   0001BA   7D..         MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
   \   0001BC   7A..         MOV     R2,#SerialApp_RxAddr & 0xff
   \   0001BE   7B..         MOV     R3,#(SerialApp_RxAddr >> 8) & 0xff
   \   0001C0   12....       LCALL   ??AF_DataRequest?relay
   \   0001C3   7409         MOV     A,#0x9
   \   0001C5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C8   E9           MOV     A,R1
   \   0001C9   600C         JZ      ??SerialApp_ProcessEvent_14
   \   0001CB                ; Setup parameters for call to function osal_set_event
   \   0001CB   7A02         MOV     R2,#0x2
   \   0001CD   7B00         MOV     R3,#0x0
   \   0001CF   90....       MOV     DPTR,#SerialApp_TaskID
   \   0001D2   E0           MOVX    A,@DPTR
   \   0001D3   F9           MOV     R1,A
   \   0001D4   12....       LCALL   ??osal_set_event?relay
    387              return ( events ^ SERIALAPP_RESP_EVT );
   \                     ??SerialApp_ProcessEvent_14:
   \   0001D7   EE           MOV     A,R6
   \   0001D8   6402         XRL     A,#0x2
   \   0001DA   8094         SJMP    ??SerialApp_ProcessEvent_11
    388            }
    389            
    390            return ( 0 ); 
   \                     ??SerialApp_ProcessEvent_13:
   \   0001DC   7A00         MOV     R2,#0x0
   \   0001DE   7B00         MOV     R3,#0x0
   \                     ??SerialApp_ProcessEvent_10:
   \   0001E0   7418         MOV     A,#0x18
   \   0001E2   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   0001E5                REQUIRE T1CTL
   \   0001E5                REQUIRE _A_P0
    391          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7A03         MOV     R2,#0x3
   \   000002                REQUIRE ??Subroutine10_0
   \   000002                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#SerialApp_TaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_start_timerEx?relay
   \   00000A   22           RET
    392          
    393          /*********************************************************************
    394          * @fn      SerialApp_HandleKeys
    395          *
    396          * @brief   Handles all key events for this device.
    397          *
    398          * @param   shift - true if in shift/alt.
    399          * @param   keys  - bit field for key events.
    400          *
    401          * @return  none
    402          */
    403          void SerialApp_HandleKeys( uint8 shift, uint8 keys )
    404          { 
    405            if ( keys & HAL_KEY_SW_6 ) //按S1键启动或停止终端定时上报数据 
    406            {
    407          #ifdef WSN_SENSOR
    408              if(SendFlag == 0)
    409              {
    410                SendFlag = 1;
    411                HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    412                osal_start_timerEx( SerialApp_TaskID,
    413                                   SERIALAPP_SEND_PERIODIC_EVT,
    414                                   SERIALAPP_SEND_PERIODIC_TIMEOUT );
    415              }
    416              else
    417              {      
    418                SendFlag = 0;
    419                HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
    420                osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT);
    421              }
    422          #endif
    423            }
    424            
    425            if ( keys & HAL_KEY_SW_1 ) //按S2
    426            {
    427              //LAMP_PIN = ~LAMP_PIN;
    428            }
    429            
    430          }
    431          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004                REQUIRE ??Subroutine11_0
   \   000004                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    432          void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
   \                     SerialApp_ProcessMSGCmd:
    433          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 45
   \   000005   74D3         MOV     A,#-0x2d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    434            uint16 i, shortAddr;
                             ^
Warning[Pe177]: variable "shortAddr" was declared but never referenced
    435            uint8 *pIeeeAddr; 
                          ^
Warning[Pe177]: variable "pIeeeAddr" was declared but never referenced
    436            uint8 delay;
    437            uint8 afRxData[30]={0};
   \   00000E   90....       MOV     DPTR,#`?<Constant {0}>`
   \   000011   C082         PUSH    DPL
   \   000013   7406         MOV     A,#0x6
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   AC82         MOV     R4,DPL
   \   00001A   AD83         MOV     R5,DPH
   \   00001C   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001F   D082         POP     DPL
   \   000021   741E         MOV     A,#0x1e
   \   000023   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    438            uint8 wendu[3];
    439            uint8 shidu[3];
    440            memset(wendu, 0, 3);
   \   000026                ; Setup parameters for call to function memset
   \   000026   75..03       MOV     ?V0 + 0,#0x3
   \   000029   F5..         MOV     ?V0 + 1,A
   \   00002B   78..         MOV     R0,#?V0 + 0
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   7C00         MOV     R4,#0x0
   \   000032   7D00         MOV     R5,#0x0
   \   000034   7405         MOV     A,#0x5
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   AA82         MOV     R2,DPL
   \   00003B   AB83         MOV     R3,DPH
   \   00003D   12....       LCALL   ??memset?relay
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    441            memset(shidu, 0, 3);
   \   000045                ; Setup parameters for call to function memset
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   7C00         MOV     R4,#0x0
   \   00004C   7D00         MOV     R5,#0x0
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   AA82         MOV     R2,DPL
   \   000055   AB83         MOV     R3,DPH
   \   000057   12....       LCALL   ??memset?relay
   \   00005A   7402         MOV     A,#0x2
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
    442            char state0;
                        ^
Warning[Pe177]: variable "state0" was declared but never referenced
    443            char gas;
                        ^
Warning[Pe177]: variable "gas" was declared but never referenced
    444            char secustate;
                        ^
Warning[Pe177]: variable "secustate" was declared but never referenced
    445            char str[9];
    446            osal_memset(str, 0, 9);
   \   00005F                ; Setup parameters for call to function osal_memset
   \   00005F   7C09         MOV     R4,#0x9
   \   000061   7D00         MOV     R5,#0x0
   \   000063   7900         MOV     R1,#0x0
   \   000065   7424         MOV     A,#0x24
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   AA82         MOV     R2,DPL
   \   00006C   AB83         MOV     R3,DPH
   \   00006E   12....       LCALL   ??osal_memset?relay
    447            //查询单个终端上所有传感器的数据 3A 00 01 02 39 23  响应：3A 00 01 02 00 00 00 00 xor 23
    448            switch ( pkt->clusterId )
   \   000071   8E82         MOV     DPL,R6
   \   000073   8F83         MOV     DPH,R7
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F5..         MOV     ?V0 + 0,A
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F5..         MOV     ?V0 + 1,A
   \   000080   78..         MOV     R0,#?V0 + 0
   \   000082   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SerialApp_ProcessMSGCmd>_0`:
   \   000085   0100         DW        1
   \   000087   01           DB        1
   \   000088   ....         DW        ??CrossCallReturnLabel_12
   \   00008A   ....         DW        ??SerialApp_ProcessMSGCmd_0
   \   00008C   ....         DW        ??SerialApp_ProcessMSGCmd_1
    449            {
    450              // A message with a serial data block to be transmitted on the serial port.
    451            case SERIALAPP_CLUSTERID:
    452              osal_memcpy(afRxData, pkt->cmd.Data, pkt->cmd.DataLength);
   \                     ??SerialApp_ProcessMSGCmd_0:
   \   00008E                ; Setup parameters for call to function osal_memcpy
   \   00008E   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000091   F5..         MOV     ?V0 + 0,A
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   F5..         MOV     ?V0 + 1,A
   \   000097   75..00       MOV     ?V0 + 2,#0x0
   \   00009A   78..         MOV     R0,#?V0 + 0
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009F   EE           MOV     A,R6
   \   0000A0   2420         ADD     A,#0x20
   \   0000A2   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000A5   FC           MOV     R4,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FD           MOV     R5,A
   \   0000A9   7409         MOV     A,#0x9
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000B1   12....       LCALL   ?DEALLOC_XSTACK8
    453              switch(afRxData[0]) //简单协议命令字解析
   \   0000B4   7406         MOV     A,#0x6
   \   0000B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   643A         XRL     A,#0x3a
   \   0000BC   6003         JZ      $+5
   \   0000BE   02....       LJMP    ??CrossCallReturnLabel_12 & 0xFFFF
    454              {
    455          #if defined(ZDO_COORDINATOR)
    456              case 0x3B:  //收到终端无线发过来的短地址和IEEE地址,通过串口输出显示      
    457                shortAddr=(afRxData[1]<<8)|afRxData[2];
    458                pIeeeAddr = &afRxData[3];
    459          #if UART_DEBUG
    460                PrintAddrInfo(shortAddr, pIeeeAddr + Z_EXTADDR_LEN - 1);
    461          #endif   
    462                break;
    463              case 0x3A:	
    464                if(afRxData[3] == 0x02) //收到终端传过来的传感器数据并保存
    465                {  
    466                  NodeData[afRxData[2]-1][0] = afRxData[4];
    467                  NodeData[afRxData[2]-1][1] = afRxData[5];
    468                  NodeData[afRxData[2]-1][2] = afRxData[6];
    469                  NodeData[afRxData[2]-1][3] = afRxData[7];
    470                  NodeData[afRxData[2]-1][4] = afRxData[9];
    471                  NodeData[afRxData[2]-1][5] = 0x00;
    472                  state0=afRxData[8];
    473                  sprintf(str, "BRI:%03d ", afRxData[7]);
    474                  gas=afRxData[6];
    475                  secustate=afRxData[9];
    476                  wendu[0]=afRxData[4]/10+0x30;
    477                  wendu[1]=afRxData[4]%10+0x30;
    478                  shidu[0]=afRxData[5]/10+0x30;
    479                  shidu[1]=afRxData[5]%10+0x30;
    480                  LCD_write_EN_string(45,80,wendu);
    481                  LCD_write_EN_string(45,95,shidu);
    482                  LCD_write_CN_string(60,80,"℃");
    483                  LCD_write_CN_string(60,95,"％");
    484                  LCD_write_EN_string(70,110,str);
    485                  if(gas==0x00)
    486                  {
    487                    LCD_write_CN_string(9,110,"气体异常");
    488                  }
    489                  else
    490                  {
    491                    LCD_write_CN_string(9,110,"气体正常");
    492                  }
    493                  if(secustate==0x00)
    494                  {
    495                    LCD_write_EN_string(70,80,"security");
    496                  }
    497                  else
    498                  {
    499                    LCD_write_EN_string(70,80,"insecurity");
    500                  }
    501                }
    502                
    503          #if UART_DEBUG
    504                HalUARTWrite (UART0, NodeData[afRxData[3]-1], 4); //调试时通过串口输出
    505                HalUARTWrite (UART0, "\n", 1);
    506          #endif            
    507                break;
    508          #else  
    509              case 0x3A:  //开关灯设备          
    510                if(afRxData[3] == 0x0A || afRxData[3] == 0x0B || afRxData[3] == 0x0C) //控制终端          
   \   0000C1   7409         MOV     A,#0x9
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   640A         XRL     A,#0xa
   \   0000C9   600A         JZ      ??SerialApp_ProcessMSGCmd_2
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   640B         XRL     A,#0xb
   \   0000CE   6005         JZ      ??SerialApp_ProcessMSGCmd_2
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   640C         XRL     A,#0xc
   \   0000D3   7039         JNZ     ??SerialApp_ProcessMSGCmd_3
    511                {  
    512                  if(EndDeviceID == afRxData[2] || afRxData[2]==0xFF)
   \                     ??SerialApp_ProcessMSGCmd_2:
   \   0000D5   90....       MOV     DPTR,#EndDeviceID
   \   0000D8   C082         PUSH    DPL
   \   0000DA   7408         MOV     A,#0x8
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000E2   D082         POP     DPL
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   68           XRL     A,R0
   \   0000E6   7002         JNZ     ??SerialApp_ProcessMSGCmd_4
   \   0000E8   A3           INC     DPTR
   \   0000E9   E0           MOVX    A,@DPTR
   \                     ??SerialApp_ProcessMSGCmd_4:
   \   0000EA   600C         JZ      ??SerialApp_ProcessMSGCmd_5
   \   0000EC   7408         MOV     A,#0x8
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   F4           CPL     A
   \   0000F3   6003         JZ      $+5
   \   0000F5   02....       LJMP    ??CrossCallReturnLabel_12 & 0xFFFF
    513                  {
    514                    if(afRxData[4] == 0)
   \                     ??SerialApp_ProcessMSGCmd_5:
   \   0000F8   740A         MOV     A,#0xa
   \   0000FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   700A         JNZ     ??SerialApp_ProcessMSGCmd_6
    515                    {
    516                      //LAMP_PIN = 0;
    517                      HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
   \   000100                ; Setup parameters for call to function HalLedSet
   \                     ??SerialApp_ProcessMSGCmd_7:
   \   000100   7A00         MOV     R2,#0x0
   \                     ??SerialApp_ProcessMSGCmd_8:
   \   000102   7902         MOV     R1,#0x2
   \   000104   12....       LCALL   ??HalLedSet?relay
   \   000107   02....       LJMP    ??CrossCallReturnLabel_12 & 0xFFFF
    518                    }
    519                    else
    520                    {
    521                      //LAMP_PIN = 1;
    522                      HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
   \                     ??SerialApp_ProcessMSGCmd_6:
   \   00010A                ; Setup parameters for call to function HalLedSet
   \   00010A   7A01         MOV     R2,#0x1
   \   00010C   80F4         SJMP    ??SerialApp_ProcessMSGCmd_8
    523                    }
    524                  }
    525                  break;
    526                }	
    527                else if(afRxData[3] == 0x07)      //蜂鸣器 功能码为07
   \                     ??SerialApp_ProcessMSGCmd_3:
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   6407         XRL     A,#0x7
   \   000111   7035         JNZ     ??SerialApp_ProcessMSGCmd_9
    528                {
    529                  if(EndDeviceID == afRxData[2] || afRxData[2] == 0xFF)  //蜂鸣器 EndDeviceID为05
   \   000113   90....       MOV     DPTR,#EndDeviceID
   \   000116   C082         PUSH    DPL
   \   000118   7408         MOV     A,#0x8
   \   00011A   12....       LCALL   ?XSTACK_DISP0_8
   \   00011D   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000120   D082         POP     DPL
   \   000122   E0           MOVX    A,@DPTR
   \   000123   68           XRL     A,R0
   \   000124   7002         JNZ     ??SerialApp_ProcessMSGCmd_10
   \   000126   A3           INC     DPTR
   \   000127   E0           MOVX    A,@DPTR
   \                     ??SerialApp_ProcessMSGCmd_10:
   \   000128   600C         JZ      ??SerialApp_ProcessMSGCmd_11
   \   00012A   7408         MOV     A,#0x8
   \   00012C   12....       LCALL   ?XSTACK_DISP0_8
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F4           CPL     A
   \   000131   6003         JZ      $+5
   \   000133   02....       LJMP    ??CrossCallReturnLabel_12 & 0xFFFF
    530                  {
    531                    if(afRxData[4] == 0)
   \                     ??SerialApp_ProcessMSGCmd_11:
   \   000136   740A         MOV     A,#0xa
   \   000138   12....       LCALL   ?XSTACK_DISP0_8
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   7005         JNZ     ??SerialApp_ProcessMSGCmd_12
    532                    {
    533                      TIMER1_STOP();               //收到协调发出的蜂鸣器不响的指令
   \   00013E   53E4FC       ANL     0xe4,#0xfc
    534                      HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
   \   000141                ; Setup parameters for call to function HalLedSet
   \   000141   80BD         SJMP    ??SerialApp_ProcessMSGCmd_7
    535                    }
    536                    else
    537                    {
    538                      TIMER1_RUN();               //收到协调发出的蜂鸣器响的指令
   \                     ??SerialApp_ProcessMSGCmd_12:
   \   000143   43E403       ORL     0xe4,#0x3
    539                      HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
   \   000146                ; Setup parameters for call to function HalLedSet
   \   000146   80C2         SJMP    ??SerialApp_ProcessMSGCmd_6
    540                    }
    541                  } 
    542                }
    543                else if(afRxData[3] == 0x08)    //电机 功能码为08
   \                     ??SerialApp_ProcessMSGCmd_9:
   \   000148   E0           MOVX    A,@DPTR
   \   000149   6408         XRL     A,#0x8
   \   00014B   707D         JNZ     ??SerialApp_ProcessMSGCmd_13
    544                {
    545                  if(EndDeviceID == afRxData[2] || afRxData[2] == 0xFF)//电机 EndDeviceID为06
   \   00014D   90....       MOV     DPTR,#EndDeviceID
   \   000150   C082         PUSH    DPL
   \   000152   7408         MOV     A,#0x8
   \   000154   12....       LCALL   ?XSTACK_DISP0_8
   \   000157   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00015A   D082         POP     DPL
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   68           XRL     A,R0
   \   00015E   7002         JNZ     ??SerialApp_ProcessMSGCmd_14
   \   000160   A3           INC     DPTR
   \   000161   E0           MOVX    A,@DPTR
   \                     ??SerialApp_ProcessMSGCmd_14:
   \   000162   600C         JZ      ??SerialApp_ProcessMSGCmd_15
   \   000164   7408         MOV     A,#0x8
   \   000166   12....       LCALL   ?XSTACK_DISP0_8
   \   000169   E0           MOVX    A,@DPTR
   \   00016A   F4           CPL     A
   \   00016B   6003         JZ      $+5
   \   00016D   02....       LJMP    ??CrossCallReturnLabel_12 & 0xFFFF
    546                  {
    547                    ucEdDir = afRxData[4];      //保存旋转方向给调速用
   \                     ??SerialApp_ProcessMSGCmd_15:
   \   000170   740A         MOV     A,#0xa
   \   000172   12....       LCALL   ?XSTACK_DISP0_8
   \   000175   E0           MOVX    A,@DPTR
   \   000176   FE           MOV     R6,A
   \   000177   90....       MOV     DPTR,#ucEdDir
   \   00017A   F0           MOVX    @DPTR,A
    548                    MotorStop();                //停止转动
   \   00017B                ; Setup parameters for call to function MotorData
   \   00017B   7900         MOV     R1,#0x0
   \   00017D   12....       LCALL   ??MotorData?relay
    549                    if(afRxData[4] == 0x02)   
   \   000180   7402         MOV     A,#0x2
   \   000182   6E           XRL     A,R6
   \   000183   701C         JNZ     ??SerialApp_ProcessMSGCmd_16
    550                    {
    551                      for(i=0;i<200;i++)
   \   000185   7FC8         MOV     R7,#-0x38
    552                        MotorCW();              //顺时针转动
   \                     ??SerialApp_ProcessMSGCmd_17:
   \   000187   7E00         MOV     R6,#0x0
   \                     ??SerialApp_ProcessMSGCmd_18:
   \   000189                ; Setup parameters for call to function MotorData
   \   000189   8E..         MOV     ?V0 + 0,R6
   \   00018B   74..         MOV     A,#phasecw & 0xff
   \   00018D   25..         ADD     A,?V0 + 0
   \   00018F   F582         MOV     DPL,A
   \   000191   74..         MOV     A,#(phasecw >> 8) & 0xff
   \   000193   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000196   40F1         JC      ??SerialApp_ProcessMSGCmd_18
   \   000198   1F           DEC     R7
   \   000199   EF           MOV     A,R7
   \   00019A   7003         JNZ     $+5
   \   00019C   02....       LJMP    ??CrossCallReturnLabel_12 & 0xFFFF
   \   00019F   80E6         SJMP    ??SerialApp_ProcessMSGCmd_17
    553                    }
    554                    else if(afRxData[4] == 0x01)//左转标记 
   \                     ??SerialApp_ProcessMSGCmd_16:
   \   0001A1   740A         MOV     A,#0xa
   \   0001A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   6401         XRL     A,#0x1
   \   0001A9   6003         JZ      $+5
   \   0001AB   02....       LJMP    ??CrossCallReturnLabel_12 & 0xFFFF
    555                    {
    556                      for(i=0;i<200;i++)
   \   0001AE   7FC8         MOV     R7,#-0x38
    557                        MotorCCW();             //逆时针转动
   \                     ??SerialApp_ProcessMSGCmd_19:
   \   0001B0   7E00         MOV     R6,#0x0
   \                     ??SerialApp_ProcessMSGCmd_20:
   \   0001B2                ; Setup parameters for call to function MotorData
   \   0001B2   8E..         MOV     ?V0 + 0,R6
   \   0001B4   74..         MOV     A,#phaseccw & 0xff
   \   0001B6   25..         ADD     A,?V0 + 0
   \   0001B8   F582         MOV     DPL,A
   \   0001BA   74..         MOV     A,#(phaseccw >> 8) & 0xff
   \   0001BC   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0001BF   40F1         JC      ??SerialApp_ProcessMSGCmd_20
   \   0001C1   1F           DEC     R7
   \   0001C2   EF           MOV     A,R7
   \   0001C3   7003         JNZ     $+5
   \   0001C5   02....       LJMP    ??CrossCallReturnLabel_12 & 0xFFFF
   \   0001C8   80E6         SJMP    ??SerialApp_ProcessMSGCmd_19
    558                    }
    559                  }
    560                }
    561                   else if(afRxData[3] == 0x09)      //继电器 功能码为09
   \                     ??SerialApp_ProcessMSGCmd_13:
   \   0001CA   E0           MOVX    A,@DPTR
   \   0001CB   6409         XRL     A,#0x9
   \   0001CD   707D         JNZ     ??CrossCallReturnLabel_12
    562                {
    563                  if(EndDeviceID == afRxData[2] || afRxData[2] == 0xFF)  //继电器 EndDeviceID为05
   \   0001CF   90....       MOV     DPTR,#EndDeviceID
   \   0001D2   C082         PUSH    DPL
   \   0001D4   7408         MOV     A,#0x8
   \   0001D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D9   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0001DC   D082         POP     DPL
   \   0001DE   E0           MOVX    A,@DPTR
   \   0001DF   68           XRL     A,R0
   \   0001E0   7002         JNZ     ??SerialApp_ProcessMSGCmd_21
   \   0001E2   A3           INC     DPTR
   \   0001E3   E0           MOVX    A,@DPTR
   \                     ??SerialApp_ProcessMSGCmd_21:
   \   0001E4   6009         JZ      ??SerialApp_ProcessMSGCmd_22
   \   0001E6   7408         MOV     A,#0x8
   \   0001E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EB   E0           MOVX    A,@DPTR
   \   0001EC   F4           CPL     A
   \   0001ED   705D         JNZ     ??CrossCallReturnLabel_12
    564                  {
    565                    if(afRxData[4] == 0)
   \                     ??SerialApp_ProcessMSGCmd_22:
   \   0001EF   740A         MOV     A,#0xa
   \   0001F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   7004         JNZ     ??SerialApp_ProcessMSGCmd_23
    566                    {
    567                      LAMP_PIN=1;
   \   0001F7   D285         SETB    0x80.5
   \   0001F9   8051         SJMP    ??CrossCallReturnLabel_12
    568                    }
    569                    else
    570                    {
    571                      LAMP_PIN=0;
   \                     ??SerialApp_ProcessMSGCmd_23:
   \   0001FB   C285         CLR     0x80.5
   \   0001FD   804D         SJMP    ??CrossCallReturnLabel_12
    572                    }
    573                  } 
    574                }
    575          #endif
    576                default :
    577                  break;
    578                }
    579                break;
    580                // A response to a received serial data block.
    581              case SERIALAPP_CLUSTERID2:
    582                if ((pkt->cmd.Data[1] == SerialApp_TxSeq) &&
    583                    ((pkt->cmd.Data[0] == OTA_SUCCESS) || (pkt->cmd.Data[0] == OTA_DUP_MSG)))
   \                     ??SerialApp_ProcessMSGCmd_1:
   \   0001FF   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000202   E0           MOVX    A,@DPTR
   \   000203   F8           MOV     R0,A
   \   000204   90....       MOV     DPTR,#SerialApp_TxSeq
   \   000207   E0           MOVX    A,@DPTR
   \   000208   68           XRL     A,R0
   \   000209   7034         JNZ     ??SerialApp_ProcessMSGCmd_24
   \   00020B   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00020E   F8           MOV     R0,A
   \   00020F   A3           INC     DPTR
   \   000210   E0           MOVX    A,@DPTR
   \   000211   F583         MOV     DPH,A
   \   000213   8882         MOV     DPL,R0
   \   000215   E0           MOVX    A,@DPTR
   \   000216   6015         JZ      ??SerialApp_ProcessMSGCmd_25
   \   000218   EE           MOV     A,R6
   \   000219   2422         ADD     A,#0x22
   \   00021B   F582         MOV     DPL,A
   \   00021D   EF           MOV     A,R7
   \   00021E   3400         ADDC    A,#0x0
   \   000220   F583         MOV     DPH,A
   \   000222   A3           INC     DPTR
   \   000223   E0           MOVX    A,@DPTR
   \   000224   F583         MOV     DPH,A
   \   000226   8882         MOV     DPL,R0
   \   000228   E0           MOVX    A,@DPTR
   \   000229   6401         XRL     A,#0x1
   \   00022B   7012         JNZ     ??SerialApp_ProcessMSGCmd_24
    584                {
    585                  SerialApp_TxLen = 0;
   \                     ??SerialApp_ProcessMSGCmd_25:
   \   00022D   90....       MOV     DPTR,#SerialApp_TxLen
   \   000230   E4           CLR     A
   \   000231   F0           MOVX    @DPTR,A
    586                  osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_EVT);
   \   000232                ; Setup parameters for call to function osal_stop_timerEx
   \   000232   7A01         MOV     R2,#0x1
   \   000234   FB           MOV     R3,A
   \   000235   90....       MOV     DPTR,#SerialApp_TaskID
   \   000238   E0           MOVX    A,@DPTR
   \   000239   F9           MOV     R1,A
   \   00023A   12....       LCALL   ??osal_stop_timerEx?relay
   \   00023D   800D         SJMP    ??CrossCallReturnLabel_12
    587                }
    588                else
    589                {
    590                  // Re-start timeout according to delay sent from other device.
    591                  delay = BUILD_UINT16( pkt->cmd.Data[2], pkt->cmd.Data[3] );
    592                  osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_EVT, delay );
   \                     ??SerialApp_ProcessMSGCmd_24:
   \   00023F                ; Setup parameters for call to function osal_start_timerEx
   \   00023F   12....       LCALL   ?Subroutine6 & 0xFFFF
    593                }
    594                break;
    595                
    596              default:
    597                break;
    598              }
   \                     ??CrossCallReturnLabel_7:
   \   000242   A3           INC     DPTR
   \   000243   E0           MOVX    A,@DPTR
   \   000244   FC           MOV     R4,A
   \   000245   7D00         MOV     R5,#0x0
   \   000247   7A01         MOV     R2,#0x1
   \   000249   12....       LCALL   ??Subroutine10_0 & 0xFFFF
    599            }
   \                     ??CrossCallReturnLabel_12:
   \   00024C   742D         MOV     A,#0x2d
   \   00024E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000251   7F03         MOV     R7,#0x3
   \   000253   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000256                REQUIRE T1CTL
   \   000256                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003                REQUIRE ??Subroutine12_0
   \   000003                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine13_0
   \   000003                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F583         MOV     DPH,A
   \   000008   8882         MOV     DPL,R0
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   7583..       MOV     DPH,#(EndDeviceID >> 8) & 0xff
   \   000005   22           RET
    600            

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    601          uint8 SendData(uint8 addr, uint8 FC)
   \                     SendData:
    602          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
    603            uint8 ret, i, index=4;
   \   000005   75..04       MOV     ?V0 + 4,#0x4
    604            
    605            TxBuffer[0] = 0x3A;
   \   000008   90....       MOV     DPTR,#TxBuffer
   \   00000B   743A         MOV     A,#0x3a
   \   00000D   F0           MOVX    @DPTR,A
    606            TxBuffer[1] = 0x00;
   \   00000E   A3           INC     DPTR
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
    607            TxBuffer[2] = addr;
   \   000011   E9           MOV     A,R1
   \   000012   A3           INC     DPTR
   \   000013   F0           MOVX    @DPTR,A
    608            TxBuffer[3] = FC;
   \   000014   EA           MOV     A,R2
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
    609            
    610            switch(FC)
   \   000017   14           DEC     A
   \   000018   6006         JZ      ??SendData_0
   \   00001A   14           DEC     A
   \   00001B   607F         JZ      ??SendData_1
   \   00001D   02....       LJMP    ??SendData_2 & 0xFFFF
    611            {
    612            case 0x01: //查询所有终端传感器的数据
    613              for (i=0; i<MAX_NODE; i++)
   \                     ??SendData_0:
   \   000020   7E00         MOV     R6,#0x0
    614              {
    615                osal_memcpy(&TxBuffer[index], NodeData[i], 5);
   \                     ??SendData_3:
   \   000022                ; Setup parameters for call to function osal_memcpy
   \   000022   EE           MOV     A,R6
   \   000023   75F006       MOV     B,#0x6
   \   000026   A4           MUL     AB
   \   000027   F8           MOV     R0,A
   \   000028   A9F0         MOV     R1,B
   \   00002A   74..         MOV     A,#NodeData & 0xff
   \   00002C   28           ADD     A,R0
   \   00002D   F5..         MOV     ?V0 + 0,A
   \   00002F   74..         MOV     A,#(NodeData >> 8) & 0xff
   \   000031   39           ADDC    A,R1
   \   000032   85....       MOV     ?V0 + 8,?V0 + 0
   \   000035   F5..         MOV     ?V0 + 9,A
   \   000037   75..00       MOV     ?V0 + 10,#0x0
   \   00003A   78..         MOV     R0,#?V0 + 8
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003F   7C05         MOV     R4,#0x5
   \   000041   7D00         MOV     R5,#0x0
   \   000043   85....       MOV     ?V0 + 0,?V0 + 4
   \   000046   74..         MOV     A,#TxBuffer & 0xff
   \   000048   25..         ADD     A,?V0 + 0
   \   00004A   FA           MOV     R2,A
   \   00004B   74..         MOV     A,#(TxBuffer >> 8) & 0xff
   \   00004D   3400         ADDC    A,#0x0
   \   00004F   FB           MOV     R3,A
   \   000050   12....       LCALL   ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
    616                index += 5;
   \   000056   7405         MOV     A,#0x5
   \   000058   25..         ADD     A,?V0 + 4
   \   00005A   F5..         MOV     ?V0 + 4,A
    617              }
   \   00005C   0E           INC     R6
   \   00005D   EE           MOV     A,R6
   \   00005E   C3           CLR     C
   \   00005F   9404         SUBB    A,#0x4
   \   000061   40BF         JC      ??SendData_3
    618              TxBuffer[index] = XorCheckSum(TxBuffer, index);
   \   000063   85..82       MOV     DPL,?V0 + 4
   \   000066   8582..       MOV     ?V0 + 0,DPL
   \   000069   74..         MOV     A,#TxBuffer & 0xff
   \   00006B   25..         ADD     A,?V0 + 0
   \   00006D   FE           MOV     R6,A
   \   00006E   74..         MOV     A,#(TxBuffer >> 8) & 0xff
   \   000070   3400         ADDC    A,#0x0
   \   000072   FF           MOV     R7,A
   \   000073                ; Setup parameters for call to function XorCheckSum
   \   000073   A9..         MOV     R1,?V0 + 4
   \   000075   7A..         MOV     R2,#TxBuffer & 0xff
   \   000077   7B..         MOV     R3,#(TxBuffer >> 8) & 0xff
   \   000079   12....       LCALL   ??XorCheckSum?relay
   \   00007C   E9           MOV     A,R1
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   F0           MOVX    @DPTR,A
    619              TxBuffer[index+1] = 0x23; 
   \   000082   A3           INC     DPTR
   \   000083   7423         MOV     A,#0x23
   \   000085   F0           MOVX    @DPTR,A
    620              
    621              HalUARTWrite(UART0, TxBuffer, index+2);
   \   000086                ; Setup parameters for call to function HalUARTWrite
   \   000086   E5..         MOV     A,?V0 + 0
   \   000088   2402         ADD     A,#0x2
   \   00008A   FC           MOV     R4,A
   \   00008B   E4           CLR     A
   \   00008C   3400         ADDC    A,#0x0
   \   00008E   FD           MOV     R5,A
   \                     ??SendData_4:
   \   00008F   7A..         MOV     R2,#TxBuffer & 0xff
   \   000091   7B..         MOV     R3,#(TxBuffer >> 8) & 0xff
   \   000093   7900         MOV     R1,#0x0
   \   000095   12....       LCALL   ??HalUARTWrite?relay
    622              ret = 1;
   \   000098   7901         MOV     R1,#0x1
    623              break;
   \   00009A   8045         SJMP    ??SendData_5
    624            case 0x02: //查询单个终端上所有传感器的数据
    625              osal_memcpy(&TxBuffer[index], NodeData[addr-1], 4);
   \                     ??SendData_1:
   \   00009C                ; Setup parameters for call to function osal_memcpy
   \   00009C   E9           MOV     A,R1
   \   00009D   75F006       MOV     B,#0x6
   \   0000A0   A4           MUL     AB
   \   0000A1   F8           MOV     R0,A
   \   0000A2   A9F0         MOV     R1,B
   \   0000A4   74..         MOV     A,#(NodeData + 250) & 0xff
   \   0000A6   28           ADD     A,R0
   \   0000A7   F5..         MOV     ?V0 + 0,A
   \   0000A9   74..         MOV     A,#((NodeData - 6) >> 8) & 0xff
   \   0000AB   39           ADDC    A,R1
   \   0000AC   85....       MOV     ?V0 + 4,?V0 + 0
   \   0000AF   F5..         MOV     ?V0 + 5,A
   \   0000B1   75..00       MOV     ?V0 + 6,#0x0
   \   0000B4   78..         MOV     R0,#?V0 + 4
   \   0000B6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B9   7C04         MOV     R4,#0x4
   \   0000BB   7D00         MOV     R5,#0x0
   \   0000BD   7A..         MOV     R2,#(TxBuffer + 4) & 0xff
   \   0000BF   7B..         MOV     R3,#((TxBuffer + 4) >> 8) & 0xff
   \   0000C1   12....       LCALL   ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000C4   12....       LCALL   ?DEALLOC_XSTACK8
    626              index += 4;
    627              TxBuffer[index] = XorCheckSum(TxBuffer, index);
   \   0000C7                ; Setup parameters for call to function XorCheckSum
   \   0000C7   7908         MOV     R1,#0x8
   \   0000C9   7A..         MOV     R2,#TxBuffer & 0xff
   \   0000CB   7B..         MOV     R3,#(TxBuffer >> 8) & 0xff
   \   0000CD   12....       LCALL   ??XorCheckSum?relay
   \   0000D0   E9           MOV     A,R1
   \   0000D1   90....       MOV     DPTR,#TxBuffer + 8
   \   0000D4   F0           MOVX    @DPTR,A
    628              TxBuffer[index+1] = 0x23; 
   \   0000D5   A3           INC     DPTR
   \   0000D6   7423         MOV     A,#0x23
   \   0000D8   F0           MOVX    @DPTR,A
    629              HalUARTWrite(UART0, TxBuffer, index+2);		
   \   0000D9                ; Setup parameters for call to function HalUARTWrite
   \   0000D9   7C0A         MOV     R4,#0xa
   \   0000DB   7D00         MOV     R5,#0x0
   \   0000DD   80B0         SJMP    ??SendData_4
    630              ret = 1;
    631              break;   
    632            default:
    633              ret = 0;
   \                     ??SendData_2:
   \   0000DF   7900         MOV     R1,#0x0
    634              break;
    635            }
    636            
    637            return ret;
   \                     ??SendData_5:
   \   0000E1   7F0B         MOV     R7,#0xb
   \   0000E3   02....       LJMP    ?BANKED_LEAVE_XDATA
    638          }
    639          
    640          /*********************************************************************
    641          * @fn      SerialApp_Send
    642          *
    643          * @brief   Send data OTA.
    644          *
    645          * @param   none
    646          *  3A000507013923    3A 00 01 01 3A 23
    647          * @return  none
    648          */
    649          #pragma optimize=none  

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          static void SerialApp_Send(void)
   \                     SerialApp_Send:
    651          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    652            uint8 len=0, addr, FC;
   \   000005   7F00         MOV     R7,#0x0
    653            uint8 checksum=0;
   \   000007   75..00       MOV     ?V0 + 0,#0x0
    654          
    655            if (!SerialApp_TxLen && 
    656                (SerialApp_TxLen = HalUARTRead(UART0, SerialApp_TxBuf, SERIAL_APP_TX_MAX)))
   \   00000A   90....       MOV     DPTR,#SerialApp_TxLen
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6003         JZ      $+5
   \   000010   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
   \   000013                ; Setup parameters for call to function HalUARTRead
   \   000013   7C14         MOV     R4,#0x14
   \   000015   7D00         MOV     R5,#0x0
   \   000017   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   000019   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   12....       LCALL   ??HalUARTRead?relay
   \   000020   EA           MOV     A,R2
   \   000021   90....       MOV     DPTR,#SerialApp_TxLen
   \   000024   F0           MOVX    @DPTR,A
   \   000025   7003         JNZ     $+5
   \   000027   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
    657            {
    658              if (SerialApp_TxLen)
   \   00002A   90....       MOV     DPTR,#SerialApp_TxLen
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   7003         JNZ     $+5
   \   000030   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
    659              {
    660                SerialApp_TxLen = 0;
   \   000033   90....       MOV     DPTR,#SerialApp_TxLen
   \   000036   7400         MOV     A,#0x0
   \   000038   F0           MOVX    @DPTR,A
    661                if(SerialApp_TxBuf[0] == 0x3A)
   \   000039   90....       MOV     DPTR,#SerialApp_TxBuf
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   643A         XRL     A,#0x3a
   \   00003F   6003         JZ      $+5
   \   000041   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
    662                {
    663                  addr = SerialApp_TxBuf[2];
   \   000044   90....       MOV     DPTR,#SerialApp_TxBuf + 2
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F5..         MOV     ?V0 + 1,A
    664                  FC = SerialApp_TxBuf[3];
   \   00004A   90....       MOV     DPTR,#SerialApp_TxBuf + 3
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FE           MOV     R6,A
    665                  len = GetDataLen(FC); 
   \   00004F                ; Setup parameters for call to function GetDataLen
   \   00004F   EE           MOV     A,R6
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   ??GetDataLen?relay
   \   000054   E9           MOV     A,R1
   \   000055   FF           MOV     R7,A
    666                  len += 4;
   \   000056   7404         MOV     A,#0x4
   \   000058   2F           ADD     A,R7
   \   000059   FF           MOV     R7,A
    667                  checksum = XorCheckSum(SerialApp_TxBuf, len);
   \   00005A                ; Setup parameters for call to function XorCheckSum
   \   00005A   EF           MOV     A,R7
   \   00005B   F9           MOV     R1,A
   \   00005C   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   00005E   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   000060   12....       LCALL   ??XorCheckSum?relay
   \   000063   E9           MOV     A,R1
   \   000064   F5..         MOV     ?V0 + 0,A
    668          
    669                  //接收数据正确返回相应数据
    670                  if(checksum == SerialApp_TxBuf[len] && SerialApp_TxBuf[len+1] == 0x23)
   \   000066   8F..         MOV     ?V0 + 2,R7
   \   000068   75..00       MOV     ?V0 + 3,#0x0
   \   00006B   74..         MOV     A,#SerialApp_TxBuf & 0xff
   \   00006D   25..         ADD     A,?V0 + 2
   \   00006F   F582         MOV     DPL,A
   \   000071   74..         MOV     A,#(SerialApp_TxBuf >> 8) & 0xff
   \   000073   35..         ADDC    A,?V0 + 3
   \   000075   F583         MOV     DPH,A
   \   000077   E0           MOVX    A,@DPTR
   \   000078   65..         XRL     A,?V0 + 0
   \   00007A   6003         JZ      $+5
   \   00007C   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
   \   00007F   8F..         MOV     ?V0 + 2,R7
   \   000081   75..00       MOV     ?V0 + 3,#0x0
   \   000084   74..         MOV     A,#(SerialApp_TxBuf + 1) & 0xff
   \   000086   25..         ADD     A,?V0 + 2
   \   000088   F582         MOV     DPL,A
   \   00008A   74..         MOV     A,#((SerialApp_TxBuf + 1) >> 8) & 0xff
   \   00008C   35..         ADDC    A,?V0 + 3
   \   00008E   F583         MOV     DPH,A
   \   000090   E0           MOVX    A,@DPTR
   \   000091   6423         XRL     A,#0x23
   \   000093   6003         JZ      $+5
   \   000095   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
    671                  {
    672                    if(FC == 7 || FC == 8 || FC == 0x0A || FC == 0x0B || FC == 0x0C || FC == 9) //控制终端
   \   000098   7407         MOV     A,#0x7
   \   00009A   6E           XRL     A,R6
   \   00009B   601C         JZ      ??SerialApp_Send_1
   \   00009D   7408         MOV     A,#0x8
   \   00009F   6E           XRL     A,R6
   \   0000A0   6017         JZ      ??SerialApp_Send_1
   \   0000A2   740A         MOV     A,#0xa
   \   0000A4   6E           XRL     A,R6
   \   0000A5   6012         JZ      ??SerialApp_Send_1
   \   0000A7   740B         MOV     A,#0xb
   \   0000A9   6E           XRL     A,R6
   \   0000AA   600D         JZ      ??SerialApp_Send_1
   \   0000AC   740C         MOV     A,#0xc
   \   0000AE   6E           XRL     A,R6
   \   0000AF   6008         JZ      ??SerialApp_Send_1
   \   0000B1   7409         MOV     A,#0x9
   \   0000B3   6E           XRL     A,R6
   \   0000B4   6003         JZ      $+5
   \   0000B6   02....       LJMP    ??SerialApp_Send_2 & 0xFFFF
    673                    {                            
    674                      if (afStatus_SUCCESS == AF_DataRequest(&Broadcast_DstAddr,
    675                                                             (endPointDesc_t *)&SerialApp_epDesc,
    676                                                             SERIALAPP_CLUSTERID,
    677                                                             len+2, SerialApp_TxBuf,
    678                                                             &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
   \                     ??SerialApp_Send_1:
   \   0000B9                ; Setup parameters for call to function AF_DataRequest
   \   0000B9   75..1E       MOV     ?V0 + 2,#0x1e
   \   0000BC   78..         MOV     R0,#?V0 + 2
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C1   75....       MOV     ?V0 + 2,#SerialApp_MsgID & 0xff
   \   0000C4   75....       MOV     ?V0 + 3,#(SerialApp_MsgID >> 8) & 0xff
   \   0000C7   78..         MOV     R0,#?V0 + 2
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CC   75....       MOV     ?V0 + 2,#SerialApp_TxBuf & 0xff
   \   0000CF   75....       MOV     ?V0 + 3,#(SerialApp_TxBuf >> 8) & 0xff
   \   0000D2   78..         MOV     R0,#?V0 + 2
   \   0000D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D7   8F..         MOV     ?V0 + 2,R7
   \   0000D9   75..00       MOV     ?V0 + 3,#0x0
   \   0000DC   E5..         MOV     A,?V0 + 2
   \   0000DE   2402         ADD     A,#0x2
   \   0000E0   F5..         MOV     ?V0 + 2,A
   \   0000E2   E5..         MOV     A,?V0 + 3
   \   0000E4   3400         ADDC    A,#0x0
   \   0000E6   F5..         MOV     ?V0 + 3,A
   \   0000E8   78..         MOV     R0,#?V0 + 2
   \   0000EA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000ED   75..01       MOV     ?V0 + 2,#0x1
   \   0000F0   75..00       MOV     ?V0 + 3,#0x0
   \   0000F3   78..         MOV     R0,#?V0 + 2
   \   0000F5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F8   7900         MOV     R1,#0x0
   \   0000FA   7C..         MOV     R4,#SerialApp_epDesc & 0xff
   \   0000FC   7D..         MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
   \   0000FE   7A..         MOV     R2,#Broadcast_DstAddr & 0xff
   \   000100   7B..         MOV     R3,#(Broadcast_DstAddr >> 8) & 0xff
   \   000102   12....       LCALL   ??AF_DataRequest?relay
   \   000105   7409         MOV     A,#0x9
   \   000107   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010A   E9           MOV     A,R1
   \   00010B   705B         JNZ     ??SerialApp_Send_3
    679                      {
    680                        if(FC == 0x0A) //如果开启自动刷新则不需要这步操作
   \   00010D   740A         MOV     A,#0xa
   \   00010F   6E           XRL     A,R6
   \   000110   703C         JNZ     ??SerialApp_Send_4
    681                          NodeData[addr-1][3] = SerialApp_TxBuf[len-1];  //更新缓冲区灯的状态
   \   000112   8F..         MOV     ?V0 + 2,R7
   \   000114   75..00       MOV     ?V0 + 3,#0x0
   \   000117   74..         MOV     A,#(SerialApp_TxBuf + 255) & 0xff
   \   000119   25..         ADD     A,?V0 + 2
   \   00011B   F582         MOV     DPL,A
   \   00011D   74..         MOV     A,#((SerialApp_TxBuf - 1) >> 8) & 0xff
   \   00011F   35..         ADDC    A,?V0 + 3
   \   000121   F583         MOV     DPH,A
   \   000123   E0           MOVX    A,@DPTR
   \   000124   C0E0         PUSH    A
   \   000126   E5..         MOV     A,?V0 + 1
   \   000128   A8..         MOV     R0,?V0 + 1
   \   00012A   7900         MOV     R1,#0x0
   \   00012C   E8           MOV     A,R0
   \   00012D   75F006       MOV     B,#0x6
   \   000130   A4           MUL     AB
   \   000131   C8           XCH     A,R0
   \   000132   AAF0         MOV     R2,B
   \   000134   75F000       MOV     B,#0x0
   \   000137   A4           MUL     AB
   \   000138   2A           ADD     A,R2
   \   000139   FA           MOV     R2,A
   \   00013A   75F006       MOV     B,#0x6
   \   00013D   E9           MOV     A,R1
   \   00013E   A4           MUL     AB
   \   00013F   2A           ADD     A,R2
   \   000140   F9           MOV     R1,A
   \   000141   74..         MOV     A,#(NodeData + 253) & 0xff
   \   000143   28           ADD     A,R0
   \   000144   F582         MOV     DPL,A
   \   000146   74..         MOV     A,#((NodeData - 3) >> 8) & 0xff
   \   000148   39           ADDC    A,R1
   \   000149   F583         MOV     DPH,A
   \   00014B   D0E0         POP     A
   \   00014D   F0           MOVX    @DPTR,A
    682                        HalUARTWrite(UART0, SerialApp_TxBuf, len+2); //无线发送成功后原样返回给上位机	
   \                     ??SerialApp_Send_4:
   \   00014E                ; Setup parameters for call to function HalUARTWrite
   \   00014E   8F..         MOV     ?V0 + 2,R7
   \   000150   75..00       MOV     ?V0 + 3,#0x0
   \   000153   E5..         MOV     A,?V0 + 2
   \   000155   2402         ADD     A,#0x2
   \   000157   FC           MOV     R4,A
   \   000158   E5..         MOV     A,?V0 + 3
   \   00015A   3400         ADDC    A,#0x0
   \   00015C   FD           MOV     R5,A
   \   00015D   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   00015F   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   000161   7900         MOV     R1,#0x0
   \   000163   12....       LCALL   ??HalUARTWrite?relay
   \   000166   804A         SJMP    ??SerialApp_Send_0
    683                      }
    684                      else  //暂时没发现错误，关闭终端发送也正常。无线发送失败后将数据位和校验位置0返给上位机	
    685                      {
    686                        SerialApp_TxBuf[len-1] = 0x00;
   \                     ??SerialApp_Send_3:
   \   000168   8F..         MOV     ?V0 + 2,R7
   \   00016A   75..00       MOV     ?V0 + 3,#0x0
   \   00016D   74..         MOV     A,#(SerialApp_TxBuf + 255) & 0xff
   \   00016F   25..         ADD     A,?V0 + 2
   \   000171   F582         MOV     DPL,A
   \   000173   74..         MOV     A,#((SerialApp_TxBuf - 1) >> 8) & 0xff
   \   000175   35..         ADDC    A,?V0 + 3
   \   000177   F583         MOV     DPH,A
   \   000179   7400         MOV     A,#0x0
   \   00017B   F0           MOVX    @DPTR,A
    687                        SerialApp_TxBuf[len] = 0x00;
   \   00017C   8F..         MOV     ?V0 + 2,R7
   \   00017E   75..00       MOV     ?V0 + 3,#0x0
   \   000181   74..         MOV     A,#SerialApp_TxBuf & 0xff
   \   000183   25..         ADD     A,?V0 + 2
   \   000185   F582         MOV     DPL,A
   \   000187   74..         MOV     A,#(SerialApp_TxBuf >> 8) & 0xff
   \   000189   35..         ADDC    A,?V0 + 3
   \   00018B   F583         MOV     DPH,A
   \   00018D   7400         MOV     A,#0x0
   \   00018F   F0           MOVX    @DPTR,A
    688                        HalUARTWrite(UART0, SerialApp_TxBuf, len+2);
   \   000190                ; Setup parameters for call to function HalUARTWrite
   \   000190   8F..         MOV     ?V0 + 2,R7
   \   000192   75..00       MOV     ?V0 + 3,#0x0
   \   000195   E5..         MOV     A,?V0 + 2
   \   000197   2402         ADD     A,#0x2
   \   000199   FC           MOV     R4,A
   \   00019A   E5..         MOV     A,?V0 + 3
   \   00019C   3400         ADDC    A,#0x0
   \   00019E   FD           MOV     R5,A
   \   00019F   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   0001A1   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   0001A3   7900         MOV     R1,#0x0
   \   0001A5   12....       LCALL   ??HalUARTWrite?relay
   \   0001A8   8008         SJMP    ??SerialApp_Send_0
    689                      }
    690                    }
    691                    else
    692                    {
    693                      SendData(addr, FC);   //查询操作
   \                     ??SerialApp_Send_2:
   \   0001AA                ; Setup parameters for call to function SendData
   \   0001AA   EE           MOV     A,R6
   \   0001AB   FA           MOV     R2,A
   \   0001AC   A9..         MOV     R1,?V0 + 1
   \   0001AE   12....       LCALL   ??SendData?relay
   \   0001B1   E9           MOV     A,R1
    694                    }
    695                  }
    696                }
    697              }
    698            }
    699          }
   \                     ??SerialApp_Send_0:
   \   0001B2   7F04         MOV     R7,#0x4
   \   0001B4   02....       LJMP    ?BANKED_LEAVE_XDATA
    700          
    701          /*********************************************************************
    702          * @fn      SerialApp_Resp
    703          *
    704          * @brief   Send data OTA.
    705          *
    706          * @param   none
    707          *
    708          * @return  none
    709          */
    710          static void SerialApp_Resp(void)
    711          {
    712            if (afStatus_SUCCESS != AF_DataRequest(&SerialApp_RxAddr,
    713                                                   (endPointDesc_t *)&SerialApp_epDesc,
    714                                                   SERIALAPP_CLUSTERID2,
    715                                                   SERIAL_APP_RSP_CNT, SerialApp_RspBuf,
    716                                                   &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
    717            {
    718              osal_set_event(SerialApp_TaskID, SERIALAPP_RESP_EVT);
    719            }
    720          }
    721          
    722          /*********************************************************************
    723          * @fn      SerialApp_CallBack
    724          *
    725          * @brief   Send data OTA.
    726          *
    727          * @param   port - UART port.
    728          * @param   event - the UART port event flag.
    729          *
    730          * @return  none
    731          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    732          static void SerialApp_CallBack(uint8 port, uint8 event)
   \                     SerialApp_CallBack:
    733          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    734            (void)port;
    735            
    736            if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
    737          #if SERIAL_APP_LOOPBACK
    738                (SerialApp_TxLen < SERIAL_APP_TX_MAX))
    739          #else
    740              !SerialApp_TxLen)
   \   000007   7407         MOV     A,#0x7
   \   000009   5E           ANL     A,R6
   \   00000A   6009         JZ      ??SerialApp_CallBack_0
   \   00000C   90....       MOV     DPTR,#SerialApp_TxLen
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   7003         JNZ     ??SerialApp_CallBack_0
    741          #endif
    742            {
    743              SerialApp_Send();
   \   000012                ; Setup parameters for call to function SerialApp_Send
   \   000012   12....       LCALL   ??SerialApp_Send?relay
    744            }
    745          }
   \                     ??SerialApp_CallBack_0:
   \   000015                REQUIRE ?Subroutine1
   \   000015                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    746          
    747          
    748          //--------------------------------------------------------------------------------------
    749          //查询单个终端上所有传感器的数据 3A 00 01 02 XX 23  响应：3A 00 01 02 00 00 00 00 xor 23
    750          void SerialApp_SendPeriodicMessage( void )
    751          {
    752            uint8 SendBuf[13]={0};
    753            char state0;
                        ^
Warning[Pe177]: variable "state0" was declared but never referenced
    754          #ifdef WSN_SENSOR  
    755            SendBuf[0] = 0x3A;                          
    756            SendBuf[1] = HI_UINT16( EndDeviceID );
    757            SendBuf[2] = LO_UINT16( EndDeviceID );
    758            SendBuf[3] = 0x02;                       //FC
    759            
    760            DHT11();                //获取温湿度
    761            SendBuf[4] = wendu;  
    762            SendBuf[5] = shidu;  
    763            SendBuf[6] = GetGas();  //获取气体传感器的状态 
    764             if(DATA_PIN05 == 1)
    765              state0 = 0x30;       //当光敏电阻处于黑暗中时P0.5高电平
    766            else
    767              state0 = 0x31;
    768            SendBuf[7]=ReadLightData();
    769            SendBuf[8]=state0;//获得光敏电阻的状态
    770            SendBuf[9]=GetSecurity();
    771            SendBuf[10] = XorCheckSum(SendBuf, 11);
    772            SendBuf[11] = 0x23;
    773            
    774            SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
    775            SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
    776            SerialApp_TxAddr.addr.shortAddr = 0x00;  
    777            if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
    778                                SERIALAPP_CLUSTERID,
    779                                12,
    780                                SendBuf,
    781                                &SerialApp_MsgID, 
    782                                0, 
    783                                AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    784            {
    785              // Successfully requested to be sent.
    786            }
    787            else
    788            {
    789              // Error occurred in request to send.
    790            }
    791          #endif
    792            
    793          #ifdef WSN_BEEP
    794            SendBuf[0] = GetGas();  //获取气体传感器的状态 0为有害气体   1为正常
    795            
    796            //终端5执行蜂鸣器操作   蜂鸣器动作电平 1: 响 ，0: 不响
    797            if(SendBuf[0] == 0 && EndDeviceID == 5)
    798            {
    799              TIMER1_RUN();      //检测到异常气体时蜂鸣器响
    800            }
    801            else
    802            {
    803              TIMER1_STOP();    //气体正常不响
    804            }    
    805          #endif
    806          }
    807          
    808          
    809          #if UART_DEBUG   
    810          //通过串口输出短地址 IEEE
    811          void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr)
    812          {
    813            uint8 strIeeeAddr[17] = {0};
    814            char  buff[30] = {0};    
    815            
    816            //获得短地址   
    817            sprintf(buff, "shortAddr:%04X   IEEE:", shortAddr);  
    818            
    819            //获得IEEE地址
    820            GetIeeeAddr(pIeeeAddr, strIeeeAddr);
    821            
    822            HalUARTWrite (UART0, (uint8 *)buff, strlen(buff));
    823            Delay_ms(10);
    824            HalUARTWrite (UART0, strIeeeAddr, 16); 
    825            HalUARTWrite (UART0, "\n", 1);
    826          }
    827          
    828          void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr)
    829          {
    830            uint8 i;
    831            uint8 *xad = pIeeeAddr;
    832            
    833            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
    834            {
    835              uint8 ch;
    836              ch = (*xad >> 4) & 0x0F;
    837              *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
    838              i++;
    839              ch = *xad & 0x0F;
    840              *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
    841              i++;
    842            }
    843          }
    844          #endif  
    845          
    846          void AfSendAddrInfo(void)
    847          {
    848            uint16 shortAddr;
    849            uint8 strBuf[11]={0};  
    850            
    851            SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
    852            SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
    853            SerialApp_TxAddr.addr.shortAddr = 0x00;   
    854            
    855            shortAddr=NLME_GetShortAddr();
    856            
    857            strBuf[0] = 0x3B;                          //发送地址给协调器 可用于点播
    858            strBuf[1] = HI_UINT16( shortAddr );        //存放短地址高8位
    859            strBuf[2] = LO_UINT16( shortAddr );        //存放短地址低8位
    860            
    861            osal_memcpy(&strBuf[3], NLME_GetExtAddr(), 8);
    862            
    863            if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
    864                                SERIALAPP_CLUSTERID,
    865                                11,
    866                                strBuf,
    867                                &SerialApp_MsgID, 
    868                                0, 
    869                                AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    870            {
    871            }
    872            else
    873            {
    874              // Error occurred in request to send.
    875            }   
    876          }
    877          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    878          uint8 XorCheckSum(uint8 * pBuf, uint8 len)
   \                     XorCheckSum:
    879          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FC           MOV     R4,A
    880            uint8 i;
    881            uint8 byRet=0;
    882            
    883            if(len == 0)
   \   000007   7004         JNZ     ??XorCheckSum_0
    884              return byRet;
   \   000009   7900         MOV     R1,#0x0
   \   00000B   801E         SJMP    ??XorCheckSum_1
    885            else
    886              byRet = pBuf[0];
   \                     ??XorCheckSum_0:
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
    887            
    888            for(i = 1; i < len; i ++)
   \   000013   7801         MOV     R0,#0x1
   \   000015   800F         SJMP    ??XorCheckSum_2
    889              byRet = byRet ^ pBuf[i];
   \                     ??XorCheckSum_3:
   \   000017   88..         MOV     ?V0 + 0,R0
   \   000019   EA           MOV     A,R2
   \   00001A   25..         ADD     A,?V0 + 0
   \   00001C   F582         MOV     DPL,A
   \   00001E   EB           MOV     A,R3
   \   00001F   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000022   C9           XCH     A,R1
   \   000023   69           XRL     A,R1
   \   000024   F9           MOV     R1,A
   \   000025   08           INC     R0
   \                     ??XorCheckSum_2:
   \   000026   E8           MOV     A,R0
   \   000027   C3           CLR     C
   \   000028   9C           SUBB    A,R4
   \   000029   40EC         JC      ??XorCheckSum_3
    890            
    891            return byRet;
   \                     ??XorCheckSum_1:
   \   00002B   7F02         MOV     R7,#0x2
   \   00002D   02....       LJMP    ?BANKED_LEAVE_XDATA
    892          }
    893          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    894          uint8 GetDataLen(uint8 fc)
   \                     GetDataLen:
    895          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
    896            uint8 len=0;
   \   000005   7900         MOV     R1,#0x0
    897            switch(fc)
   \   000007   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for GetDataLen>_0`:
   \   00000A   01           DB        1
   \   00000B   07           DB        7
   \   00000C   0D           DB        13
   \   00000D   ....         DW        ??GetDataLen_0
   \   00000F   00           DB        0
   \   000010   ....         DW        ??GetDataLen_1
    898            {
    899            case 0x07:
    900            case 0x08:
    901            case 0x0A:
    902            case 0x0B:
    903            case 0x0C:
    904            case 0x0D:
    905            case 0x09:
    906              len = 1;
   \                     ??GetDataLen_0:
   \   000012   09           INC     R1
    907              break;
    908            }
    909            
    910            return len;
   \                     ??GetDataLen_1:
   \   000013                REQUIRE ?Subroutine2
   \   000013                ; // Fall through to label ?Subroutine2
    911          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    912          
    913          //获得P0_5 继电器引脚的电平
    914          uint8 GetLamp( void )
    915          {
    916            uint8 ret;
    917            
    918           //if(LAMP_PIN == 0)
    919             // ret = 0;
    920            //else
    921              //ret = 1;
    922            
    923            return ret;
                          ^
Warning[Pe549]: variable "ret" is used before its value is set

  uint8 GetLamp( void )
        ^
"F:\BaiduYunDownload\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c",914  Warning[Pe177]: 
          function "GetLamp" was declared but never referenced
    924          }
    925          
    926          //获得P0_6 MQ-2气体传感器的数据 0为有害气体   1为正常
    927          uint8 GetGas( void )
    928          {
    929            uint8 ret;
    930            
    931            if(GAS_PIN == 0)
    932            {
    933              ret = 0;
    934            }
    935            else
    936            {
    937              ret = 1;
    938            }
    939            
    940            return ret;
    941          }
    942          uint8 GetSecurity(void)
                       ^
Warning[Pe177]: function "GetSecurity" was declared but never referenced
    943          {
    944            uint8 ret;
    945              if(DATA_PIN == 0)
    946            {
    947              ret = 0;
    948            }
    949            else
    950            {
    951              ret = 1;
    952            }
    953            
    954            return ret;
    955          }
    956          //-------------------------------------------------------------------
    957          
    958          
    959          //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    960          //#ifdef WSN_BEEP
    961          //步进电机驱动部分

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    962          static void MotorData(uchar data)
   \                     MotorData:
    963          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    964            A1 = 1&(data>>4);
   \   000000   E9           MOV     A,R1
   \   000001   A2E4         MOV     C,0xE0 /* A   */.4
   \   000003   9284         MOV     0x80.4,C
    965            B1 = 1&(data>>5);
   \   000005   A2E5         MOV     C,0xE0 /* A   */.5
   \   000007   9285         MOV     0x80.5,C
    966            C1 = 1&(data>>6);
   \   000009   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000B   9286         MOV     0x80.6,C
    967            D1 = 1&(data>>7);
   \   00000D   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000F   9287         MOV     0x80.7,C
    968          }
   \   000011   02....       LJMP    ?BRET
   \   000014                REQUIRE _A_P0
    969          
    970          //顺时针转动
    971          static void MotorCW(void)
    972          {
    973            uchar i;
    974            for(i=0;i<4;i++)
    975            {
    976              MotorData(phasecw[i]);
    977              Delay_MS(ucSpeed);//转速调节
    978            }
    979          }
    980          //逆时针转动
    981          static void MotorCCW(void)
    982          {
    983            uchar i;
    984            for(i=0;i<4;i++)
    985            {
    986              MotorData(phaseccw[i]);
    987              Delay_MS(ucSpeed);//转速调节
    988            }
    989          }
    990          
    991          //停止转动
    992          static void MotorStop(void)
    993          {
    994            MotorData(0x00);
    995          }
    996          
    997          #ifdef WSN_STEP
    998          //初始化IO口程序
    999          static void InitStepMotor(void)
   1000          {
   1001            P0SEL &= 0x0F;  //P04 05 06 07定义为普通IO
   1002            P0DIR |= 0xF0;  //P04 05 06 07定义为输出
   1003            
   1004            MotorData(0x00);//停止转动
   1005          }
   1006          #endif
   1007          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1008          static void Delay_MS(unsigned int Time)// 1ms延时
   \                     Delay_MS:
   1009          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1010            char i;
   1011            
   1012            while(Time--)
   \                     ??Delay_MS_0:
   \   000009   EE           MOV     A,R6
   \   00000A   F8           MOV     R0,A
   \   00000B   EF           MOV     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   24FF         ADD     A,#-0x1
   \   000010   1E           DEC     R6
   \   000011   E9           MOV     A,R1
   \   000012   34FF         ADDC    A,#-0x1
   \   000014   FF           MOV     R7,A
   \   000015   E8           MOV     A,R0
   \   000016   49           ORL     A,R1
   \   000017   6012         JZ      ??Delay_MS_1
   1013            {
   1014              for(i=0;i<100;i++)
   \   000019   75..64       MOV     ?V0 + 0,#0x64
   1015                MicroWait(10);
   \                     ??Delay_MS_2:
   \   00001C                ; Setup parameters for call to function Onboard_wait
   \   00001C   7A0A         MOV     R2,#0xa
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   12....       LCALL   ??Onboard_wait?relay
   \   000023   15..         DEC     ?V0 + 0
   \   000025   E5..         MOV     A,?V0 + 0
   \   000027   60E0         JZ      ??Delay_MS_0
   \   000029   80F1         SJMP    ??Delay_MS_2
   1016            }
   1017          }
   \                     ??Delay_MS_1:
   \   00002B   02....       LJMP    ?Subroutine1 & 0xFFFF
   1018          //#endif
   1019          //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   1020          
   1021          
   1022          //-------------------------------------------------------------------
   1023          //协议栈里使用timer 1输出PWM，使用的是正计数/倒计数模式，占空比可调整

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1024          void init_port(void)
   \                     init_port:
   1025          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1026            P0SEL |= 0x80;         //设置P0.7口为外设
   \   000000   43F380       ORL     0xf3,#0x80
   1027            P0DIR |= 0x80;         //设置P0.7为输出
   \   000003   43FD80       ORL     0xfd,#0x80
   1028            PERCFG |= 0x40;        //设置定时器1 的I / O 位置   1： 备用位置2
   \   000006   43F140       ORL     0xf1,#0x40
   1029            
   1030            return ;
   \   000009   02....       LJMP    ?BRET
   \   00000C                REQUIRE P0SEL
   \   00000C                REQUIRE P0DIR
   \   00000C                REQUIRE PERCFG
   1031          }
   1032          
   1033          // 将基准值放入T1CC0 寄存器, 将被比较值放入T1CC3寄存器
   1034          // 当T1CC3中的值与T1CC0中的值相等时，则T1CC3 设置or清除

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1035          void init_timer(void)
   \                     init_timer:
   1036          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1037            T1CC0L = 0xff;         //PWM duty cycle  周期
   \   000004   75DAFF       MOV     0xda,#-0x1
   1038            T1CC0H = 0x0;
   \   000007   75DB00       MOV     0xdb,#0x0
   1039            
   1040            T1CC3L = 0x00;        //PWM signal period 占空比
   \   00000A   9062AC       MOV     DPTR,#0x62ac
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
   1041            T1CC3H = 0x00;
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
   1042            
   1043            //等于T1CC0中的数值时候，输出高电平 1； 等于T1CC3中的数值时候，输出低电平 0 
   1044            //其实整个占空比就为50%  为了蜂鸣器输出连续的响声修改了占空比
   1045            T1CCTL3 = 0x34;       
   \   000011   9062A3       MOV     DPTR,#0x62a3
   \   000014   7434         MOV     A,#0x34
   \   000016   F0           MOVX    @DPTR,A
   1046            T1CTL |= 0x0f;         // divide with 128 and to do i up-down mode
   \   000017   43E40F       ORL     0xe4,#0xf
   1047            return ;
   \   00001A   80..         SJMP    ?Subroutine2
   \   00001C                REQUIRE T1CC0L
   \   00001C                REQUIRE T1CC0H
   \   00001C                REQUIRE T1CTL
   1048          }
   1049          uint16 ReadLightData( void )
                        ^
Warning[Pe177]: function "ReadLightData" was declared but never referenced
   1050          {
   1051            uint16 reading = 0;
   1052            
   1053            P0DIR &= ~0x20;  // 设置P0.5为输入方式
   1054            asm("NOP");asm("NOP");
   1055            
   1056            /* Clear ADC interrupt flag */
   1057            ADCIF = 0;
   1058            
   1059            ADCCON3 = (0x80 | HAL_ADC_DEC_064 | HAL_ADC_CHANNEL_5);
   1060            
   1061            /* Wait for the conversion to finish */
   1062            while ( !ADCIF );
   1063            
   1064            asm("NOP");asm("NOP");
   1065            
   1066            /* Read the result */
   1067            reading = ADCL;
   1068            reading |= (int16) (ADCH << 8);
   1069            reading >>= 8;
   1070            
   1071            return reading;
   1072          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1073          void start_pwm(void) 
   \                     start_pwm:
   1074          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1075            init_port();
   \   000004                ; Setup parameters for call to function init_port
   \   000004   12....       LCALL   ??init_port?relay
   1076            init_timer();
   \   000007                ; Setup parameters for call to function init_timer
   \   000007   12....       LCALL   ??init_timer?relay
   1077            // IEN1 |=0x02;     //Timer 1 中断使能
   1078            // EA = 1;          //全局中断使能
   1079            // while(1) {;}
   1080            return ;
   \   00000A   80..         SJMP    ?Subroutine2
   1081          }
   1082          
   1083          //volatile unsigned char count = 0;
   1084          
   1085          #pragma vector=T1_VECTOR

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1086          __interrupt void _IRQ_timer1(void)
   \                     _IRQ_timer1:
   1087          {
   \   000000                ; Saved register size: 1
   \   000000                ; Auto size: 0
   1088            //TODO....
   1089          }
   \   000000   32           RETI

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000003   F9           MOV     R1,A
   \   000004   12....       LCALL   ??MotorData?relay
   \   000007                ; Setup parameters for call to function Delay_MS
   \   000007                ; Setup parameters for call to function Delay_MS
   \   000007   90....       MOV     DPTR,#ucSpeed
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FA           MOV     R2,A
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   12....       LCALL   ??Delay_MS?relay
   \   000011   0E           INC     R6
   \   000012   EE           MOV     A,R6
   \   000013   C3           CLR     C
   \   000014   9404         SUBB    A,#0x4
   \   000016   22           RET

   \                                 In  segment INTVEC, offset 0x4b, root
   \                     `??_IRQ_timer1??INTVEC 75`:
   \   00004B   02....       LJMP       (_IRQ_timer1)

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for EndDeviceID>`:
   \   000000   0500         DW 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4420     DB "ALD WSN-system"
   \            57534E2D
   \            73797374
   \            656D00  
   \   00000F   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ucEdDir>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ucDirection>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ucSpeed>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for phasecw>`:
   \   000000   80           DB 128
   \   000001   40           DB 64
   \   000002   20           DB 32
   \   000003   10           DB 16

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for phaseccw>`:
   \   000000   10           DB 16
   \   000001   20           DB 32
   \   000002   40           DB 64
   \   000003   80           DB 128

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_ProcessMSGCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_ProcessMSGCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_Send?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_Send

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_CallBack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??XorCheckSum?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    XorCheckSum

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetDataLen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetDataLen

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MotorData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MotorData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Delay_MS?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Delay_MS

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??init_port?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    init_port

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??init_timer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    init_timer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??start_pwm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    start_pwm

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ALD WSN-Node01">`:
   \   000000   414C4420     DB "ALD WSN-Node01"
   \            57534E2D
   \            4E6F6465
   \            303100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ALD WSN-Node02">`:
   \   000000   414C4420     DB "ALD WSN-Node02"
   \            57534E2D
   \            4E6F6465
   \            303200  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ALD WSN-Node03">`:
   \   000000   414C4420     DB "ALD WSN-Node03"
   \            57534E2D
   \            4E6F6465
   \            303300  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ALD WSN-Node04">`:
   \   000000   414C4420     DB "ALD WSN-Node04"
   \            57534E2D
   \            4E6F6465
   \            303400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ALD WSN-BEEP05">`:
   \   000000   414C4420     DB "ALD WSN-BEEP05"
   \            57534E2D
   \            42454550
   \            303500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "stepping motor">`:
   \   000000   73746570     DB "stepping motor"
   \            70696E67
   \            206D6F74
   \            6F7200  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ALD WSN-system">`:
   \   000000   414C4420     DB "ALD WSN-system"
   \            57534E2D
   \            73797374
   \            656D00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_2`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   0000         DB 0, 0
   1090          //-------------------------------------------------------------------
   1091          
   1092          
   1093          /*********************************************************************
   1094          *********************************************************************/
   1095            

   Maximum stack usage in bytes:

     Function                     ISTACK PSTACK XSTACK
     --------                     ------ ------ ------
     Delay_MS                         0      0     65
       -> Onboard_wait                0      0     18
     GetDataLen                       2      0     12
     MotorData                        0      0     56
     SendData                         1      0     34
       -> osal_memcpy                 0      0     44
       -> XorCheckSum                 0      0     38
       -> HalUARTWrite                0      0     38
       -> osal_memcpy                 0      0     44
       -> XorCheckSum                 0      0     38
       -> HalUARTWrite                0      0     38
     SerialApp_CallBack               0      0      9
       -> SerialApp_Send              0      0     18
     SerialApp_Init                   1      0     47
       -> init_port                   0      0     88
       -> init_timer                  0      0     88
       -> osal_memset                 0      0     88
       -> osal_strlen                 0      0     94
       -> osal_memcpy                 0      0     94
       -> osal_strlen                 0      0     94
       -> osal_memcpy                 0      0     94
       -> osal_strlen                 0      0     94
       -> osal_memcpy                 0      0     94
       -> osal_strlen                 0      0     94
       -> osal_memcpy                 0      0     94
       -> osal_strlen                 0      0     94
       -> osal_memcpy                 0      0     94
       -> osal_strlen                 0      0     94
       -> osal_memcpy                 0      0     94
       -> osal_strlen                 0      0     94
       -> osal_memcpy                 0      0     94
       -> osal_strlen                 2      0     88
       -> LCD_write_EN_string         0      0     88
       -> afRegister                  0      0     88
       -> RegisterForKeys             0      0     88
       -> HalUARTOpen                 0      0     88
     SerialApp_ProcessEvent           2      0     48
       -> NLME_GetShortAddr           0      0     78
       -> NLME_GetExtAddr             0      0     78
       -> osal_memcpy                 0      0     84
       -> AF_DataRequest              0      0     96
       -> osal_start_timerEx          0      0     78
       -> osal_msg_deallocate         0      0     78
       -> osal_msg_receive            0      0     78
       -> SerialApp_ProcessMSGCmd     0      0     78
       -> osal_rand                   0      0     78
       -> osal_start_timerEx          0      0     78
       -> SerialApp_Send              0      0     78
       -> AF_DataRequest              0      0     96
       -> osal_set_event              0      0     78
     SerialApp_ProcessMSGCmd          2      0     98
       -> memset                      0      0    116
       -> memset                      0      0    116
       -> osal_memset                 0      0    112
       -> osal_memcpy                 0      0    118
       -> HalLedSet                   0      0    112
       -> HalLedSet                   0      0    112
       -> HalLedSet                   0      0    112
       -> HalLedSet                   0      0    112
       -> MotorData                   0      0    112
       -> MotorData                   0      0    112
       -> Delay_MS                    0      0    112
       -> MotorData                   0      0    112
       -> Delay_MS                    0      0    112
       -> osal_stop_timerEx           0      0    112
       -> osal_start_timerEx          0      0    112
     SerialApp_Send                   1      0     60
       -> HalUARTRead                 0      0     24
       -> GetDataLen                  0      0     24
       -> XorCheckSum                 0      0     24
       -> AF_DataRequest              0      0     42
       -> HalUARTWrite                0      0     24
       -> HalUARTWrite                0      0     24
       -> SendData                    0      0     24
     XorCheckSum                      0      0     29
     _IRQ_timer1                      1      0      0
     init_port                        0      0     44
     init_timer                       2      0     44
     start_pwm                        2      0      0
       -> init_port                   4      0      0
       -> init_timer                  4      0      0


   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     _A_P0                              1
     T1CC0L                             1
     T1CC0H                             1
     T1CTL                              1
     PERCFG                             1
     P0SEL                              1
     P0DIR                              1
     EndDeviceID                        2
     SerialApp_ClusterList              4
     SerialApp_SimpleDesc              12
     SerialApp_epDesc                   6
     AppTitle                          20
     SerialApp_TaskID                   1
     Broadcast_DstAddr                 12
     SerialApp_TxSeq                    1
     SerialApp_TxBuf                   21
     SerialApp_TxLen                    1
     SerialApp_RxAddr                  12
     SerialApp_RspBuf                   4
     SerialApp_NwkState                 1
     SerialApp_TxAddr                  12
     SerialApp_MsgID                    1
     NodeData                          24
     TxBuffer                         128
     LedState                           1
     ucEdDir                            1
     ucDirection                        1
     ucSpeed                            1
     DataBuf                            3
     phasecw                            4
     phaseccw                           4
     SerialApp_Init                   472
     ?Subroutine0                       8
     ??Subroutine11_0                   6
     SerialApp_ProcessEvent           485
     ?Subroutine7                       2
     ??Subroutine10_0                  11
     ?Subroutine4                       4
     SerialApp_ProcessMSGCmd          598
     ?Subroutine8                       4
     ?Subroutine9                       3
     ??Subroutine12_0                   3
     ??Subroutine13_0                   6
     ?Subroutine6                      12
     ?Subroutine5                       6
     SendData                         230
     SerialApp_Send                   439
     SerialApp_CallBack                21
     ?Subroutine1                       5
     XorCheckSum                       48
     GetDataLen                        19
     ?Subroutine2                       7
     MotorData                         20
     Delay_MS                          46
     init_port                         12
     init_timer                        28
     start_pwm                         12
     _IRQ_timer1                        1
     ?Subroutine3                      23
     ??_IRQ_timer1??INTVEC 75           3
     ?<Initializer for EndDeviceID>     2
     ?<Initializer for AppTitle>       20
     ?<Initializer for ucEdDir>         1
     ?<Initializer for ucDirection>     1
     ?<Initializer for ucSpeed>         1
     ?<Initializer for phasecw>         4
     ?<Initializer for phaseccw>        4
     ??SerialApp_Init?relay             6
     ??SerialApp_ProcessEvent?relay     6
     ??SerialApp_ProcessMSGCmd?relay    6
     ??SendData?relay                   6
     ??SerialApp_Send?relay             6
     ??SerialApp_CallBack?relay         6
     ??XorCheckSum?relay                6
     ??GetDataLen?relay                 6
     ??MotorData?relay                  6
     ??Delay_MS?relay                   6
     ??init_port?relay                  6
     ??init_timer?relay                 6
     ??start_pwm?relay                  6
     ?<Constant "ALD WSN-Node01">      15
     ?<Constant "ALD WSN-Node02">      15
     ?<Constant "ALD WSN-Node03">      15
     ?<Constant "ALD WSN-Node04">      15
     ?<Constant "ALD WSN-BEEP05">      15
     ?<Constant "stepping motor">      15
     ?<Constant "ALD WSN-system">      15
     ?<Constant {0}>                   30
     ?<Constant {0}>_1                 13
     ?<Constant {0}>_2                 11

 
 2 530 bytes in segment BANKED_CODE
    78 bytes in segment BANK_RELAYS
     3 bytes in segment INTVEC
     1 byte  in segment NEAR_CODE
     7 bytes in segment SFR_AN
    33 bytes in segment XDATA_I
    33 bytes in segment XDATA_ID
   181 bytes in segment XDATA_ROM_C
   222 bytes in segment XDATA_Z
 
 2 642 bytes of CODE  memory (+ 3 bytes shared)
   181 bytes of CONST memory
     0 bytes of DATA  memory (+ 7 bytes shared)
   255 bytes of XDATA memory

Errors: none
Warnings: 10
