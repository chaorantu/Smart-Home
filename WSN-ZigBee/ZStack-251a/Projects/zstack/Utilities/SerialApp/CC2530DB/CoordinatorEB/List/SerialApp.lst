###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         21/May/2016  19:25:43 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\BaiduYunDownload\第6章                          #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\Source\SerialApp.c               #
#    Command line       =  -f "F:\BaiduYunDownload\第6章                      #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wCoord.cfg" (-DCPU32MHZ -DROOT=__near_func      #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "F:\BaiduYunDownload\第6章                      #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0            #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1688                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "F:\BaiduYunDownload\第6章  #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\Source\SerialApp.c" -D           #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D              #
#                          LCD_SUPPORTED -lC "F:\BaiduYunDownload\第6章       #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\CoordinatorEB\List\"    #
#                          -lA "F:\BaiduYunDownload\第6章                     #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\CoordinatorEB\List\"    #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "F:\BaiduYunDownload\第6章                         #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\CoordinatorEB\Obj\" -e  #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "F:\BaiduYunDownload\第6章                      #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\" -I                    #
#                          "F:\BaiduYunDownload\第6章                         #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\Source\" -I          #
#                          "F:\BaiduYunDownload\第6章                         #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\ZMain\TI2530DB #
#                          \" -I "F:\BaiduYunDownload\第6章                   #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\hal\include\" -I "F:\BaiduYunDownload\第6章     #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\hal\target\CC2530EB\" -I                        #
#                          "F:\BaiduYunDownload\第6章                         #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\include\" -I "F:\BaiduYunDownload\第6章     #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\high_level\" -I "F:\BaiduYunDownload\第6章  #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\low_level\srf04\" -I                        #
#                          "F:\BaiduYunDownload\第6章                         #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\low_level\srf04\single_chip\" -I            #
#                          "F:\BaiduYunDownload\第6章                         #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mt\" -I "F:\BaiduYunDownload\第6章              #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\osal\include\" -I "F:\BaiduYunDownload\第6章    #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\services\saddr\" -I "F:\BaiduYunDownload\第6章  #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\services\sdata\" -I "F:\BaiduYunDownload\第6章  #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\af\" -I "F:\BaiduYunDownload\第6章        #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\nwk\" -I "F:\BaiduYunDownload\第6章       #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sapi\" -I "F:\BaiduYunDownload\第6章      #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sec\" -I "F:\BaiduYunDownload\第6章       #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sys\" -I "F:\BaiduYunDownload\第6章       #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\zdo\" -I "F:\BaiduYunDownload\第6章       #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\zmac\" -I "F:\BaiduYunDownload\第6章            #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\zmac\f8w\" -Ohz --require_prototypes            #
#    List file          =  F:\BaiduYunDownload\第6章                          #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\CoordinatorEB\List\Seri #
#                          alApp.lst                                          #
#    Object file        =  F:\BaiduYunDownload\第6章                          #
#                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Ut #
#                          ilities\SerialApp\CC2530DB\CoordinatorEB\Obj\Seria #
#                          lApp.r51                                           #
#                                                                             #
#                                                                             #
###############################################################################

F:\BaiduYunDownload\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c
      1          /*********************************************************************
      2          * INCLUDES
      3          */
      4          #include <stdio.h>
      5          #include <string.h>
      6          
      7          #include "AF.h"
      8          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xda
   \   unsigned char volatile __sfr T1CC0L
   \                     T1CC0L:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xdb
   \   unsigned char volatile __sfr T1CC0H
   \                     T1CC0H:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe4
   \   unsigned char volatile __sfr T1CTL
   \                     T1CTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
      9          #include "OSAL_Tasks.h"
     10          #include "SerialApp.h"
     11          #include "ZDApp.h"
     12          #include "ZDObject.h"
     13          #include "ZDProfile.h"
     14          #include "hal_lcd.h"
     15          #include "hal_drivers.h"
     16          #include "hal_key.h"
     17          #if defined ( LCD_SUPPORTED )
     18          
     19          #endif
     20          #include "hal_led.h"
     21          #include "hal_uart.h"
     22          #include "hal_adc.h"
     23          #include "DHT11.h"
     24          #include "nwk_globals.h"
     25          
     26          
     27          //---------------------------------------------------------------------
     28          //标准版不同的终端需要修改此ID,用于识别协调器发过来的数据，ID相同则处理

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     29          static uint16 EndDeviceID = 0x0000 ; //终端ID，重要
   \                     EndDeviceID:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     30          //---------------------------------------------------------------------
     31          
     32          //定义节点功能用作传感器或气体+蜂鸣器,还是步进电机
     33          //#define WSN_SENSOR     //用作4个采集节点
     34          #define WSN_BEEP     //气体+蜂鸣器 EndDeviceID=5
     35          //#define WSN_STEP     //步进电机    EndDeviceID=6
     36          
     37          
     38          #define DATA_PIN P0_4            //定义P0.4口为传感器的输入端
     39          #define LAMP_PIN     P0_5  //定义P0.5口为继电器输入端
     40          #define DATA_PIN05   P0_5    //定义P0.5口为光敏的输入端
     41          #define GAS_PIN      P0_6  //定义P0.6口为烟雾传感器的输入端  
     42          #define BEEP_PIN     P0_7  //定义P0.7口为蜂鸣器的输出端  
     43          
     44          #define A1 P0_4            //定义步进电机连接端口
     45          #define B1 P0_5
     46          #define C1 P0_6
     47          #define D1 P0_7
     48          
     49          #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
     50          #define UART0        0x00
     51          
     52          #define MAX_NODE     0x04
     53          #define UART_DEBUG   0x00 //调试宏,通过串口输出协调器和终端的IEEE、短地址
     54          #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])
     55          
     56          #define TIMER1_RUN()  T1CTL|=0X03
     57          #define TIMER1_STOP() T1CTL&=~0X03
     58          /*********************************************************************
     59          * CONSTANTS
     60          */
     61          
     62          #if !defined( SERIAL_APP_PORT )
     63          #define SERIAL_APP_PORT  0
     64          #endif
     65          
     66          #if !defined( SERIAL_APP_BAUD )
     67          #define SERIAL_APP_BAUD  HAL_UART_BR_115200  //HAL_UART_BR_38400
     68          #endif
     69          
     70          // When the Rx buf space is less than this threshold, invoke the Rx callback.
     71          #if !defined( SERIAL_APP_THRESH )
     72          #define SERIAL_APP_THRESH  64
     73          #endif
     74          
     75          #if !defined( SERIAL_APP_RX_SZ )
     76          #define SERIAL_APP_RX_SZ  128
     77          #endif
     78          
     79          #if !defined( SERIAL_APP_TX_SZ )
     80          #define SERIAL_APP_TX_SZ  128
     81          #endif
     82          
     83          // Millisecs of idle time after a byte is received before invoking Rx callback.
     84          #if !defined( SERIAL_APP_IDLE )
     85          #define SERIAL_APP_IDLE  6
     86          #endif
     87          
     88          // Loopback Rx bytes to Tx for throughput testing.
     89          #if !defined( SERIAL_APP_LOOPBACK )
     90          #define SERIAL_APP_LOOPBACK  FALSE
     91          #endif
     92          
     93          // This is the max byte count per OTA message.
     94          #if !defined( SERIAL_APP_TX_MAX )
     95          #define SERIAL_APP_TX_MAX  20
     96          #endif
     97          
     98          #define SERIAL_APP_RSP_CNT  4
     99          
    100          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    101          const cId_t SerialApp_ClusterList[SERIALAPP_MAX_CLUSTERS] =
   \                     SerialApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0000         DW 0
    102          {
    103            SERIALAPP_CLUSTERID
    104          };
    105          

   \                                 In  segment XDATA_ROM_C, align 1
    106          const SimpleDescriptionFormat_t SerialApp_SimpleDesc =
   \                     SerialApp_SimpleDesc:
   \   000000   0B           DB 11
   \   000001   050F         DW 3845
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SerialApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SerialApp_ClusterList
    107          {
    108            SERIALAPP_ENDPOINT,              //  int   Endpoint;
    109            SERIALAPP_PROFID,                //  uint16 AppProfId[2];
    110            SERIALAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    111            SERIALAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    112            SERIALAPP_FLAGS,                 //  int   AppFlags:4;
    113            SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    114            (cId_t *)SerialApp_ClusterList,  //  byte *pAppInClusterList;
    115            SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumOutClusters;
    116            (cId_t *)SerialApp_ClusterList   //  byte *pAppOutClusterList;
    117          };
    118          

   \                                 In  segment XDATA_ROM_C, align 1
    119          const endPointDesc_t SerialApp_epDesc =
   \                     SerialApp_epDesc:
   \   000000   0B           DB 11
   \   000001   ....         DW SerialApp_TaskID
   \   000003   ....         DW SerialApp_SimpleDesc
   \   000005   00           DB 0
    120          {
    121            SERIALAPP_ENDPOINT,
    122            &SerialApp_TaskID,
    123            (SimpleDescriptionFormat_t *)&SerialApp_SimpleDesc,
    124            noLatencyReqs
    125          };
    126          
    127          
    128          /*********************************************************************
    129          * GLOBAL VARIABLES
    130          */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    131          uint8 AppTitle[20] = "ALD WSN-system"; //应用程序名称
   \                     AppTitle:
   \   000000                DS 20
   \   000014                REQUIRE `?<Initializer for AppTitle>`
   \   000014                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          uint8 SerialApp_TaskID;    // Task ID for internal task/event processing.
   \                     SerialApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    133          
    134          
    135          /*********************************************************************
    136          * LOCAL VARIABLES
    137          */
    138          #ifdef WSN_SENSOR
    139          static bool SendFlag = 0;
    140          #endif
    141          static uint8 SerialApp_MsgID;
    142          
    143          static afAddrType_t SerialApp_TxAddr;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          static afAddrType_t Broadcast_DstAddr;
   \                     Broadcast_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          static uint8 SerialApp_TxSeq;
   \                     SerialApp_TxSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          static uint8 SerialApp_TxBuf[SERIAL_APP_TX_MAX+1];
   \                     SerialApp_TxBuf:
   \   000000                DS 21
   \   000015                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          static uint8 SerialApp_TxLen;
   \                     SerialApp_TxLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          static afAddrType_t SerialApp_RxAddr;
   \                     SerialApp_RxAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          static uint8 SerialApp_RspBuf[SERIAL_APP_RSP_CNT];
   \                     SerialApp_RspBuf:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    152          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          static devStates_t SerialApp_NwkState;
   \                     SerialApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154          static afAddrType_t SerialApp_TxAddr;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          static uint8 SerialApp_MsgID;
   \                     SerialApp_MsgID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          uint8 NodeData[MAX_NODE][6];         //终端数据缓冲区 0=温度 1=湿度 2=气体 3=灯
   \                     NodeData:
   \   000000                DS 24
   \   000018                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          uint8 TxBuffer[128];
   \                     TxBuffer:
   \   000000                DS 128
   \   000080                REQUIRE __INIT_XDATA_Z
    159          
    160          //电机相关的变量

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          uint8 LedState = 0;
   \                     LedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    162          uint8 ucEdDir = 1;      //终端1为正转  2为反转
   \                     ucEdDir:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ucEdDir>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    163          uint8 ucDirection = 1;  //1为正转  2为反转
   \                     ucDirection:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ucDirection>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    164          uint8 ucSpeed = 2;      //速度2-10之间
   \                     ucSpeed:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ucSpeed>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          uint8 DataBuf[3];
   \                     DataBuf:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z
    166          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    167          uchar phasecw[4] ={0x80,0x40,0x20,0x10};//正转 电机导通相序 D-C-B-A
   \                     phasecw:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for phasecw>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    168          uchar phaseccw[4]={0x10,0x20,0x40,0x80};//反转 电机导通相序 A-B-C-D
   \                     phaseccw:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for phaseccw>`
   \   000004                REQUIRE __INIT_XDATA_I
    169          /*********************************************************************
    170          * LOCAL FUNCTIONS
    171          */
    172          
    173          static void SerialApp_HandleKeys( uint8 shift, uint8 keys );
    174          static void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
    175          static void SerialApp_Send(void);
    176          static void SerialApp_Resp(void);
    177          static void SerialApp_CallBack(uint8 port, uint8 event);
    178          
    179          #if UART_DEBUG  
    180          static void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr);
    181          static void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr);
    182          #endif
    183          static void AfSendAddrInfo(void);
    184          static void SerialApp_SendPeriodicMessage( void );
    185          static uint8 GetDataLen(uint8 fc);
    186          static uint8 GetLamp( void );
    187          static uint8 GetGas( void );
    188          static uint8 GetSecurity( void );
    189          static uint8 XorCheckSum(uint8 * pBuf, uint8 len);
    190          static uint16 ReadLightData( void );
    191          uint8 SendData(uint8 addr, uint8 FC);
    192          
    193          //WSN_BEEP
    194          void init_timer(void);
    195          void init_port(void);
    196          void start_pwm(void) ;
    197          __interrupt void _IRQ_timer1(void);
    198          
    199          //WSN_STEP
    200          static void MotorData(uchar data);
    201          static void MotorCW(void);
    202          static void MotorCCW(void);
    203          static void MotorStop(void);
    204          
    205          static void Delay_MS(unsigned int Time);
    206          #ifdef WSN_STEP
    207          static void InitStepMotor(void);
    208          #endif
    209          /*********************************************************************
    210          * @fn      SerialApp_Init
    211          *
    212          * @brief   This is called during OSAL tasks' initialization.
    213          *
    214          * @param   task_id - the Task ID assigned by OSAL.
    215          *
    216          * @return  none
    217          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    218          void SerialApp_Init( uint8 task_id )
   \                     SerialApp_Init:
    219          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 0,R1
    220            halUARTCfg_t uartConfig;
    221            
    222          #ifdef WSN_SENSOR
    223            P0SEL &= ~0x20;         //设置P0.5口为普通IO
    224            //P0DIR |= 0x20;          //设置P0.5为输出(继电器)
    225            P0DIR &= ~0x20;          //设置P0.5为输入(光敏)
    226            //LAMP_PIN = 1;           //高电平继电器断开;低电平继电器吸合
    227            P0SEL &= ~0x40;         //设置P0.6为普通IO口
    228            P0DIR &= ~0x40;         //P0.6定义为输入口
    229            P0SEL &= ~0x80;         //P0_7配置成通用io
    230            P0SEL &= ~0x10;         //设置P0.4为普通IO口
    231            P0DIR &= ~0x10;         //P0.4定义为输入口
    232          #elif defined WSN_BEEP
    233            P0SEL &= ~0x20;         //设置P0.5口为普通IO
   \   00000C   53F3DF       ANL     0xf3,#0xdf
    234            P0DIR |= 0x20;          //设置P0.5为输出(继电器)
   \   00000F   43FD20       ORL     0xfd,#0x20
    235            P0SEL &= ~0x40;         //设置P0.6为普通IO口
   \   000012   53F3BF       ANL     0xf3,#0xbf
    236            P0DIR &= ~0x40;         //P0.6定义为输入口
   \   000015   53FDBF       ANL     0xfd,#0xbf
    237            start_pwm();            //配置T1输出PWM
   \   000018                ; Setup parameters for call to function init_port
   \   000018   12....       LCALL   ??init_port?relay
   \   00001B                ; Setup parameters for call to function init_timer
   \   00001B   12....       LCALL   ??init_timer?relay
    238            TIMER1_STOP();          //默认关闭蜂鸣器
   \   00001E   53E4FC       ANL     0xe4,#0xfc
    239            EndDeviceID = 0x0005;   //终端5的内部编号  
    240          #elif defined WSN_STEP
    241            InitStepMotor();        //初始化电机IO引脚
    242            EndDeviceID = 0x0006;   //终端6的内部编号  
    243          #endif
    244          
    245          #if defined(ZDO_COORDINATOR) 
    246            EndDeviceID = 0x0000;
   \   000021   90....       MOV     DPTR,#EndDeviceID
   \   000024   E4           CLR     A
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   F0           MOVX    @DPTR,A
    247            //LAMP_PIN = 1;
    248            P0SEL &= ~0x20;         //设置P0.5口为普通IO
   \   000028   53F3DF       ANL     0xf3,#0xdf
    249            P0DIR |= 0x20;          //设置P0.5为输出(继电器)
   \   00002B   43FD20       ORL     0xfd,#0x20
    250          #endif
    251            
    252            Color    = BLACK; //前景色
   \   00002E   90....       MOV     DPTR,#Color
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   F0           MOVX    @DPTR,A
    253            Color_BK = GREEN; //背景色
   \   000034   90....       MOV     DPTR,#Color_BK
   \   000037   74E0         MOV     A,#-0x20
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   7407         MOV     A,#0x7
   \   00003D   F0           MOVX    @DPTR,A
    254            osal_memset(AppTitle, 0, 20);
   \   00003E                ; Setup parameters for call to function osal_memset
   \   00003E   7C14         MOV     R4,#0x14
   \   000040   7D00         MOV     R5,#0x0
   \   000042   7900         MOV     R1,#0x0
   \   000044   7A..         MOV     R2,#AppTitle & 0xff
   \   000046   7B..         MOV     R3,#(AppTitle >> 8) & 0xff
   \   000048   12....       LCALL   ??osal_memset?relay
    255            //LCD上显示应用程序的标题
    256            if(EndDeviceID == 0x0001)
   \   00004B   90....       MOV     DPTR,#EndDeviceID
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   6401         XRL     A,#0x1
   \   000051   7002         JNZ     ??SerialApp_Init_0
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \                     ??SerialApp_Init_0:
   \   000055   7015         JNZ     ??SerialApp_Init_1
    257              osal_memcpy(AppTitle, "ALD WSN-Node01", osal_strlen("ALD WSN-Node01"));
   \   000057                ; Setup parameters for call to function osal_memcpy
   \   000057   75....       MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node01">` & 0xff
   \   00005A   75....       MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node01">` >> 8) & 0xff
   \   00005D   75..00       MOV     ?V0 + 6,#0x0
   \   000060   78..         MOV     R0,#?V0 + 4
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000065                ; Setup parameters for call to function osal_strlen
   \   000065   7A..         MOV     R2,#`?<Constant "ALD WSN-Node01">` & 0xff
   \   000067   7B..         MOV     R3,#(`?<Constant "ALD WSN-Node01">` >> 8) & 0xff
   \   000069   02....       LJMP    ??SerialApp_Init_2 & 0xFFFF
    258            else if(EndDeviceID == 0x0002)
   \                     ??SerialApp_Init_1:
   \   00006C   90....       MOV     DPTR,#EndDeviceID
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   6402         XRL     A,#0x2
   \   000072   7002         JNZ     ??SerialApp_Init_3
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \                     ??SerialApp_Init_3:
   \   000076   7015         JNZ     ??SerialApp_Init_4
    259              osal_memcpy(AppTitle, "ALD WSN-Node02", osal_strlen("ALD WSN-Node02"));
   \   000078                ; Setup parameters for call to function osal_memcpy
   \   000078   75....       MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node02">` & 0xff
   \   00007B   75....       MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node02">` >> 8) & 0xff
   \   00007E   75..00       MOV     ?V0 + 6,#0x0
   \   000081   78..         MOV     R0,#?V0 + 4
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000086                ; Setup parameters for call to function osal_strlen
   \   000086   7A..         MOV     R2,#`?<Constant "ALD WSN-Node02">` & 0xff
   \   000088   7B..         MOV     R3,#(`?<Constant "ALD WSN-Node02">` >> 8) & 0xff
   \   00008A   02....       LJMP    ??SerialApp_Init_2 & 0xFFFF
    260            else if(EndDeviceID == 0x0003)
   \                     ??SerialApp_Init_4:
   \   00008D   90....       MOV     DPTR,#EndDeviceID
   \   000090   E0           MOVX    A,@DPTR
   \   000091   6403         XRL     A,#0x3
   \   000093   7002         JNZ     ??SerialApp_Init_5
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \                     ??SerialApp_Init_5:
   \   000097   7014         JNZ     ??SerialApp_Init_6
    261              osal_memcpy(AppTitle, "ALD WSN-Node03", osal_strlen("ALD WSN-Node03"));
   \   000099                ; Setup parameters for call to function osal_memcpy
   \   000099   75....       MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node03">` & 0xff
   \   00009C   75....       MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node03">` >> 8) & 0xff
   \   00009F   75..00       MOV     ?V0 + 6,#0x0
   \   0000A2   78..         MOV     R0,#?V0 + 4
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A7                ; Setup parameters for call to function osal_strlen
   \   0000A7   7A..         MOV     R2,#`?<Constant "ALD WSN-Node03">` & 0xff
   \   0000A9   7B..         MOV     R3,#(`?<Constant "ALD WSN-Node03">` >> 8) & 0xff
   \   0000AB   8072         SJMP    ??SerialApp_Init_2
    262            else if(EndDeviceID == 0x0004)
   \                     ??SerialApp_Init_6:
   \   0000AD   90....       MOV     DPTR,#EndDeviceID
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   6404         XRL     A,#0x4
   \   0000B3   7002         JNZ     ??SerialApp_Init_7
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \                     ??SerialApp_Init_7:
   \   0000B7   7014         JNZ     ??SerialApp_Init_8
    263              osal_memcpy(AppTitle, "ALD WSN-Node04", osal_strlen("ALD WSN-Node04"));
   \   0000B9                ; Setup parameters for call to function osal_memcpy
   \   0000B9   75....       MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node04">` & 0xff
   \   0000BC   75....       MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node04">` >> 8) & 0xff
   \   0000BF   75..00       MOV     ?V0 + 6,#0x0
   \   0000C2   78..         MOV     R0,#?V0 + 4
   \   0000C4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C7                ; Setup parameters for call to function osal_strlen
   \   0000C7   7A..         MOV     R2,#`?<Constant "ALD WSN-Node04">` & 0xff
   \   0000C9   7B..         MOV     R3,#(`?<Constant "ALD WSN-Node04">` >> 8) & 0xff
   \   0000CB   8052         SJMP    ??SerialApp_Init_2
    264            else if(EndDeviceID == 0x0005)
   \                     ??SerialApp_Init_8:
   \   0000CD   90....       MOV     DPTR,#EndDeviceID
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   6405         XRL     A,#0x5
   \   0000D3   7002         JNZ     ??SerialApp_Init_9
   \   0000D5   A3           INC     DPTR
   \   0000D6   E0           MOVX    A,@DPTR
   \                     ??SerialApp_Init_9:
   \   0000D7   7014         JNZ     ??SerialApp_Init_10
    265              osal_memcpy(AppTitle, "ALD WSN-BEEP05", osal_strlen("ALD WSN-BEEP05"));    
   \   0000D9                ; Setup parameters for call to function osal_memcpy
   \   0000D9   75....       MOV     ?V0 + 4,#`?<Constant "ALD WSN-BEEP05">` & 0xff
   \   0000DC   75....       MOV     ?V0 + 5,#(`?<Constant "ALD WSN-BEEP05">` >> 8) & 0xff
   \   0000DF   75..00       MOV     ?V0 + 6,#0x0
   \   0000E2   78..         MOV     R0,#?V0 + 4
   \   0000E4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E7                ; Setup parameters for call to function osal_strlen
   \   0000E7   7A..         MOV     R2,#`?<Constant "ALD WSN-BEEP05">` & 0xff
   \   0000E9   7B..         MOV     R3,#(`?<Constant "ALD WSN-BEEP05">` >> 8) & 0xff
   \   0000EB   8032         SJMP    ??SerialApp_Init_2
    266            else if(EndDeviceID == 0x0006)
   \                     ??SerialApp_Init_10:
   \   0000ED   90....       MOV     DPTR,#EndDeviceID
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   6406         XRL     A,#0x6
   \   0000F3   7002         JNZ     ??SerialApp_Init_11
   \   0000F5   A3           INC     DPTR
   \   0000F6   E0           MOVX    A,@DPTR
   \                     ??SerialApp_Init_11:
   \   0000F7   7014         JNZ     ??SerialApp_Init_12
    267              osal_memcpy(AppTitle, "stepping motor", osal_strlen("stepping motor")); 
   \   0000F9                ; Setup parameters for call to function osal_memcpy
   \   0000F9   75....       MOV     ?V0 + 4,#`?<Constant "stepping motor">` & 0xff
   \   0000FC   75....       MOV     ?V0 + 5,#(`?<Constant "stepping motor">` >> 8) & 0xff
   \   0000FF   75..00       MOV     ?V0 + 6,#0x0
   \   000102   78..         MOV     R0,#?V0 + 4
   \   000104   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000107                ; Setup parameters for call to function osal_strlen
   \   000107   7A..         MOV     R2,#`?<Constant "stepping motor">` & 0xff
   \   000109   7B..         MOV     R3,#(`?<Constant "stepping motor">` >> 8) & 0xff
   \   00010B   8012         SJMP    ??SerialApp_Init_2
    268            else
    269              osal_memcpy(AppTitle, "ALD WSN-system", osal_strlen("ALD WSN-system")); 
   \                     ??SerialApp_Init_12:
   \   00010D                ; Setup parameters for call to function osal_memcpy
   \   00010D   75....       MOV     ?V0 + 4,#`?<Constant "ALD WSN-system">` & 0xff
   \   000110   75....       MOV     ?V0 + 5,#(`?<Constant "ALD WSN-system">` >> 8) & 0xff
   \   000113   75..00       MOV     ?V0 + 6,#0x0
   \   000116   78..         MOV     R0,#?V0 + 4
   \   000118   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00011B                ; Setup parameters for call to function osal_strlen
   \   00011B   7A..         MOV     R2,#`?<Constant "ALD WSN-system">` & 0xff
   \   00011D   7B..         MOV     R3,#(`?<Constant "ALD WSN-system">` >> 8) & 0xff
   \                     ??SerialApp_Init_2:
   \   00011F   12....       LCALL   ??osal_strlen?relay
   \   000122   EA           MOV     A,R2
   \   000123   FC           MOV     R4,A
   \   000124   EB           MOV     A,R3
   \   000125   FD           MOV     R5,A
   \   000126   7A..         MOV     R2,#AppTitle & 0xff
   \   000128   7B..         MOV     R3,#(AppTitle >> 8) & 0xff
   \   00012A   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00012D   12....       LCALL   ?DEALLOC_XSTACK8
    270            
    271            LCD_write_EN_string(64-7*osal_strlen((char *)AppTitle)/2,3,AppTitle); //显示标题
   \   000130                ; Setup parameters for call to function LCD_write_EN_string
   \   000130   7A03         MOV     R2,#0x3
   \   000132   EA           MOV     A,R2
   \   000133   C0E0         PUSH    A
   \   000135                ; Setup parameters for call to function osal_strlen
   \   000135   7A..         MOV     R2,#AppTitle & 0xff
   \   000137   7B..         MOV     R3,#(AppTitle >> 8) & 0xff
   \   000139   12....       LCALL   ??osal_strlen?relay
   \   00013C   EA           MOV     A,R2
   \   00013D   75F007       MOV     B,#0x7
   \   000140   A4           MUL     AB
   \   000141   FA           MOV     R2,A
   \   000142   A8F0         MOV     R0,B
   \   000144   75F007       MOV     B,#0x7
   \   000147   EB           MOV     A,R3
   \   000148   A4           MUL     AB
   \   000149   28           ADD     A,R0
   \   00014A   FB           MOV     R3,A
   \   00014B   EA           MOV     A,R2
   \   00014C   F8           MOV     R0,A
   \   00014D   EB           MOV     A,R3
   \   00014E   F9           MOV     R1,A
   \   00014F   7A02         MOV     R2,#0x2
   \   000151   7B00         MOV     R3,#0x0
   \   000153   12....       LCALL   ?S_DIV_MOD
   \   000156   7440         MOV     A,#0x40
   \   000158   C3           CLR     C
   \   000159   98           SUBB    A,R0
   \   00015A   F9           MOV     R1,A
   \   00015B   7C..         MOV     R4,#AppTitle & 0xff
   \   00015D   74..         MOV     A,#(AppTitle >> 8) & 0xff
   \   00015F   FD           MOV     R5,A
   \   000160   D0E0         POP     A
   \   000162   FA           MOV     R2,A
   \   000163   12....       LCALL   ??LCD_write_EN_string?relay
    272            
    273            SerialApp_TaskID = task_id;
   \   000166   E5..         MOV     A,?V0 + 0
   \   000168   90....       MOV     DPTR,#SerialApp_TaskID
   \   00016B   F0           MOVX    @DPTR,A
    274            //SerialApp_RxSeq = 0xC3;
    275            afRegister( (endPointDesc_t *)&SerialApp_epDesc );
   \   00016C                ; Setup parameters for call to function afRegister
   \   00016C   7A..         MOV     R2,#SerialApp_epDesc & 0xff
   \   00016E   7B..         MOV     R3,#(SerialApp_epDesc >> 8) & 0xff
   \   000170   12....       LCALL   ??afRegister?relay
    276            RegisterForKeys( task_id );
   \   000173                ; Setup parameters for call to function RegisterForKeys
   \   000173   A9..         MOV     R1,?V0 + 0
   \   000175   12....       LCALL   ??RegisterForKeys?relay
    277            
    278            uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
   \   000178   85..82       MOV     DPL,?XSP + 0
   \   00017B   85..83       MOV     DPH,?XSP + 1
   \   00017E   7401         MOV     A,#0x1
   \   000180   F0           MOVX    @DPTR,A
    279            uartConfig.baudRate             = SERIAL_APP_BAUD;
   \   000181   12....       LCALL   ?XSTACK_DISP0_8
   \   000184   7404         MOV     A,#0x4
   \   000186   F0           MOVX    @DPTR,A
    280            uartConfig.flowControl          = FALSE;
   \   000187   7402         MOV     A,#0x2
   \   000189   12....       LCALL   ?XSTACK_DISP0_8
   \   00018C   E4           CLR     A
   \   00018D   F0           MOVX    @DPTR,A
    281            uartConfig.flowControlThreshold = SERIAL_APP_THRESH; // 2x30 don't care - see uart driver.
   \   00018E   7403         MOV     A,#0x3
   \   000190   12....       LCALL   ?XSTACK_DISP0_8
   \   000193   7440         MOV     A,#0x40
   \   000195   F0           MOVX    @DPTR,A
   \   000196   A3           INC     DPTR
   \   000197   E4           CLR     A
   \   000198   F0           MOVX    @DPTR,A
    282            uartConfig.rx.maxBufSize        = SERIAL_APP_RX_SZ;  // 2x30 don't care - see uart driver.
   \   000199   740A         MOV     A,#0xa
   \   00019B   12....       LCALL   ?XSTACK_DISP0_8
   \   00019E   7480         MOV     A,#-0x80
   \   0001A0   F0           MOVX    @DPTR,A
   \   0001A1   A3           INC     DPTR
   \   0001A2   E4           CLR     A
   \   0001A3   F0           MOVX    @DPTR,A
    283            uartConfig.tx.maxBufSize        = SERIAL_APP_TX_SZ;  // 2x30 don't care - see uart driver.
   \   0001A4   7412         MOV     A,#0x12
   \   0001A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A9   7480         MOV     A,#-0x80
   \   0001AB   F0           MOVX    @DPTR,A
   \   0001AC   A3           INC     DPTR
   \   0001AD   E4           CLR     A
   \   0001AE   F0           MOVX    @DPTR,A
    284            uartConfig.idleTimeout          = SERIAL_APP_IDLE;   // 2x30 don't care - see uart driver.
   \   0001AF   7405         MOV     A,#0x5
   \   0001B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B4   7406         MOV     A,#0x6
   \   0001B6   F0           MOVX    @DPTR,A
    285            uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
   \   0001B7   7416         MOV     A,#0x16
   \   0001B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BC   7401         MOV     A,#0x1
   \   0001BE   F0           MOVX    @DPTR,A
    286            uartConfig.callBackFunc         = SerialApp_CallBack;
   \   0001BF   741B         MOV     A,#0x1b
   \   0001C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C4   74..         MOV     A,#??SerialApp_CallBack?relay & 0xff
   \   0001C6   F0           MOVX    @DPTR,A
   \   0001C7   A3           INC     DPTR
   \   0001C8   74..         MOV     A,#(??SerialApp_CallBack?relay >> 8) & 0xff
   \   0001CA   F0           MOVX    @DPTR,A
    287            HalUARTOpen (UART0, &uartConfig);
   \   0001CB                ; Setup parameters for call to function HalUARTOpen
   \   0001CB   85..82       MOV     DPL,?XSP + 0
   \   0001CE   85..83       MOV     DPH,?XSP + 1
   \   0001D1   AA82         MOV     R2,DPL
   \   0001D3   AB83         MOV     R3,DPH
   \   0001D5   7900         MOV     R1,#0x0
   \   0001D7   12....       LCALL   ??HalUARTOpen?relay
    288            
    289            //#if defined ( LCD_SUPPORTED )
    290            //  HalLcdWriteString( "SerialApp", HAL_LCD_LINE_2 );
    291            //#endif
    292            //HalUARTWrite(UART0, "Init", 4);
    293            //ZDO_RegisterForZDOMsg( SerialApp_TaskID, End_Device_Bind_rsp );
    294            //ZDO_RegisterForZDOMsg( SerialApp_TaskID, Match_Desc_rsp );
    295          }
   \   0001DA   741D         MOV     A,#0x1d
   \   0001DC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001DF   7F07         MOV     R7,#0x7
   \   0001E1   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0001E4                REQUIRE P0SEL
   \   0001E4                REQUIRE P0DIR
   \   0001E4                REQUIRE T1CTL

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
    296          
    297          /*********************************************************************
    298          * @fn      SerialApp_ProcessEvent
    299          *
    300          * @brief   Generic Application Task event processor.
    301          *
    302          * @param   task_id  - The OSAL assigned task ID.
    303          * @param   events   - Bit map of events to process.
    304          *
    305          * @return  Event flags of all unprocessed events.
    306          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    307          UINT16 SerialApp_ProcessEvent( uint8 task_id, UINT16 events )
   \                     SerialApp_ProcessEvent:
    308          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    309            (void)task_id;  // Intentionally unreferenced parameter
    310            
    311            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   707D         JNZ     ??SerialApp_ProcessEvent_0
    312            {
    313              afIncomingMSGPacket_t *MSGpkt;
    314              
    315              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SerialApp_TaskID )) )
    316              {
    317                switch ( MSGpkt->hdr.event )
    318                {
    319                case ZDO_CB_MSG:
    320                  //SerialApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    321                  break;
    322                  
    323                case KEY_CHANGE:
    324                  SerialApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    325                  break;
    326                  
    327                case AF_INCOMING_MSG_CMD:
    328                  SerialApp_ProcessMSGCmd( MSGpkt );
    329                  break;
    330                  
    331                case ZDO_STATE_CHANGE:
    332                  SerialApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    333                  if ( (SerialApp_NwkState == DEV_ZB_COORD)
    334                      || (SerialApp_NwkState == DEV_ROUTER)
    335                        || (SerialApp_NwkState == DEV_END_DEVICE) )
    336                  {
    337          #if defined(ZDO_COORDINATOR) //协调器通过串口输出自身短地址、IEEE  
    338                    Broadcast_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
    339                    Broadcast_DstAddr.endPoint = SERIALAPP_ENDPOINT;
    340                    Broadcast_DstAddr.addr.shortAddr = 0xFFFF;
    341          #if UART_DEBUG           
    342                    PrintAddrInfo( NLME_GetShortAddr(), aExtendedAddress + Z_EXTADDR_LEN - 1);
    343          #endif 
    344                    //初始化灯的状态，1为熄灭状态，0为点亮
    345                    NodeData[0][3] = 1;
    346                    NodeData[1][3] = 1;
    347                    NodeData[2][3] = 1;
    348                    NodeData[3][3] = 1;
    349          #else                        //终端无线发送短地址、IEEE   
    350                    AfSendAddrInfo();
    351          #ifdef WSN_BEEP              //蜂鸣器和气体实验时自动检测气体发现异常就报警
    352                    osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT,
    353                                       SERIALAPP_SEND_PERIODIC_TIMEOUT );
    354                    //(SERIALAPP_SEND_PERIODIC_TIMEOUT + (osal_rand() & 0x00FF)) );
    355          #endif
    356                    
    357          #endif
    358                  }
    359                  break;				
    360                default:
    361                  break;
    362                }
    363                
    364                osal_msg_deallocate( (uint8 *)MSGpkt );
    365              }
    366              
    367              return ( events ^ SYS_EVENT_MSG );
    368            }
    369            
    370            //在此事件中可以定时向协调器发送节点传感器参数信息
    371            if ( events & SERIALAPP_SEND_PERIODIC_EVT )
   \   000012   EE           MOV     A,R6
   \   000013   5403         ANL     A,#0x3
   \   000015   7003         JNZ     $+5
   \   000017   02....       LJMP    ??SerialApp_ProcessEvent_1 & 0xFFFF
    372            {
    373              SerialApp_SendPeriodicMessage();
   \   00001A   90....       MOV     DPTR,#`?<Constant {0}>_1`
   \   00001D   C082         PUSH    DPL
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   AC82         MOV     R4,DPL
   \   000027   AD83         MOV     R5,DPH
   \   000029   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   00002C   D082         POP     DPL
   \   00002E   740D         MOV     A,#0xd
   \   000030   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000033   A286         MOV     C,0x80.6
   \   000035   33           RLC     A
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   707E         JNZ     ??SerialApp_ProcessEvent_2
   \   00003F   90....       MOV     DPTR,#EndDeviceID
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6405         XRL     A,#0x5
   \   000045   7002         JNZ     ??SerialApp_ProcessEvent_3
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \                     ??SerialApp_ProcessEvent_3:
   \   000049   7072         JNZ     ??SerialApp_ProcessEvent_2
   \   00004B   43E403       ORL     0xe4,#0x3
   \   00004E   8070         SJMP    ??SerialApp_ProcessEvent_4
   \                     ??SerialApp_ProcessEvent_5:
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   90....       MOV     DPTR,#SerialApp_NwkState
   \   000055   F0           MOVX    @DPTR,A
   \   000056   6409         XRL     A,#0x9
   \   000058   600A         JZ      ??SerialApp_ProcessEvent_6
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   6407         XRL     A,#0x7
   \   00005D   6005         JZ      ??SerialApp_ProcessEvent_6
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   6406         XRL     A,#0x6
   \   000062   7024         JNZ     ??SerialApp_ProcessEvent_7
   \                     ??SerialApp_ProcessEvent_6:
   \   000064   90....       MOV     DPTR,#Broadcast_DstAddr + 8
   \   000067   740F         MOV     A,#0xf
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   740B         MOV     A,#0xb
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   90....       MOV     DPTR,#Broadcast_DstAddr
   \   000071   74FF         MOV     A,#-0x1
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
   \   000075   F0           MOVX    @DPTR,A
   \   000076   90....       MOV     DPTR,#NodeData + 3
   \   000079   7401         MOV     A,#0x1
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   90....       MOV     DPTR,#NodeData + 9
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   90....       MOV     DPTR,#NodeData + 15
   \   000083   F0           MOVX    @DPTR,A
   \   000084   90....       MOV     DPTR,#NodeData + 21
   \   000087   F0           MOVX    @DPTR,A
   \                     ??SerialApp_ProcessEvent_7:
   \   000088                ; Setup parameters for call to function osal_msg_deallocate
   \   000088   AA..         MOV     R2,?V0 + 0
   \   00008A   AB..         MOV     R3,?V0 + 1
   \   00008C   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??SerialApp_ProcessEvent_0:
   \   00008F                ; Setup parameters for call to function osal_msg_receive
   \   00008F   90....       MOV     DPTR,#SerialApp_TaskID
   \   000092   E0           MOVX    A,@DPTR
   \   000093   F9           MOV     R1,A
   \   000094   12....       LCALL   ??osal_msg_receive?relay
   \   000097   8A..         MOV     ?V0 + 0,R2
   \   000099   8B..         MOV     ?V0 + 1,R3
   \   00009B   EA           MOV     A,R2
   \   00009C   45..         ORL     A,?V0 + 1
   \   00009E   6014         JZ      ??SerialApp_ProcessEvent_8
   \   0000A0   8A82         MOV     DPL,R2
   \   0000A2   8B83         MOV     DPH,R3
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   24E6         ADD     A,#-0x1a
   \   0000A7   6006         JZ      ??SerialApp_ProcessEvent_9
   \   0000A9   2449         ADD     A,#0x49
   \   0000AB   60A3         JZ      ??SerialApp_ProcessEvent_5
   \   0000AD   80D9         SJMP    ??SerialApp_ProcessEvent_7
   \                     ??SerialApp_ProcessEvent_9:
   \   0000AF                ; Setup parameters for call to function SerialApp_ProcessMSGCmd
   \   0000AF   12....       LCALL   ??SerialApp_ProcessMSGCmd?relay
   \   0000B2   80D4         SJMP    ??SerialApp_ProcessEvent_7
   \                     ??SerialApp_ProcessEvent_8:
   \   0000B4   EE           MOV     A,R6
   \   0000B5   FA           MOV     R2,A
   \   0000B6   EF           MOV     A,R7
   \   0000B7   6480         XRL     A,#0x80
   \                     ??SerialApp_ProcessEvent_10:
   \   0000B9   FB           MOV     R3,A
   \   0000BA   02....       LJMP    ??SerialApp_ProcessEvent_11 & 0xFFFF
   \                     ??SerialApp_ProcessEvent_2:
   \   0000BD   53E4FC       ANL     0xe4,#0xfc
    374              
    375              osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT,
    376                                 (SERIALAPP_SEND_PERIODIC_TIMEOUT + (osal_rand() & 0x00FF)) );
   \                     ??SerialApp_ProcessEvent_4:
   \   0000C0                ; Setup parameters for call to function osal_rand
   \   0000C0   12....       LCALL   ??osal_rand?relay
   \   0000C3                ; Setup parameters for call to function osal_start_timerEx
   \   0000C3   EA           MOV     A,R2
   \   0000C4   24E8         ADD     A,#-0x18
   \   0000C6   FC           MOV     R4,A
   \   0000C7   E4           CLR     A
   \   0000C8   3403         ADDC    A,#0x3
   \   0000CA   FD           MOV     R5,A
   \   0000CB   7A03         MOV     R2,#0x3
   \   0000CD   7B00         MOV     R3,#0x0
   \   0000CF   90....       MOV     DPTR,#SerialApp_TaskID
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F9           MOV     R1,A
   \   0000D4   12....       LCALL   ??osal_start_timerEx?relay
    377              
    378              return (events ^ SERIALAPP_SEND_PERIODIC_EVT);
   \   0000D7   EE           MOV     A,R6
   \   0000D8   6403         XRL     A,#0x3
   \                     ??SerialApp_ProcessEvent_12:
   \   0000DA   FA           MOV     R2,A
   \   0000DB   EF           MOV     A,R7
   \   0000DC   80DB         SJMP    ??SerialApp_ProcessEvent_10
    379            }
    380            
    381            if ( events & SERIALAPP_SEND_EVT )
   \                     ??SerialApp_ProcessEvent_1:
   \   0000DE   EE           MOV     A,R6
   \   0000DF   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000E1   5008         JNC     ??SerialApp_ProcessEvent_13
    382            {
    383              SerialApp_Send();
   \   0000E3                ; Setup parameters for call to function SerialApp_Send
   \   0000E3   12....       LCALL   ??SerialApp_Send?relay
    384              return ( events ^ SERIALAPP_SEND_EVT );
   \   0000E6   EE           MOV     A,R6
   \   0000E7   6401         XRL     A,#0x1
   \   0000E9   80EF         SJMP    ??SerialApp_ProcessEvent_12
    385            }
    386            
    387            if ( events & SERIALAPP_RESP_EVT )
   \                     ??SerialApp_ProcessEvent_13:
   \   0000EB   5402         ANL     A,#0x2
   \   0000ED   6057         JZ      ??SerialApp_ProcessEvent_14
    388            {
    389              SerialApp_Resp();
   \   0000EF                ; Setup parameters for call to function AF_DataRequest
   \   0000EF   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000F2   78..         MOV     R0,#?V0 + 0
   \   0000F4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F7   75....       MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
   \   0000FA   75....       MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
   \   0000FD   78..         MOV     R0,#?V0 + 0
   \   0000FF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000102   75....       MOV     ?V0 + 0,#SerialApp_RspBuf & 0xff
   \   000105   75....       MOV     ?V0 + 1,#(SerialApp_RspBuf >> 8) & 0xff
   \   000108   78..         MOV     R0,#?V0 + 0
   \   00010A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010D   75..04       MOV     ?V0 + 0,#0x4
   \   000110   75..00       MOV     ?V0 + 1,#0x0
   \   000113   78..         MOV     R0,#?V0 + 0
   \   000115   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000118   75..02       MOV     ?V0 + 0,#0x2
   \   00011B   78..         MOV     R0,#?V0 + 0
   \   00011D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000120   7900         MOV     R1,#0x0
   \   000122   7C..         MOV     R4,#SerialApp_epDesc & 0xff
   \   000124   7D..         MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
   \   000126   7A..         MOV     R2,#SerialApp_RxAddr & 0xff
   \   000128   7B..         MOV     R3,#(SerialApp_RxAddr >> 8) & 0xff
   \   00012A   12....       LCALL   ??AF_DataRequest?relay
   \   00012D   7409         MOV     A,#0x9
   \   00012F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000132   E9           MOV     A,R1
   \   000133   600C         JZ      ??SerialApp_ProcessEvent_15
   \   000135                ; Setup parameters for call to function osal_set_event
   \   000135   7A02         MOV     R2,#0x2
   \   000137   7B00         MOV     R3,#0x0
   \   000139   90....       MOV     DPTR,#SerialApp_TaskID
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   F9           MOV     R1,A
   \   00013E   12....       LCALL   ??osal_set_event?relay
    390              return ( events ^ SERIALAPP_RESP_EVT );
   \                     ??SerialApp_ProcessEvent_15:
   \   000141   EE           MOV     A,R6
   \   000142   6402         XRL     A,#0x2
   \   000144   8094         SJMP    ??SerialApp_ProcessEvent_12
    391            }
    392            
    393            return ( 0 ); 
   \                     ??SerialApp_ProcessEvent_14:
   \   000146   7A00         MOV     R2,#0x0
   \   000148   7B00         MOV     R3,#0x0
   \                     ??SerialApp_ProcessEvent_11:
   \   00014A   740D         MOV     A,#0xd
   \   00014C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014F   7F04         MOV     R7,#0x4
   \   000151   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000154                REQUIRE T1CTL
   \   000154                REQUIRE _A_P0
    394          }
    395          
    396          /*********************************************************************
    397          * @fn      SerialApp_HandleKeys
    398          *
    399          * @brief   Handles all key events for this device.
    400          *
    401          * @param   shift - true if in shift/alt.
    402          * @param   keys  - bit field for key events.
    403          *
    404          * @return  none
    405          */
    406          void SerialApp_HandleKeys( uint8 shift, uint8 keys )
    407          { 
    408            if ( keys & HAL_KEY_SW_6 ) //按S1键启动或停止终端定时上报数据 
    409            {
    410          #ifdef WSN_SENSOR
    411              if(SendFlag == 0)
    412              {
    413                SendFlag = 1;
    414                HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    415                osal_start_timerEx( SerialApp_TaskID,
    416                                   SERIALAPP_SEND_PERIODIC_EVT,
    417                                   SERIALAPP_SEND_PERIODIC_TIMEOUT );
    418              }
    419              else
    420              {      
    421                SendFlag = 0;
    422                HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
    423                osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT);
    424              }
    425          #endif
    426            }
    427            
    428            if ( keys & HAL_KEY_SW_1 ) //按S2
    429            {
    430              //LAMP_PIN = ~LAMP_PIN;
    431            }
    432            
    433          }
    434          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    435          void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
   \                     SerialApp_ProcessMSGCmd:
    436          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 45
   \   000005   74D3         MOV     A,#-0x2d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    437            uint16 i, shortAddr;
    438            uint8 *pIeeeAddr; 
    439            uint8 delay;
    440            uint8 afRxData[30]={0};
   \   00000E   740F         MOV     A,#0xf
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   AC82         MOV     R4,DPL
   \   000015   AD83         MOV     R5,DPH
   \   000017   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001A   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   00001D   741E         MOV     A,#0x1e
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    441            uint8 wendu[3];
    442            uint8 shidu[3];
    443            memset(wendu, 0, 3);
   \   000022                ; Setup parameters for call to function memset
   \   000022   75..03       MOV     ?V0 + 0,#0x3
   \   000025   F5..         MOV     ?V0 + 1,A
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   7C00         MOV     R4,#0x0
   \   00002E   7D00         MOV     R5,#0x0
   \   000030   7405         MOV     A,#0x5
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   AA82         MOV     R2,DPL
   \   000037   AB83         MOV     R3,DPH
   \   000039   12....       LCALL   ??memset?relay
   \   00003C   7402         MOV     A,#0x2
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
    444            memset(shidu, 0, 3);
   \   000041                ; Setup parameters for call to function memset
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   7C00         MOV     R4,#0x0
   \   000048   7D00         MOV     R5,#0x0
   \   00004A   7402         MOV     A,#0x2
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   AA82         MOV     R2,DPL
   \   000051   AB83         MOV     R3,DPH
   \   000053   12....       LCALL   ??memset?relay
   \   000056   7402         MOV     A,#0x2
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
    445            char state0;
    446            char gas;
    447            char secustate;
    448            char str[9];
    449            osal_memset(str, 0, 9);
   \   00005B                ; Setup parameters for call to function osal_memset
   \   00005B   7C09         MOV     R4,#0x9
   \   00005D   7D00         MOV     R5,#0x0
   \   00005F   7900         MOV     R1,#0x0
   \   000061   7406         MOV     A,#0x6
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   12....       LCALL   ??osal_memset?relay
    450            //查询单个终端上所有传感器的数据 3A 00 01 02 39 23  响应：3A 00 01 02 00 00 00 00 xor 23
    451            switch ( pkt->clusterId )
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F5..         MOV     ?V0 + 0,A
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F5..         MOV     ?V0 + 1,A
   \   00007C   78..         MOV     R0,#?V0 + 0
   \   00007E   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SerialApp_ProcessMSGCmd>_0`:
   \   000081   0100         DW        1
   \   000083   01           DB        1
   \   000084   ....         DW        ??SerialApp_ProcessMSGCmd_0
   \   000086   ....         DW        ??SerialApp_ProcessMSGCmd_1
   \   000088   ....         DW        ??SerialApp_ProcessMSGCmd_2
    452            {
    453              // A message with a serial data block to be transmitted on the serial port.
    454            case SERIALAPP_CLUSTERID:
    455              osal_memcpy(afRxData, pkt->cmd.Data, pkt->cmd.DataLength);
   \                     ??SerialApp_ProcessMSGCmd_1:
   \   00008A                ; Setup parameters for call to function osal_memcpy
   \   00008A   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00008D   F5..         MOV     ?V0 + 0,A
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F5..         MOV     ?V0 + 1,A
   \   000093   75..00       MOV     ?V0 + 2,#0x0
   \   000096   78..         MOV     R0,#?V0 + 0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009B   EE           MOV     A,R6
   \   00009C   2420         ADD     A,#0x20
   \   00009E   F582         MOV     DPL,A
   \   0000A0   EF           MOV     A,R7
   \   0000A1   3400         ADDC    A,#0x0
   \   0000A3   F583         MOV     DPH,A
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   FC           MOV     R4,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   FD           MOV     R5,A
   \   0000AA   7412         MOV     A,#0x12
   \   0000AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AF   AA82         MOV     R2,DPL
   \   0000B1   AB83         MOV     R3,DPH
   \   0000B3   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000B6   12....       LCALL   ?DEALLOC_XSTACK8
    456              switch(afRxData[0]) //简单协议命令字解析
   \   0000B9   740F         MOV     A,#0xf
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   643A         XRL     A,#0x3a
   \   0000C1   6003         JZ      $+5
   \   0000C3   02....       LJMP    ??SerialApp_ProcessMSGCmd_0 & 0xFFFF
    457              {
    458          #if defined(ZDO_COORDINATOR)
    459              case 0x3B:  //收到终端无线发过来的短地址和IEEE地址,通过串口输出显示      
    460                shortAddr=(afRxData[1]<<8)|afRxData[2];
    461                pIeeeAddr = &afRxData[3];
    462          #if UART_DEBUG
    463                PrintAddrInfo(shortAddr, pIeeeAddr + Z_EXTADDR_LEN - 1);
    464          #endif   
    465                break;
    466              case 0x3A:	
    467                if(afRxData[3] == 0x02) //收到终端传过来的传感器数据并保存
   \   0000C6   7412         MOV     A,#0x12
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   6402         XRL     A,#0x2
   \   0000CE   6003         JZ      $+5
   \   0000D0   02....       LJMP    ??SerialApp_ProcessMSGCmd_0 & 0xFFFF
    468                {  
    469                  NodeData[afRxData[2]-1][0] = afRxData[4];
   \   0000D3   7411         MOV     A,#0x11
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   75F006       MOV     B,#0x6
   \   0000DC   A4           MUL     AB
   \   0000DD   F8           MOV     R0,A
   \   0000DE   A9F0         MOV     R1,B
   \   0000E0   74..         MOV     A,#NodeData & 0xff
   \   0000E2   28           ADD     A,R0
   \   0000E3   F8           MOV     R0,A
   \   0000E4   74..         MOV     A,#(NodeData >> 8) & 0xff
   \   0000E6   39           ADDC    A,R1
   \   0000E7   F9           MOV     R1,A
   \   0000E8   7413         MOV     A,#0x13
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   C0E0         PUSH    A
   \   0000F0   E8           MOV     A,R0
   \   0000F1   24FA         ADD     A,#-0x6
   \   0000F3   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000F6   D0E0         POP     A
   \   0000F8   F0           MOVX    @DPTR,A
    470                  NodeData[afRxData[2]-1][1] = afRxData[5];
   \   0000F9   7414         MOV     A,#0x14
   \   0000FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   C0E0         PUSH    A
   \   000101   E8           MOV     A,R0
   \   000102   24FB         ADD     A,#-0x5
   \   000104   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000107   D0E0         POP     A
   \   000109   F0           MOVX    @DPTR,A
    471                  NodeData[afRxData[2]-1][2] = afRxData[6];
   \   00010A   7415         MOV     A,#0x15
   \   00010C   12....       LCALL   ?XSTACK_DISP0_8
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   C0E0         PUSH    A
   \   000112   E8           MOV     A,R0
   \   000113   24FC         ADD     A,#-0x4
   \   000115   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000118   D0E0         POP     A
   \   00011A   F0           MOVX    @DPTR,A
    472                  NodeData[afRxData[2]-1][3] = afRxData[7];
   \   00011B   7416         MOV     A,#0x16
   \   00011D   12....       LCALL   ?XSTACK_DISP0_8
   \   000120   E0           MOVX    A,@DPTR
   \   000121   F5..         MOV     ?V0 + 0,A
   \   000123   E8           MOV     A,R0
   \   000124   24FD         ADD     A,#-0x3
   \   000126   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000129   E5..         MOV     A,?V0 + 0
   \   00012B   F0           MOVX    @DPTR,A
    473                  NodeData[afRxData[2]-1][4] = afRxData[9];
   \   00012C   7418         MOV     A,#0x18
   \   00012E   12....       LCALL   ?XSTACK_DISP0_8
   \   000131   E0           MOVX    A,@DPTR
   \   000132   C0E0         PUSH    A
   \   000134   E8           MOV     A,R0
   \   000135   24FE         ADD     A,#-0x2
   \   000137   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00013A   D0E0         POP     A
   \   00013C   F0           MOVX    @DPTR,A
    474                  NodeData[afRxData[2]-1][5] = 0x00;
   \   00013D   E8           MOV     A,R0
   \   00013E   24FF         ADD     A,#-0x1
   \   000140   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000143   E4           CLR     A
   \   000144   F0           MOVX    @DPTR,A
    475                  //HalUARTWrite (UART0, NodeData[afRxData[3]-1], 4);
    476                  //state=afRxData[7];
    477                  state0=afRxData[8];
    478                  sprintf(str, "BRI:%03d ", afRxData[7]);
   \   000145                ; Setup parameters for call to function sprintf
   \   000145   F5..         MOV     ?V0 + 1,A
   \   000147   78..         MOV     R0,#?V0 + 0
   \   000149   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014C   7C..         MOV     R4,#`?<Constant "BRI:%03d ">` & 0xff
   \   00014E   7D..         MOV     R5,#(`?<Constant "BRI:%03d ">` >> 8) & 0xff
   \   000150   7408         MOV     A,#0x8
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   AA82         MOV     R2,DPL
   \   000157   AB83         MOV     R3,DPH
   \   000159   12....       LCALL   ??sprintf?relay
   \   00015C   7402         MOV     A,#0x2
   \   00015E   12....       LCALL   ?DEALLOC_XSTACK8
    479                  gas=afRxData[6];
   \   000161   7415         MOV     A,#0x15
   \   000163   12....       LCALL   ?XSTACK_DISP0_8
   \   000166   E0           MOVX    A,@DPTR
   \   000167   FE           MOV     R6,A
    480                  secustate=afRxData[9];
   \   000168   7418         MOV     A,#0x18
   \   00016A   12....       LCALL   ?XSTACK_DISP0_8
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   FF           MOV     R7,A
    481                  wendu[0]=afRxData[4]/10+0x30;
   \   00016F   7413         MOV     A,#0x13
   \   000171   12....       LCALL   ?XSTACK_DISP0_8
   \   000174   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000177   C0E0         PUSH    A
   \   000179   7403         MOV     A,#0x3
   \   00017B   12....       LCALL   ?XSTACK_DISP0_8
   \   00017E   D0E0         POP     A
   \   000180   12....       LCALL   ?Subroutine1 & 0xFFFF
    482                  wendu[1]=afRxData[4]%10+0x30;
   \                     ??CrossCallReturnLabel_0:
   \   000183   C0E0         PUSH    A
   \   000185   7404         MOV     A,#0x4
   \   000187   12....       LCALL   ?XSTACK_DISP0_8
   \   00018A   D0E0         POP     A
   \   00018C   F0           MOVX    @DPTR,A
    483                  shidu[0]=afRxData[5]/10+0x30;
   \   00018D   7414         MOV     A,#0x14
   \   00018F   12....       LCALL   ?XSTACK_DISP0_8
   \   000192   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000195   85..82       MOV     DPL,?XSP + 0
   \   000198   85..83       MOV     DPH,?XSP + 1
   \   00019B   12....       LCALL   ?Subroutine1 & 0xFFFF
    484                  shidu[1]=afRxData[5]%10+0x30;
   \                     ??CrossCallReturnLabel_1:
   \   00019E   C0E0         PUSH    A
   \   0001A0   7401         MOV     A,#0x1
   \   0001A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A5   D0E0         POP     A
   \   0001A7   F0           MOVX    @DPTR,A
    485                  //HalUARTWrite (UART0, NodeData[afRxData[2]-1], 4);
    486                  LCD_write_EN_string(45,80,wendu);
   \   0001A8                ; Setup parameters for call to function LCD_write_EN_string
   \   0001A8   7403         MOV     A,#0x3
   \   0001AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AD   AC82         MOV     R4,DPL
   \   0001AF   AD83         MOV     R5,DPH
   \   0001B1   7A50         MOV     R2,#0x50
   \   0001B3   792D         MOV     R1,#0x2d
   \   0001B5   12....       LCALL   ??LCD_write_EN_string?relay
    487                  LCD_write_EN_string(45,95,shidu);
   \   0001B8                ; Setup parameters for call to function LCD_write_EN_string
   \   0001B8   85..82       MOV     DPL,?XSP + 0
   \   0001BB   85..83       MOV     DPH,?XSP + 1
   \   0001BE   AC82         MOV     R4,DPL
   \   0001C0   AD83         MOV     R5,DPH
   \   0001C2   7A5F         MOV     R2,#0x5f
   \   0001C4   792D         MOV     R1,#0x2d
   \   0001C6   12....       LCALL   ??LCD_write_EN_string?relay
    488                  LCD_write_CN_string(60,80,"℃");
   \   0001C9                ; Setup parameters for call to function LCD_write_CN_string
   \   0001C9   7C..         MOV     R4,#`?<Constant "\\241\\346">` & 0xff
   \   0001CB   7D..         MOV     R5,#(`?<Constant "\\241\\346">` >> 8) & 0xff
   \   0001CD   7A50         MOV     R2,#0x50
   \   0001CF   793C         MOV     R1,#0x3c
   \   0001D1   12....       LCALL   ??LCD_write_CN_string?relay
    489                  LCD_write_CN_string(60,95,"％");
   \   0001D4                ; Setup parameters for call to function LCD_write_CN_string
   \   0001D4   7C..         MOV     R4,#`?<Constant "\\243\\245">` & 0xff
   \   0001D6   7D..         MOV     R5,#(`?<Constant "\\243\\245">` >> 8) & 0xff
   \   0001D8   7A5F         MOV     R2,#0x5f
   \   0001DA   793C         MOV     R1,#0x3c
   \   0001DC   12....       LCALL   ??LCD_write_CN_string?relay
    490                  LCD_write_EN_string(70,110,str);
                                                    ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"

    uint16 i, shortAddr;
           ^
"F:\BaiduYunDownload\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c",437  Warning[Pe177]: 
          variable "i" was declared but never referenced

    uint16 i, shortAddr;
              ^
"F:\BaiduYunDownload\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c",437  Warning[Pe550]: 
          variable "shortAddr" was set but never used

    uint8 *pIeeeAddr; 
           ^
"F:\BaiduYunDownload\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c",438  Warning[Pe550]: 
          variable "pIeeeAddr" was set but never used
   \   0001DF                ; Setup parameters for call to function LCD_write_EN_string
   \   0001DF   7406         MOV     A,#0x6
   \   0001E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E4   AC82         MOV     R4,DPL
   \   0001E6   AD83         MOV     R5,DPH
   \   0001E8   7A6E         MOV     R2,#0x6e
   \   0001EA   7946         MOV     R1,#0x46
   \   0001EC   12....       LCALL   ??LCD_write_EN_string?relay
    491                  if(state0==0x30)
    492                  {
    493                    //LAMP_PIN =0;
    494                  }
    495                  else if(state0==0x31)
    496                  {
    497                    //LAMP_PIN =1;
    498                  }
    499                  if(gas==0x00)
   \   0001EF   EE           MOV     A,R6
   \   0001F0   7006         JNZ     ??SerialApp_ProcessMSGCmd_3
    500                  {
    501                    LCD_write_CN_string(9,110,"气体异常");
   \   0001F2                ; Setup parameters for call to function LCD_write_CN_string
   \   0001F2   7C..         MOV     R4,#`?<Constant "\\306\\370\\314\\345\\322\\354\\263\\243">` & 0xff
   \   0001F4   7D..         MOV     R5,#(`?<Constant "\\306\\370\\314\\345\\322\\354\\263\\243">` >> 8) & 0xff
   \   0001F6   8004         SJMP    ??SerialApp_ProcessMSGCmd_4
    502                  }
    503                  else
    504                  {
    505                    LCD_write_CN_string(9,110,"气体正常");
   \                     ??SerialApp_ProcessMSGCmd_3:
   \   0001F8                ; Setup parameters for call to function LCD_write_CN_string
   \   0001F8   7C..         MOV     R4,#`?<Constant "\\306\\370\\314\\345\\325\\375\\263\\243">` & 0xff
   \   0001FA   7D..         MOV     R5,#(`?<Constant "\\306\\370\\314\\345\\325\\375\\263\\243">` >> 8) & 0xff
   \                     ??SerialApp_ProcessMSGCmd_4:
   \   0001FC   7A6E         MOV     R2,#0x6e
   \   0001FE   7909         MOV     R1,#0x9
   \   000200   12....       LCALL   ??LCD_write_CN_string?relay
    506                  }
    507                  if(secustate==0x00)
   \   000203   EF           MOV     A,R7
   \   000204   700D         JNZ     ??SerialApp_ProcessMSGCmd_5
    508                  {
    509                    LCD_write_EN_string(70,80,"security");
   \   000206                ; Setup parameters for call to function LCD_write_EN_string
   \   000206   7C..         MOV     R4,#`?<Constant "security">` & 0xff
   \   000208   7D..         MOV     R5,#(`?<Constant "security">` >> 8) & 0xff
   \                     ??SerialApp_ProcessMSGCmd_6:
   \   00020A   7A50         MOV     R2,#0x50
   \   00020C   7946         MOV     R1,#0x46
   \   00020E   12....       LCALL   ??LCD_write_EN_string?relay
   \   000211   8053         SJMP    ??SerialApp_ProcessMSGCmd_0
    510                  }
    511                  else
    512                  {
    513                    LCD_write_EN_string(70,80,"insecurity");
   \                     ??SerialApp_ProcessMSGCmd_5:
   \   000213                ; Setup parameters for call to function LCD_write_EN_string
   \   000213   7C..         MOV     R4,#`?<Constant "insecurity">` & 0xff
   \   000215   7D..         MOV     R5,#(`?<Constant "insecurity">` >> 8) & 0xff
   \   000217   80F1         SJMP    ??SerialApp_ProcessMSGCmd_6
    514                  }
    515                }
    516                
    517          #if UART_DEBUG
    518                HalUARTWrite (UART0, NodeData[afRxData[3]-1], 4); //调试时通过串口输出
    519                HalUARTWrite (UART0, "\n", 1);
    520          #endif            
    521                break;
    522          #else  
    523              case 0x3A:  //开关灯设备          
    524                if(afRxData[3] == 0x0A || afRxData[3] == 0x0B || afRxData[3] == 0x0C) //控制终端          
    525                {  
    526                  if(EndDeviceID == afRxData[2] || afRxData[2]==0xFF)
    527                  {
    528                    if(afRxData[4] == 0)
    529                    {
    530                      //LAMP_PIN = 0;
    531                      HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
    532                    }
    533                    else
    534                    {
    535                      //LAMP_PIN = 1;
    536                      HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
    537                    }
    538                  }
    539                  break;
    540                }	
    541                else if(afRxData[3] == 0x07)      //蜂鸣器 功能码为07
    542                {
    543                  if(EndDeviceID == afRxData[2] || afRxData[2] == 0xFF)  //蜂鸣器 EndDeviceID为05
    544                  {
    545                    if(afRxData[4] == 0)
    546                    {
    547                      TIMER1_STOP();               //收到协调发出的蜂鸣器不响的指令
    548                      HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
    549                    }
    550                    else
    551                    {
    552                      TIMER1_RUN();               //收到协调发出的蜂鸣器响的指令
    553                      HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
    554                    }
    555                  } 
    556                }
    557                else if(afRxData[3] == 0x08)    //电机 功能码为08
    558                {
    559                  if(EndDeviceID == afRxData[2] || afRxData[2] == 0xFF)//电机 EndDeviceID为06
    560                  {
    561                    ucEdDir = afRxData[4];      //保存旋转方向给调速用
    562                    MotorStop();                //停止转动
    563                    if(afRxData[4] == 0x02)   
    564                    {
    565                      for(i=0;i<2000;i++)
    566                        MotorCW();              //顺时针转动
    567                    }
    568                    else if(afRxData[4] == 0x01)//左转标记 
    569                    {
    570                      for(i=0;i<2000;i++)
    571                        MotorCCW();             //逆时针转动
    572                    }
    573                  }
    574                }
    575                   else if(afRxData[3] == 0x09)      //蜂鸣器 功能码为07
    576                {
    577                  if(EndDeviceID == afRxData[2] || afRxData[2] == 0xFF)  //蜂鸣器 EndDeviceID为05
    578                  {
    579                    if(afRxData[4] == 0)
    580                    {
    581                      LAMP_PIN=1;
    582                    }
    583                    else
    584                    {
    585                      LAMP_PIN=0;
    586                    }
    587                  } 
    588                }
    589          #endif
    590                default :
    591                  break;
    592                }
    593                break;
    594                // A response to a received serial data block.
    595              case SERIALAPP_CLUSTERID2:
    596                if ((pkt->cmd.Data[1] == SerialApp_TxSeq) &&
    597                    ((pkt->cmd.Data[0] == OTA_SUCCESS) || (pkt->cmd.Data[0] == OTA_DUP_MSG)))
   \                     ??SerialApp_ProcessMSGCmd_2:
   \   000219   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00021C   E0           MOVX    A,@DPTR
   \   00021D   F8           MOV     R0,A
   \   00021E   90....       MOV     DPTR,#SerialApp_TxSeq
   \   000221   E0           MOVX    A,@DPTR
   \   000222   68           XRL     A,R0
   \   000223   702D         JNZ     ??SerialApp_ProcessMSGCmd_7
   \   000225   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000228   F8           MOV     R0,A
   \   000229   A3           INC     DPTR
   \   00022A   E0           MOVX    A,@DPTR
   \   00022B   F583         MOV     DPH,A
   \   00022D   8882         MOV     DPL,R0
   \   00022F   E0           MOVX    A,@DPTR
   \   000230   600E         JZ      ??SerialApp_ProcessMSGCmd_8
   \   000232   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000235   A3           INC     DPTR
   \   000236   E0           MOVX    A,@DPTR
   \   000237   F583         MOV     DPH,A
   \   000239   8882         MOV     DPL,R0
   \   00023B   E0           MOVX    A,@DPTR
   \   00023C   6401         XRL     A,#0x1
   \   00023E   7012         JNZ     ??SerialApp_ProcessMSGCmd_7
    598                {
    599                  SerialApp_TxLen = 0;
   \                     ??SerialApp_ProcessMSGCmd_8:
   \   000240   90....       MOV     DPTR,#SerialApp_TxLen
   \   000243   E4           CLR     A
   \   000244   F0           MOVX    @DPTR,A
    600                  osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_EVT);
   \   000245                ; Setup parameters for call to function osal_stop_timerEx
   \   000245   7A01         MOV     R2,#0x1
   \   000247   FB           MOV     R3,A
   \   000248   90....       MOV     DPTR,#SerialApp_TaskID
   \   00024B   E0           MOVX    A,@DPTR
   \   00024C   F9           MOV     R1,A
   \   00024D   12....       LCALL   ??osal_stop_timerEx?relay
   \   000250   8014         SJMP    ??SerialApp_ProcessMSGCmd_0
    601                }
    602                else
    603                {
    604                  // Re-start timeout according to delay sent from other device.
    605                  delay = BUILD_UINT16( pkt->cmd.Data[2], pkt->cmd.Data[3] );
    606                  osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_EVT, delay );
   \                     ??SerialApp_ProcessMSGCmd_7:
   \   000252                ; Setup parameters for call to function osal_start_timerEx
   \   000252   12....       LCALL   ?Subroutine2 & 0xFFFF
    607                }
    608                break;
    609                
    610              default:
    611                break;
    612              }
   \                     ??CrossCallReturnLabel_3:
   \   000255   A3           INC     DPTR
   \   000256   E0           MOVX    A,@DPTR
   \   000257   FC           MOV     R4,A
   \   000258   7D00         MOV     R5,#0x0
   \   00025A   7A01         MOV     R2,#0x1
   \   00025C   7B00         MOV     R3,#0x0
   \   00025E   90....       MOV     DPTR,#SerialApp_TaskID
   \   000261   E0           MOVX    A,@DPTR
   \   000262   F9           MOV     R1,A
   \   000263   12....       LCALL   ??osal_start_timerEx?relay
    613            }
   \                     ??SerialApp_ProcessMSGCmd_0:
   \   000266   742D         MOV     A,#0x2d
   \   000268   12....       LCALL   ?DEALLOC_XSTACK8
   \   00026B   7F03         MOV     R7,#0x3
   \   00026D   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F582         MOV     DPL,A
   \   000002   E9           MOV     A,R1
   \   000003   34FF         ADDC    A,#-0x1
   \   000005   F583         MOV     DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   75F00A       MOV     B,#0xa
   \   000005   84           DIV     AB
   \   000006   2430         ADD     A,#0x30
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F583         MOV     DPH,A
   \   000008   8882         MOV     DPL,R0
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E8           MOV     A,R0
   \   000002   75F00A       MOV     B,#0xa
   \   000005   84           DIV     AB
   \   000006   E5F0         MOV     A,B
   \   000008   2430         ADD     A,#0x30
   \   00000A   22           RET
    614            

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    615          uint8 SendData(uint8 addr, uint8 FC)
   \                     SendData:
    616          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
    617            uint8 ret, i, index=4;
   \   000005   75..04       MOV     ?V0 + 4,#0x4
    618            
    619            TxBuffer[0] = 0x3A;
   \   000008   90....       MOV     DPTR,#TxBuffer
   \   00000B   743A         MOV     A,#0x3a
   \   00000D   F0           MOVX    @DPTR,A
    620            TxBuffer[1] = 0x00;
   \   00000E   A3           INC     DPTR
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
    621            TxBuffer[2] = addr;
   \   000011   E9           MOV     A,R1
   \   000012   A3           INC     DPTR
   \   000013   F0           MOVX    @DPTR,A
    622            TxBuffer[3] = FC;
   \   000014   EA           MOV     A,R2
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
    623            
    624            switch(FC)
   \   000017   14           DEC     A
   \   000018   6006         JZ      ??SendData_0
   \   00001A   14           DEC     A
   \   00001B   607F         JZ      ??SendData_1
   \   00001D   02....       LJMP    ??SendData_2 & 0xFFFF
    625            {
    626            case 0x01: //查询所有终端传感器的数据
    627              for (i=0; i<MAX_NODE; i++)
   \                     ??SendData_0:
   \   000020   7E00         MOV     R6,#0x0
    628              {
    629                osal_memcpy(&TxBuffer[index], NodeData[i], 5);
   \                     ??SendData_3:
   \   000022                ; Setup parameters for call to function osal_memcpy
   \   000022   EE           MOV     A,R6
   \   000023   75F006       MOV     B,#0x6
   \   000026   A4           MUL     AB
   \   000027   F8           MOV     R0,A
   \   000028   A9F0         MOV     R1,B
   \   00002A   74..         MOV     A,#NodeData & 0xff
   \   00002C   28           ADD     A,R0
   \   00002D   F5..         MOV     ?V0 + 0,A
   \   00002F   74..         MOV     A,#(NodeData >> 8) & 0xff
   \   000031   39           ADDC    A,R1
   \   000032   85....       MOV     ?V0 + 8,?V0 + 0
   \   000035   F5..         MOV     ?V0 + 9,A
   \   000037   75..00       MOV     ?V0 + 10,#0x0
   \   00003A   78..         MOV     R0,#?V0 + 8
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003F   7C05         MOV     R4,#0x5
   \   000041   7D00         MOV     R5,#0x0
   \   000043   85....       MOV     ?V0 + 0,?V0 + 4
   \   000046   74..         MOV     A,#TxBuffer & 0xff
   \   000048   25..         ADD     A,?V0 + 0
   \   00004A   FA           MOV     R2,A
   \   00004B   74..         MOV     A,#(TxBuffer >> 8) & 0xff
   \   00004D   3400         ADDC    A,#0x0
   \   00004F   FB           MOV     R3,A
   \   000050   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
    630                index += 5;
   \   000056   7405         MOV     A,#0x5
   \   000058   25..         ADD     A,?V0 + 4
   \   00005A   F5..         MOV     ?V0 + 4,A
    631              }
   \   00005C   0E           INC     R6
   \   00005D   EE           MOV     A,R6
   \   00005E   C3           CLR     C
   \   00005F   9404         SUBB    A,#0x4
   \   000061   40BF         JC      ??SendData_3
    632              TxBuffer[index] = XorCheckSum(TxBuffer, index);
   \   000063   85..82       MOV     DPL,?V0 + 4
   \   000066   8582..       MOV     ?V0 + 0,DPL
   \   000069   74..         MOV     A,#TxBuffer & 0xff
   \   00006B   25..         ADD     A,?V0 + 0
   \   00006D   FE           MOV     R6,A
   \   00006E   74..         MOV     A,#(TxBuffer >> 8) & 0xff
   \   000070   3400         ADDC    A,#0x0
   \   000072   FF           MOV     R7,A
   \   000073                ; Setup parameters for call to function XorCheckSum
   \   000073   A9..         MOV     R1,?V0 + 4
   \   000075   7A..         MOV     R2,#TxBuffer & 0xff
   \   000077   7B..         MOV     R3,#(TxBuffer >> 8) & 0xff
   \   000079   12....       LCALL   ??XorCheckSum?relay
   \   00007C   E9           MOV     A,R1
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   F0           MOVX    @DPTR,A
    633              TxBuffer[index+1] = 0x23; 
   \   000082   A3           INC     DPTR
   \   000083   7423         MOV     A,#0x23
   \   000085   F0           MOVX    @DPTR,A
    634              
    635              HalUARTWrite(UART0, TxBuffer, index+2);
   \   000086                ; Setup parameters for call to function HalUARTWrite
   \   000086   E5..         MOV     A,?V0 + 0
   \   000088   2402         ADD     A,#0x2
   \   00008A   FC           MOV     R4,A
   \   00008B   E4           CLR     A
   \   00008C   3400         ADDC    A,#0x0
   \   00008E   FD           MOV     R5,A
   \                     ??SendData_4:
   \   00008F   7A..         MOV     R2,#TxBuffer & 0xff
   \   000091   7B..         MOV     R3,#(TxBuffer >> 8) & 0xff
   \   000093   7900         MOV     R1,#0x0
   \   000095   12....       LCALL   ??HalUARTWrite?relay
    636              ret = 1;
   \   000098   7901         MOV     R1,#0x1
    637              break;
   \   00009A   8045         SJMP    ??SendData_5
    638            case 0x02: //查询单个终端上所有传感器的数据
    639              osal_memcpy(&TxBuffer[index], NodeData[addr-1], 4);
   \                     ??SendData_1:
   \   00009C                ; Setup parameters for call to function osal_memcpy
   \   00009C   E9           MOV     A,R1
   \   00009D   75F006       MOV     B,#0x6
   \   0000A0   A4           MUL     AB
   \   0000A1   F8           MOV     R0,A
   \   0000A2   A9F0         MOV     R1,B
   \   0000A4   74..         MOV     A,#(NodeData + 250) & 0xff
   \   0000A6   28           ADD     A,R0
   \   0000A7   F5..         MOV     ?V0 + 0,A
   \   0000A9   74..         MOV     A,#((NodeData - 6) >> 8) & 0xff
   \   0000AB   39           ADDC    A,R1
   \   0000AC   85....       MOV     ?V0 + 4,?V0 + 0
   \   0000AF   F5..         MOV     ?V0 + 5,A
   \   0000B1   75..00       MOV     ?V0 + 6,#0x0
   \   0000B4   78..         MOV     R0,#?V0 + 4
   \   0000B6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B9   7C04         MOV     R4,#0x4
   \   0000BB   7D00         MOV     R5,#0x0
   \   0000BD   7A..         MOV     R2,#(TxBuffer + 4) & 0xff
   \   0000BF   7B..         MOV     R3,#((TxBuffer + 4) >> 8) & 0xff
   \   0000C1   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000C4   12....       LCALL   ?DEALLOC_XSTACK8
    640              index += 4;
    641              TxBuffer[index] = XorCheckSum(TxBuffer, index);
   \   0000C7                ; Setup parameters for call to function XorCheckSum
   \   0000C7   7908         MOV     R1,#0x8
   \   0000C9   7A..         MOV     R2,#TxBuffer & 0xff
   \   0000CB   7B..         MOV     R3,#(TxBuffer >> 8) & 0xff
   \   0000CD   12....       LCALL   ??XorCheckSum?relay
   \   0000D0   E9           MOV     A,R1
   \   0000D1   90....       MOV     DPTR,#TxBuffer + 8
   \   0000D4   F0           MOVX    @DPTR,A
    642              TxBuffer[index+1] = 0x23; 
   \   0000D5   A3           INC     DPTR
   \   0000D6   7423         MOV     A,#0x23
   \   0000D8   F0           MOVX    @DPTR,A
    643              HalUARTWrite(UART0, TxBuffer, index+2);		
   \   0000D9                ; Setup parameters for call to function HalUARTWrite
   \   0000D9   7C0A         MOV     R4,#0xa
   \   0000DB   7D00         MOV     R5,#0x0
   \   0000DD   80B0         SJMP    ??SendData_4
    644              ret = 1;
    645              break;   
    646            default:
    647              ret = 0;
   \                     ??SendData_2:
   \   0000DF   7900         MOV     R1,#0x0
    648              break;
    649            }
    650            
    651            return ret;
   \                     ??SendData_5:
   \   0000E1   7F0B         MOV     R7,#0xb
   \   0000E3   02....       LJMP    ?BANKED_LEAVE_XDATA
    652          }
    653          
    654          /*********************************************************************
    655          * @fn      SerialApp_Send
    656          *
    657          * @brief   Send data OTA.
    658          *
    659          * @param   none
    660          *  3A000507013923    3A 00 01 01 3A 23
    661          * @return  none
    662          */
    663          #pragma optimize=none  

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    664          static void SerialApp_Send(void)
   \                     SerialApp_Send:
    665          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    666            uint8 len=0, addr, FC;
   \   000005   7F00         MOV     R7,#0x0
    667            uint8 checksum=0;
   \   000007   75..00       MOV     ?V0 + 0,#0x0
    668          
    669            if (!SerialApp_TxLen && 
    670                (SerialApp_TxLen = HalUARTRead(UART0, SerialApp_TxBuf, SERIAL_APP_TX_MAX)))
   \   00000A   90....       MOV     DPTR,#SerialApp_TxLen
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6003         JZ      $+5
   \   000010   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
   \   000013                ; Setup parameters for call to function HalUARTRead
   \   000013   7C14         MOV     R4,#0x14
   \   000015   7D00         MOV     R5,#0x0
   \   000017   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   000019   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   12....       LCALL   ??HalUARTRead?relay
   \   000020   EA           MOV     A,R2
   \   000021   90....       MOV     DPTR,#SerialApp_TxLen
   \   000024   F0           MOVX    @DPTR,A
   \   000025   7003         JNZ     $+5
   \   000027   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
    671            {
    672              if (SerialApp_TxLen)
   \   00002A   90....       MOV     DPTR,#SerialApp_TxLen
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   7003         JNZ     $+5
   \   000030   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
    673              {
    674                SerialApp_TxLen = 0;
   \   000033   90....       MOV     DPTR,#SerialApp_TxLen
   \   000036   7400         MOV     A,#0x0
   \   000038   F0           MOVX    @DPTR,A
    675                if(SerialApp_TxBuf[0] == 0x3A)
   \   000039   90....       MOV     DPTR,#SerialApp_TxBuf
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   643A         XRL     A,#0x3a
   \   00003F   6003         JZ      $+5
   \   000041   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
    676                {
    677                  addr = SerialApp_TxBuf[2];
   \   000044   90....       MOV     DPTR,#SerialApp_TxBuf + 2
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F5..         MOV     ?V0 + 1,A
    678                  FC = SerialApp_TxBuf[3];
   \   00004A   90....       MOV     DPTR,#SerialApp_TxBuf + 3
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FE           MOV     R6,A
    679                  len = GetDataLen(FC); 
   \   00004F                ; Setup parameters for call to function GetDataLen
   \   00004F   EE           MOV     A,R6
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   ??GetDataLen?relay
   \   000054   E9           MOV     A,R1
   \   000055   FF           MOV     R7,A
    680                  len += 4;
   \   000056   7404         MOV     A,#0x4
   \   000058   2F           ADD     A,R7
   \   000059   FF           MOV     R7,A
    681                  checksum = XorCheckSum(SerialApp_TxBuf, len);
   \   00005A                ; Setup parameters for call to function XorCheckSum
   \   00005A   EF           MOV     A,R7
   \   00005B   F9           MOV     R1,A
   \   00005C   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   00005E   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   000060   12....       LCALL   ??XorCheckSum?relay
   \   000063   E9           MOV     A,R1
   \   000064   F5..         MOV     ?V0 + 0,A
    682          
    683                  //接收数据正确返回相应数据
    684                  if(checksum == SerialApp_TxBuf[len] && SerialApp_TxBuf[len+1] == 0x23)
   \   000066   8F..         MOV     ?V0 + 2,R7
   \   000068   75..00       MOV     ?V0 + 3,#0x0
   \   00006B   74..         MOV     A,#SerialApp_TxBuf & 0xff
   \   00006D   25..         ADD     A,?V0 + 2
   \   00006F   F582         MOV     DPL,A
   \   000071   74..         MOV     A,#(SerialApp_TxBuf >> 8) & 0xff
   \   000073   35..         ADDC    A,?V0 + 3
   \   000075   F583         MOV     DPH,A
   \   000077   E0           MOVX    A,@DPTR
   \   000078   65..         XRL     A,?V0 + 0
   \   00007A   6003         JZ      $+5
   \   00007C   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
   \   00007F   8F..         MOV     ?V0 + 2,R7
   \   000081   75..00       MOV     ?V0 + 3,#0x0
   \   000084   74..         MOV     A,#(SerialApp_TxBuf + 1) & 0xff
   \   000086   25..         ADD     A,?V0 + 2
   \   000088   F582         MOV     DPL,A
   \   00008A   74..         MOV     A,#((SerialApp_TxBuf + 1) >> 8) & 0xff
   \   00008C   35..         ADDC    A,?V0 + 3
   \   00008E   F583         MOV     DPH,A
   \   000090   E0           MOVX    A,@DPTR
   \   000091   6423         XRL     A,#0x23
   \   000093   6003         JZ      $+5
   \   000095   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
    685                  {
    686                    if(FC == 7 || FC == 8 || FC == 0x0A || FC == 0x0B || FC == 0x0C || FC == 9) //控制终端
   \   000098   7407         MOV     A,#0x7
   \   00009A   6E           XRL     A,R6
   \   00009B   601C         JZ      ??SerialApp_Send_1
   \   00009D   7408         MOV     A,#0x8
   \   00009F   6E           XRL     A,R6
   \   0000A0   6017         JZ      ??SerialApp_Send_1
   \   0000A2   740A         MOV     A,#0xa
   \   0000A4   6E           XRL     A,R6
   \   0000A5   6012         JZ      ??SerialApp_Send_1
   \   0000A7   740B         MOV     A,#0xb
   \   0000A9   6E           XRL     A,R6
   \   0000AA   600D         JZ      ??SerialApp_Send_1
   \   0000AC   740C         MOV     A,#0xc
   \   0000AE   6E           XRL     A,R6
   \   0000AF   6008         JZ      ??SerialApp_Send_1
   \   0000B1   7409         MOV     A,#0x9
   \   0000B3   6E           XRL     A,R6
   \   0000B4   6003         JZ      $+5
   \   0000B6   02....       LJMP    ??SerialApp_Send_2 & 0xFFFF
    687                    {                            
    688                      if (afStatus_SUCCESS == AF_DataRequest(&Broadcast_DstAddr,
    689                                                             (endPointDesc_t *)&SerialApp_epDesc,
    690                                                             SERIALAPP_CLUSTERID,
    691                                                             len+2, SerialApp_TxBuf,
    692                                                             &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
   \                     ??SerialApp_Send_1:
   \   0000B9                ; Setup parameters for call to function AF_DataRequest
   \   0000B9   75..1E       MOV     ?V0 + 2,#0x1e
   \   0000BC   78..         MOV     R0,#?V0 + 2
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C1   75....       MOV     ?V0 + 2,#SerialApp_MsgID & 0xff
   \   0000C4   75....       MOV     ?V0 + 3,#(SerialApp_MsgID >> 8) & 0xff
   \   0000C7   78..         MOV     R0,#?V0 + 2
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CC   75....       MOV     ?V0 + 2,#SerialApp_TxBuf & 0xff
   \   0000CF   75....       MOV     ?V0 + 3,#(SerialApp_TxBuf >> 8) & 0xff
   \   0000D2   78..         MOV     R0,#?V0 + 2
   \   0000D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D7   8F..         MOV     ?V0 + 2,R7
   \   0000D9   75..00       MOV     ?V0 + 3,#0x0
   \   0000DC   E5..         MOV     A,?V0 + 2
   \   0000DE   2402         ADD     A,#0x2
   \   0000E0   F5..         MOV     ?V0 + 2,A
   \   0000E2   E5..         MOV     A,?V0 + 3
   \   0000E4   3400         ADDC    A,#0x0
   \   0000E6   F5..         MOV     ?V0 + 3,A
   \   0000E8   78..         MOV     R0,#?V0 + 2
   \   0000EA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000ED   75..01       MOV     ?V0 + 2,#0x1
   \   0000F0   75..00       MOV     ?V0 + 3,#0x0
   \   0000F3   78..         MOV     R0,#?V0 + 2
   \   0000F5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F8   7900         MOV     R1,#0x0
   \   0000FA   7C..         MOV     R4,#SerialApp_epDesc & 0xff
   \   0000FC   7D..         MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
   \   0000FE   7A..         MOV     R2,#Broadcast_DstAddr & 0xff
   \   000100   7B..         MOV     R3,#(Broadcast_DstAddr >> 8) & 0xff
   \   000102   12....       LCALL   ??AF_DataRequest?relay
   \   000105   7409         MOV     A,#0x9
   \   000107   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010A   E9           MOV     A,R1
   \   00010B   705B         JNZ     ??SerialApp_Send_3
    693                      {
    694                        if(FC == 0x0A) //如果开启自动刷新则不需要这步操作
   \   00010D   740A         MOV     A,#0xa
   \   00010F   6E           XRL     A,R6
   \   000110   703C         JNZ     ??SerialApp_Send_4
    695                          NodeData[addr-1][3] = SerialApp_TxBuf[len-1];  //更新缓冲区灯的状态
   \   000112   8F..         MOV     ?V0 + 2,R7
   \   000114   75..00       MOV     ?V0 + 3,#0x0
   \   000117   74..         MOV     A,#(SerialApp_TxBuf + 255) & 0xff
   \   000119   25..         ADD     A,?V0 + 2
   \   00011B   F582         MOV     DPL,A
   \   00011D   74..         MOV     A,#((SerialApp_TxBuf - 1) >> 8) & 0xff
   \   00011F   35..         ADDC    A,?V0 + 3
   \   000121   F583         MOV     DPH,A
   \   000123   E0           MOVX    A,@DPTR
   \   000124   C0E0         PUSH    A
   \   000126   E5..         MOV     A,?V0 + 1
   \   000128   A8..         MOV     R0,?V0 + 1
   \   00012A   7900         MOV     R1,#0x0
   \   00012C   E8           MOV     A,R0
   \   00012D   75F006       MOV     B,#0x6
   \   000130   A4           MUL     AB
   \   000131   C8           XCH     A,R0
   \   000132   AAF0         MOV     R2,B
   \   000134   75F000       MOV     B,#0x0
   \   000137   A4           MUL     AB
   \   000138   2A           ADD     A,R2
   \   000139   FA           MOV     R2,A
   \   00013A   75F006       MOV     B,#0x6
   \   00013D   E9           MOV     A,R1
   \   00013E   A4           MUL     AB
   \   00013F   2A           ADD     A,R2
   \   000140   F9           MOV     R1,A
   \   000141   74..         MOV     A,#(NodeData + 253) & 0xff
   \   000143   28           ADD     A,R0
   \   000144   F582         MOV     DPL,A
   \   000146   74..         MOV     A,#((NodeData - 3) >> 8) & 0xff
   \   000148   39           ADDC    A,R1
   \   000149   F583         MOV     DPH,A
   \   00014B   D0E0         POP     A
   \   00014D   F0           MOVX    @DPTR,A
    696                        
    697                        HalUARTWrite(UART0, SerialApp_TxBuf, len+2); //无线发送成功后原样返回给上位机	
   \                     ??SerialApp_Send_4:
   \   00014E                ; Setup parameters for call to function HalUARTWrite
   \   00014E   8F..         MOV     ?V0 + 2,R7
   \   000150   75..00       MOV     ?V0 + 3,#0x0
   \   000153   E5..         MOV     A,?V0 + 2
   \   000155   2402         ADD     A,#0x2
   \   000157   FC           MOV     R4,A
   \   000158   E5..         MOV     A,?V0 + 3
   \   00015A   3400         ADDC    A,#0x0
   \   00015C   FD           MOV     R5,A
   \   00015D   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   00015F   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   000161   7900         MOV     R1,#0x0
   \   000163   12....       LCALL   ??HalUARTWrite?relay
   \   000166   804A         SJMP    ??SerialApp_Send_0
    698                        
    699                        //HalUARTWrite(UART0,"1111", 4);
    700                        //osal_set_event(SerialApp_TaskID, SERIALAPP_SEND_EVT);
    701                      }
    702                      else  //暂时没发现错误，关闭终端发送也正常。无线发送失败后将数据位和校验位置0返给上位机	
    703                      {
    704                        SerialApp_TxBuf[len-1] = 0x00;
   \                     ??SerialApp_Send_3:
   \   000168   8F..         MOV     ?V0 + 2,R7
   \   00016A   75..00       MOV     ?V0 + 3,#0x0
   \   00016D   74..         MOV     A,#(SerialApp_TxBuf + 255) & 0xff
   \   00016F   25..         ADD     A,?V0 + 2
   \   000171   F582         MOV     DPL,A
   \   000173   74..         MOV     A,#((SerialApp_TxBuf - 1) >> 8) & 0xff
   \   000175   35..         ADDC    A,?V0 + 3
   \   000177   F583         MOV     DPH,A
   \   000179   7400         MOV     A,#0x0
   \   00017B   F0           MOVX    @DPTR,A
    705                        SerialApp_TxBuf[len] = 0x00;
   \   00017C   8F..         MOV     ?V0 + 2,R7
   \   00017E   75..00       MOV     ?V0 + 3,#0x0
   \   000181   74..         MOV     A,#SerialApp_TxBuf & 0xff
   \   000183   25..         ADD     A,?V0 + 2
   \   000185   F582         MOV     DPL,A
   \   000187   74..         MOV     A,#(SerialApp_TxBuf >> 8) & 0xff
   \   000189   35..         ADDC    A,?V0 + 3
   \   00018B   F583         MOV     DPH,A
   \   00018D   7400         MOV     A,#0x0
   \   00018F   F0           MOVX    @DPTR,A
    706                        HalUARTWrite(UART0, SerialApp_TxBuf, len+2);
   \   000190                ; Setup parameters for call to function HalUARTWrite
   \   000190   8F..         MOV     ?V0 + 2,R7
   \   000192   75..00       MOV     ?V0 + 3,#0x0
   \   000195   E5..         MOV     A,?V0 + 2
   \   000197   2402         ADD     A,#0x2
   \   000199   FC           MOV     R4,A
   \   00019A   E5..         MOV     A,?V0 + 3
   \   00019C   3400         ADDC    A,#0x0
   \   00019E   FD           MOV     R5,A
   \   00019F   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   0001A1   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   0001A3   7900         MOV     R1,#0x0
   \   0001A5   12....       LCALL   ??HalUARTWrite?relay
   \   0001A8   8008         SJMP    ??SerialApp_Send_0
    707                      }
    708                    }
    709                    else
    710                    {
    711                      SendData(addr, FC);   //查询操作
   \                     ??SerialApp_Send_2:
   \   0001AA                ; Setup parameters for call to function SendData
   \   0001AA   EE           MOV     A,R6
   \   0001AB   FA           MOV     R2,A
   \   0001AC   A9..         MOV     R1,?V0 + 1
   \   0001AE   12....       LCALL   ??SendData?relay
   \   0001B1   E9           MOV     A,R1
    712                    }
    713                  }
    714                }
    715              }
    716            }
    717          }
   \                     ??SerialApp_Send_0:
   \   0001B2   7F04         MOV     R7,#0x4
   \   0001B4   02....       LJMP    ?BANKED_LEAVE_XDATA
    718          
    719          /*********************************************************************
    720          * @fn      SerialApp_Resp
    721          *
    722          * @brief   Send data OTA.
    723          *
    724          * @param   none
    725          *
    726          * @return  none
    727          */
    728          static void SerialApp_Resp(void)
    729          {
    730            if (afStatus_SUCCESS != AF_DataRequest(&SerialApp_RxAddr,
    731                                                   (endPointDesc_t *)&SerialApp_epDesc,
    732                                                   SERIALAPP_CLUSTERID2,
    733                                                   SERIAL_APP_RSP_CNT, SerialApp_RspBuf,
    734                                                   &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
    735            {
    736              osal_set_event(SerialApp_TaskID, SERIALAPP_RESP_EVT);
    737            }
    738          }
    739          
    740          /*********************************************************************
    741          * @fn      SerialApp_CallBack
    742          *
    743          * @brief   Send data OTA.
    744          *
    745          * @param   port - UART port.
    746          * @param   event - the UART port event flag.
    747          *
    748          * @return  none
    749          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    750          static void SerialApp_CallBack(uint8 port, uint8 event)
   \                     SerialApp_CallBack:
    751          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    752            (void)port;
    753            
    754            if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
    755          #if SERIAL_APP_LOOPBACK
    756                (SerialApp_TxLen < SERIAL_APP_TX_MAX))
    757          #else
    758              !SerialApp_TxLen)
   \   000007   7407         MOV     A,#0x7
   \   000009   5E           ANL     A,R6
   \   00000A   6009         JZ      ??SerialApp_CallBack_0
   \   00000C   90....       MOV     DPTR,#SerialApp_TxLen
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   7003         JNZ     ??SerialApp_CallBack_0
    759          #endif
    760            {
    761              SerialApp_Send();
   \   000012                ; Setup parameters for call to function SerialApp_Send
   \   000012   12....       LCALL   ??SerialApp_Send?relay
    762            }
    763          }
   \                     ??SerialApp_CallBack_0:
   \   000015   7F01         MOV     R7,#0x1
   \   000017   02....       LJMP    ?BANKED_LEAVE_XDATA
    764          
    765          
    766          //--------------------------------------------------------------------------------------
    767          //查询单个终端上所有传感器的数据 3A 00 01 02 XX 23  响应：3A 00 01 02 00 00 00 00 xor 23
    768          void SerialApp_SendPeriodicMessage( void )
    769          {
    770            uint8 SendBuf[13]={0};
    771            char state0;
                        ^
Warning[Pe177]: variable "state0" was declared but never referenced
    772          #ifdef WSN_SENSOR  
    773            SendBuf[0] = 0x3A;                          
    774            SendBuf[1] = HI_UINT16( EndDeviceID );
    775            SendBuf[2] = LO_UINT16( EndDeviceID );
    776            SendBuf[3] = 0x02;                       //FC
    777            
    778            DHT11();                //获取温湿度
    779            SendBuf[4] = wendu;  
    780            SendBuf[5] = shidu;  
    781            SendBuf[6] = GetGas();  //获取气体传感器的状态 
    782             if(DATA_PIN05 == 1)
    783              state0 = 0x30;       //当光敏电阻处于黑暗中时P0.5高电平
    784            else
    785              state0 = 0x31;
    786            SendBuf[7]=ReadLightData();
    787              //SendBuf[7]=state;//获得光敏电阻的状态
    788            //SendBuf[7] = GetLamp(); //获得灯的状态
    789            SendBuf[8]=state0;//获得光敏电阻的状态
    790            SendBuf[9]=GetSecurity();
    791            SendBuf[10] = XorCheckSum(SendBuf, 11);
    792            SendBuf[11] = 0x23;
    793            
    794            SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
    795            SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
    796            SerialApp_TxAddr.addr.shortAddr = 0x00;  
    797            if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
    798                                SERIALAPP_CLUSTERID,
    799                                12,
    800                                SendBuf,
    801                                &SerialApp_MsgID, 
    802                                0, 
    803                                AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    804            {
    805              // Successfully requested to be sent.
    806            }
    807            else
    808            {
    809              // Error occurred in request to send.
    810            }
    811          #endif
    812            
    813          #ifdef WSN_BEEP
    814            SendBuf[0] = GetGas();  //获取气体传感器的状态 0为有害气体   1为正常
    815            
    816            //终端5执行蜂鸣器操作   蜂鸣器动作电平 1: 响 ，0: 不响
    817            if(SendBuf[0] == 0 && EndDeviceID == 5)
    818            {
    819              TIMER1_RUN();      //检测到异常气体时蜂鸣器响
    820            }
    821            else
    822            {
    823              TIMER1_STOP();    //气体正常不响
    824            }    
    825          #endif
    826          }
    827          
    828          
    829          #if UART_DEBUG   
    830          //通过串口输出短地址 IEEE
    831          void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr)
    832          {
    833            uint8 strIeeeAddr[17] = {0};
    834            char  buff[30] = {0};    
    835            
    836            //获得短地址   
    837            sprintf(buff, "shortAddr:%04X   IEEE:", shortAddr);  
    838            
    839            //获得IEEE地址
    840            GetIeeeAddr(pIeeeAddr, strIeeeAddr);
    841            
    842            HalUARTWrite (UART0, (uint8 *)buff, strlen(buff));
    843            Delay_ms(10);
    844            HalUARTWrite (UART0, strIeeeAddr, 16); 
    845            HalUARTWrite (UART0, "\n", 1);
    846          }
    847          
    848          void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr)
    849          {
    850            uint8 i;
    851            uint8 *xad = pIeeeAddr;
    852            
    853            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
    854            {
    855              uint8 ch;
    856              ch = (*xad >> 4) & 0x0F;
    857              *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
    858              i++;
    859              ch = *xad & 0x0F;
    860              *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
    861              i++;
    862            }
    863          }
    864          #endif  
    865          
    866          void AfSendAddrInfo(void)
    867          {
    868            uint16 shortAddr;
    869            uint8 strBuf[11]={0};  
    870            
    871            SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
    872            SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
    873            SerialApp_TxAddr.addr.shortAddr = 0x00;   
    874            
    875            shortAddr=NLME_GetShortAddr();
    876            
    877            strBuf[0] = 0x3B;                          //发送地址给协调器 可用于点播
    878            strBuf[1] = HI_UINT16( shortAddr );        //存放短地址高8位
    879            strBuf[2] = LO_UINT16( shortAddr );        //存放短地址低8位
    880            
    881            osal_memcpy(&strBuf[3], NLME_GetExtAddr(), 8);
    882            
    883            if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
    884                                SERIALAPP_CLUSTERID,
    885                                11,
    886                                strBuf,
    887                                &SerialApp_MsgID, 
    888                                0, 
    889                                AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    890            {
    891            }
    892            else
    893            {
    894              // Error occurred in request to send.
    895            }   
    896          }
    897          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    898          uint8 XorCheckSum(uint8 * pBuf, uint8 len)
   \                     XorCheckSum:
    899          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FC           MOV     R4,A
    900            uint8 i;
    901            uint8 byRet=0;
    902            
    903            if(len == 0)
   \   000007   7004         JNZ     ??XorCheckSum_0
    904              return byRet;
   \   000009   7900         MOV     R1,#0x0
   \   00000B   8020         SJMP    ??XorCheckSum_1
    905            else
    906              byRet = pBuf[0];
   \                     ??XorCheckSum_0:
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
    907            
    908            for(i = 1; i < len; i ++)
   \   000013   7801         MOV     R0,#0x1
   \   000015   8011         SJMP    ??XorCheckSum_2
    909              byRet = byRet ^ pBuf[i];
   \                     ??XorCheckSum_3:
   \   000017   88..         MOV     ?V0 + 0,R0
   \   000019   EA           MOV     A,R2
   \   00001A   25..         ADD     A,?V0 + 0
   \   00001C   F582         MOV     DPL,A
   \   00001E   EB           MOV     A,R3
   \   00001F   3400         ADDC    A,#0x0
   \   000021   F583         MOV     DPH,A
   \   000023   E0           MOVX    A,@DPTR
   \   000024   C9           XCH     A,R1
   \   000025   69           XRL     A,R1
   \   000026   F9           MOV     R1,A
   \   000027   08           INC     R0
   \                     ??XorCheckSum_2:
   \   000028   E8           MOV     A,R0
   \   000029   C3           CLR     C
   \   00002A   9C           SUBB    A,R4
   \   00002B   40EA         JC      ??XorCheckSum_3
    910            
    911            return byRet;
   \                     ??XorCheckSum_1:
   \   00002D   7F02         MOV     R7,#0x2
   \   00002F   02....       LJMP    ?BANKED_LEAVE_XDATA
    912          }
    913          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    914          uint8 GetDataLen(uint8 fc)
   \                     GetDataLen:
    915          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
    916            uint8 len=0;
   \   000005   7900         MOV     R1,#0x0
    917            switch(fc)
   \   000007   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for GetDataLen>_0`:
   \   00000A   01           DB        1
   \   00000B   07           DB        7
   \   00000C   0D           DB        13
   \   00000D   ....         DW        ??GetDataLen_0
   \   00000F   00           DB        0
   \   000010   ....         DW        ??GetDataLen_1
    918            {
    919            case 0x07:
    920            case 0x08:
    921            case 0x0A:
    922            case 0x0B:
    923            case 0x0C:
    924            case 0x0D:
    925            case 0x09:
    926              len = 1;
   \                     ??GetDataLen_0:
   \   000012   09           INC     R1
    927              break;
    928            }
    929            
    930            return len;
   \                     ??GetDataLen_1:
   \   000013                REQUIRE ?Subroutine0
   \   000013                ; // Fall through to label ?Subroutine0
    931          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    932          
    933          //获得P0_5 继电器引脚的电平
    934          uint8 GetLamp( void )
    935          {
    936            uint8 ret;
    937            
    938           //if(LAMP_PIN == 0)
    939             // ret = 0;
    940            //else
    941              //ret = 1;
    942            
    943            return ret;
                          ^
Warning[Pe549]: variable "ret" is used before its value is set

  void AfSendAddrInfo(void)
       ^
"F:\BaiduYunDownload\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c",866  Warning[Pe177]: 
          function "AfSendAddrInfo" was declared but never referenced

  uint8 GetLamp( void )
        ^
"F:\BaiduYunDownload\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c",934  Warning[Pe177]: 
          function "GetLamp" was declared but never referenced
    944          }
    945          
    946          //获得P0_6 MQ-2气体传感器的数据 0为有害气体   1为正常
    947          uint8 GetGas( void )
    948          {
    949            uint8 ret;
    950            
    951            if(GAS_PIN == 0)
    952            {
    953              ret = 0;
    954            }
    955            else
    956            {
    957              ret = 1;
    958            }
    959            
    960            return ret;
    961          }
    962          uint8 GetSecurity(void)
                       ^
Warning[Pe177]: function "GetSecurity" was declared but never referenced
    963          {
    964            uint8 ret;
    965              if(DATA_PIN == 0)
    966            {
    967              ret = 0;
    968            }
    969            else
    970            {
    971              ret = 1;
    972            }
    973            
    974            return ret;
    975          }
    976          //-------------------------------------------------------------------
    977          
    978          
    979          //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    980          //#ifdef WSN_BEEP
    981          //步进电机驱动部分
    982          static void MotorData(uchar data)
    983          {
    984            A1 = 1&(data>>4);
    985            B1 = 1&(data>>5);
    986            C1 = 1&(data>>6);
    987            D1 = 1&(data>>7);
    988          }
    989          
    990          //顺时针转动
    991          static void MotorCW(void)
    992          {
    993            uchar i;
    994            for(i=0;i<4;i++)
    995            {
    996              MotorData(phasecw[i]);
    997              Delay_MS(ucSpeed);//转速调节
    998            }
    999          }
   1000          //逆时针转动
   1001          static void MotorCCW(void)
   1002          {
   1003            uchar i;
   1004            for(i=0;i<4;i++)
   1005            {
   1006              MotorData(phaseccw[i]);
   1007              Delay_MS(ucSpeed);//转速调节
   1008            }
   1009          }
   1010          
   1011          //停止转动
   1012          static void MotorStop(void)
   1013          {
   1014            MotorData(0x00);
   1015          }
   1016          
   1017          #ifdef WSN_STEP
   1018          //初始化IO口程序
   1019          static void InitStepMotor(void)
   1020          {
   1021            P0SEL &= 0x0F;  //P04 05 06 07定义为普通IO
   1022            P0DIR |= 0xF0;  //P04 05 06 07定义为输出
   1023            
   1024            MotorData(0x00);//停止转动
   1025          }
   1026          #endif
   1027          
   1028          static void Delay_MS(unsigned int Time)// 1ms延时
   1029          {
   1030            char i;
   1031            
   1032            while(Time--)
   1033            {
   1034              for(i=0;i<100;i++)
   1035                MicroWait(10);
   1036            }
   1037          }
   1038          //#endif
   1039          //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   1040          
   1041          
   1042          //-------------------------------------------------------------------
   1043          //协议栈里使用timer 1输出PWM，使用的是正计数/倒计数模式，占空比可调整

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1044          void init_port(void)
   \                     init_port:
   1045          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1046            P0SEL |= 0x80;         //设置P0.7口为外设
   \   000000   43F380       ORL     0xf3,#0x80
   1047            P0DIR |= 0x80;         //设置P0.7为输出
   \   000003   43FD80       ORL     0xfd,#0x80
   1048            PERCFG |= 0x40;        //设置定时器1 的I / O 位置   1： 备用位置2
   \   000006   43F140       ORL     0xf1,#0x40
   1049            
   1050            return ;
   \   000009   02....       LJMP    ?BRET
   \   00000C                REQUIRE P0SEL
   \   00000C                REQUIRE P0DIR
   \   00000C                REQUIRE PERCFG
   1051          }
   1052          
   1053          // 将基准值放入T1CC0 寄存器, 将被比较值放入T1CC3寄存器
   1054          // 当T1CC3中的值与T1CC0中的值相等时，则T1CC3 设置or清除

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1055          void init_timer(void)
   \                     init_timer:
   1056          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1057            T1CC0L = 0xff;         //PWM duty cycle  周期
   \   000004   75DAFF       MOV     0xda,#-0x1
   1058            T1CC0H = 0x0;
   \   000007   75DB00       MOV     0xdb,#0x0
   1059            
   1060            T1CC3L = 0x00;        //PWM signal period 占空比
   \   00000A   9062AC       MOV     DPTR,#0x62ac
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
   1061            T1CC3H = 0x00;
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
   1062            
   1063            //等于T1CC0中的数值时候，输出高电平 1； 等于T1CC3中的数值时候，输出低电平 0 
   1064            //其实整个占空比就为50%  为了蜂鸣器输出连续的响声修改了占空比
   1065            T1CCTL3 = 0x34;       
   \   000011   9062A3       MOV     DPTR,#0x62a3
   \   000014   7434         MOV     A,#0x34
   \   000016   F0           MOVX    @DPTR,A
   1066            T1CTL |= 0x0f;         // divide with 128 and to do i up-down mode
   \   000017   43E40F       ORL     0xe4,#0xf
   1067            return ;
   \   00001A   80..         SJMP    ?Subroutine0
   \   00001C                REQUIRE T1CC0L
   \   00001C                REQUIRE T1CC0H
   \   00001C                REQUIRE T1CTL
   1068          }
   1069          uint16 ReadLightData( void )
                        ^
Warning[Pe177]: function "ReadLightData" was declared but never referenced

  static void MotorCW(void)
              ^
"F:\BaiduYunDownload\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c",991  Warning[Pe177]: 
          function "MotorCW" was declared but never referenced

  static void MotorCCW(void)
              ^
"F:\BaiduYunDownload\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c",1001  Warning[Pe177]: 
          function "MotorCCW" was declared but never referenced

  static void MotorStop(void)
              ^
"F:\BaiduYunDownload\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c",1012  Warning[Pe177]: 
          function "MotorStop" was declared but never referenced
   1070          {
   1071            uint16 reading = 0;
   1072            
   1073            P0DIR &= ~0x20;  // 设置P0.5为输入方式
   1074            asm("NOP");asm("NOP");
   1075            
   1076            /* Clear ADC interrupt flag */
   1077            ADCIF = 0;
   1078            
   1079            ADCCON3 = (0x80 | HAL_ADC_DEC_064 | HAL_ADC_CHANNEL_5);
   1080            
   1081            /* Wait for the conversion to finish */
   1082            while ( !ADCIF );
   1083            
   1084            asm("NOP");asm("NOP");
   1085            
   1086            /* Read the result */
   1087            reading = ADCL;
   1088            reading |= (int16) (ADCH << 8);
   1089            reading >>= 8;
   1090            
   1091            return reading;
   1092          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1093          void start_pwm(void) 
   \                     start_pwm:
   1094          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1095            init_port();
   \   000004                ; Setup parameters for call to function init_port
   \   000004   12....       LCALL   ??init_port?relay
   1096            init_timer();
   \   000007                ; Setup parameters for call to function init_timer
   \   000007   12....       LCALL   ??init_timer?relay
   1097            // IEN1 |=0x02;     //Timer 1 中断使能
   1098            // EA = 1;          //全局中断使能
   1099            // while(1) {;}
   1100            return ;
   \   00000A   80..         SJMP    ?Subroutine0
   1101          }
   1102          
   1103          //volatile unsigned char count = 0;
   1104          
   1105          #pragma vector=T1_VECTOR

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1106          __interrupt void _IRQ_timer1(void)
   \                     _IRQ_timer1:
   1107          {
   \   000000                ; Saved register size: 1
   \   000000                ; Auto size: 0
   1108            //TODO....
   1109          }
   \   000000   32           RETI

   \                                 In  segment INTVEC, offset 0x4b, root
   \                     `??_IRQ_timer1??INTVEC 75`:
   \   00004B   02....       LJMP       (_IRQ_timer1)

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4420     DB "ALD WSN-system"
   \            57534E2D
   \            73797374
   \            656D00  
   \   00000F   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ucEdDir>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ucDirection>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ucSpeed>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for phasecw>`:
   \   000000   80           DB 128
   \   000001   40           DB 64
   \   000002   20           DB 32
   \   000003   10           DB 16

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for phaseccw>`:
   \   000000   10           DB 16
   \   000001   20           DB 32
   \   000002   40           DB 64
   \   000003   80           DB 128

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_ProcessMSGCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_ProcessMSGCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_Send?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_Send

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_CallBack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??XorCheckSum?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    XorCheckSum

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetDataLen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetDataLen

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??init_port?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    init_port

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??init_timer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    init_timer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??start_pwm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    start_pwm

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ALD WSN-Node01">`:
   \   000000   414C4420     DB "ALD WSN-Node01"
   \            57534E2D
   \            4E6F6465
   \            303100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ALD WSN-Node02">`:
   \   000000   414C4420     DB "ALD WSN-Node02"
   \            57534E2D
   \            4E6F6465
   \            303200  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ALD WSN-Node03">`:
   \   000000   414C4420     DB "ALD WSN-Node03"
   \            57534E2D
   \            4E6F6465
   \            303300  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ALD WSN-Node04">`:
   \   000000   414C4420     DB "ALD WSN-Node04"
   \            57534E2D
   \            4E6F6465
   \            303400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ALD WSN-BEEP05">`:
   \   000000   414C4420     DB "ALD WSN-BEEP05"
   \            57534E2D
   \            42454550
   \            303500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "stepping motor">`:
   \   000000   73746570     DB "stepping motor"
   \            70696E67
   \            206D6F74
   \            6F7200  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ALD WSN-system">`:
   \   000000   414C4420     DB "ALD WSN-system"
   \            57534E2D
   \            73797374
   \            656D00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "BRI:%03d ">`:
   \   000000   4252493A     DB "BRI:%03d "
   \            25303364
   \            2000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\241\\346">`:
   \   000000   A1E600       DB "\241\346"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\243\\245">`:
   \   000000   A3A500       DB "\243\245"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\306\\370\\314\\345\\322\\354\\263\\243">`:
   \   000000   C6F8CCE5     DB "\306\370\314\345\322\354\263\243"
   \            D2ECB3A3
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\306\\370\\314\\345\\325\\375\\263\\243">`:
   \   000000   C6F8CCE5     DB "\306\370\314\345\325\375\263\243"
   \            D5FDB3A3
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "security">`:
   \   000000   73656375     DB "security"
   \            72697479
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "insecurity">`:
   \   000000   696E7365     DB "insecurity"
   \            63757269
   \            747900  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0
   1110          //-------------------------------------------------------------------
   1111          
   1112          
   1113          /*********************************************************************
   1114          *********************************************************************/
   1115            

   Maximum stack usage in bytes:

     Function                     ISTACK PSTACK XSTACK
     --------                     ------ ------ ------
     GetDataLen                       2      0     12
     SendData                         1      0     34
       -> osal_memcpy                 0      0     44
       -> XorCheckSum                 0      0     38
       -> HalUARTWrite                0      0     38
       -> osal_memcpy                 0      0     44
       -> XorCheckSum                 0      0     38
       -> HalUARTWrite                0      0     38
     SerialApp_CallBack               0      0      9
       -> SerialApp_Send              0      0     18
     SerialApp_Init                   1      0     47
       -> init_port                   0      0     88
       -> init_timer                  0      0     88
       -> osal_memset                 0      0     88
       -> osal_strlen                 0      0     94
       -> osal_memcpy                 0      0     94
       -> osal_strlen                 0      0     94
       -> osal_memcpy                 0      0     94
       -> osal_strlen                 0      0     94
       -> osal_memcpy                 0      0     94
       -> osal_strlen                 0      0     94
       -> osal_memcpy                 0      0     94
       -> osal_strlen                 0      0     94
       -> osal_memcpy                 0      0     94
       -> osal_strlen                 0      0     94
       -> osal_memcpy                 0      0     94
       -> osal_strlen                 0      0     94
       -> osal_memcpy                 0      0     94
       -> osal_strlen                 2      0     88
       -> LCD_write_EN_string         0      0     88
       -> afRegister                  0      0     88
       -> RegisterForKeys             0      0     88
       -> HalUARTOpen                 0      0     88
     SerialApp_ProcessEvent           2      0     34
       -> osal_msg_deallocate         0      0     50
       -> osal_msg_receive            0      0     50
       -> SerialApp_ProcessMSGCmd     0      0     50
       -> osal_rand                   0      0     50
       -> osal_start_timerEx          0      0     50
       -> SerialApp_Send              0      0     50
       -> AF_DataRequest              0      0     68
       -> osal_set_event              0      0     50
     SerialApp_ProcessMSGCmd          2      0     84
       -> memset                      0      0    116
       -> memset                      0      0    116
       -> osal_memset                 0      0    112
       -> osal_memcpy                 0      0    118
       -> sprintf                     0      0    116
       -> LCD_write_EN_string         0      0    112
       -> LCD_write_EN_string         0      0    112
       -> LCD_write_CN_string         0      0    112
       -> LCD_write_CN_string         0      0    112
       -> LCD_write_EN_string         0      0    112
       -> LCD_write_CN_string         0      0    112
       -> LCD_write_CN_string         0      0    112
       -> LCD_write_EN_string         0      0    112
       -> LCD_write_EN_string         0      0    112
       -> osal_stop_timerEx           0      0    112
       -> osal_start_timerEx          0      0    112
     SerialApp_Send                   1      0     46
       -> HalUARTRead                 0      0     24
       -> GetDataLen                  0      0     24
       -> XorCheckSum                 0      0     24
       -> AF_DataRequest              0      0     42
       -> HalUARTWrite                0      0     24
       -> HalUARTWrite                0      0     24
       -> SendData                    0      0     24
     XorCheckSum                      0      0     29
     _IRQ_timer1                      1      0      0
     init_port                        0      0     44
     init_timer                       2      0     44
     start_pwm                        2      0      0
       -> init_port                   4      0      0
       -> init_timer                  4      0      0


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     _A_P0                                             1
     T1CC0L                                            1
     T1CC0H                                            1
     T1CTL                                             1
     PERCFG                                            1
     P0SEL                                             1
     P0DIR                                             1
     EndDeviceID                                       2
     SerialApp_ClusterList                             4
     SerialApp_SimpleDesc                             12
     SerialApp_epDesc                                  6
     AppTitle                                         20
     SerialApp_TaskID                                  1
     Broadcast_DstAddr                                12
     SerialApp_TxSeq                                   1
     SerialApp_TxBuf                                  21
     SerialApp_TxLen                                   1
     SerialApp_RxAddr                                 12
     SerialApp_RspBuf                                  4
     SerialApp_NwkState                                1
     SerialApp_MsgID                                   1
     NodeData                                         24
     TxBuffer                                        128
     LedState                                          1
     ucEdDir                                           1
     ucDirection                                       1
     ucSpeed                                           1
     DataBuf                                           3
     phasecw                                           4
     phaseccw                                          4
     SerialApp_Init                                  484
     ?Subroutine4                                      6
     SerialApp_ProcessEvent                          340
     SerialApp_ProcessMSGCmd                         624
     ?Subroutine6                                      8
     ?Subroutine5                                      9
     ?Subroutine3                                      4
     ?Subroutine7                                      5
     ?Subroutine8                                     11
     ?Subroutine2                                     12
     ?Subroutine1                                     11
     SendData                                        230
     SerialApp_Send                                  439
     SerialApp_CallBack                               26
     XorCheckSum                                      50
     GetDataLen                                       19
     ?Subroutine0                                      7
     init_port                                        12
     init_timer                                       28
     start_pwm                                        12
     _IRQ_timer1                                       1
     ??_IRQ_timer1??INTVEC 75                          3
     ?<Initializer for AppTitle>                      20
     ?<Initializer for ucEdDir>                        1
     ?<Initializer for ucDirection>                    1
     ?<Initializer for ucSpeed>                        1
     ?<Initializer for phasecw>                        4
     ?<Initializer for phaseccw>                       4
     ??SerialApp_Init?relay                            6
     ??SerialApp_ProcessEvent?relay                    6
     ??SerialApp_ProcessMSGCmd?relay                   6
     ??SendData?relay                                  6
     ??SerialApp_Send?relay                            6
     ??SerialApp_CallBack?relay                        6
     ??XorCheckSum?relay                               6
     ??GetDataLen?relay                                6
     ??init_port?relay                                 6
     ??init_timer?relay                                6
     ??start_pwm?relay                                 6
     ?<Constant "ALD WSN-Node01">                     15
     ?<Constant "ALD WSN-Node02">                     15
     ?<Constant "ALD WSN-Node03">                     15
     ?<Constant "ALD WSN-Node04">                     15
     ?<Constant "ALD WSN-BEEP05">                     15
     ?<Constant "stepping motor">                     15
     ?<Constant "ALD WSN-system">                     15
     ?<Constant {0}>                                  30
     ?<Constant "BRI:%03d ">                          10
     ?<Constant "\241\346">                            3
     ?<Constant "\243\245">                            3
     ?<Constant "\306\370\314\345\322\354\263\243">    9
     ?<Constant "\306\370\314\345\325\375\263\243">    9
     ?<Constant "security">                            9
     ?<Constant "insecurity">                         11
     ?<Constant {0}>_1                                13

 
 2 337 bytes in segment BANKED_CODE
    66 bytes in segment BANK_RELAYS
     3 bytes in segment INTVEC
     1 byte  in segment NEAR_CODE
     7 bytes in segment SFR_AN
    31 bytes in segment XDATA_I
    31 bytes in segment XDATA_ID
   224 bytes in segment XDATA_ROM_C
   212 bytes in segment XDATA_Z
 
 2 435 bytes of CODE  memory (+ 3 bytes shared)
   224 bytes of CONST memory
     0 bytes of DATA  memory (+ 7 bytes shared)
   243 bytes of XDATA memory

Errors: none
Warnings: 13
