///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        21/May/2016  19:25:43 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\BaiduYunDownload\第6章                         /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\Source\SerialApp.c             /
//    Command line       =  -f "F:\BaiduYunDownload\第6章                     /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wCoord.cfg" (-DCPU32MHZ -DROOT=__near_func   /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f "F:\BaiduYunDownload\第6章                     /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0         /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x1688                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "F:\BaiduYunDownload\第6章 /
//                           实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\ /
//                          Utilities\SerialApp\Source\SerialApp.c" -D        /
//                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D             /
//                          LCD_SUPPORTED -lC "F:\BaiduYunDownload\第6章      /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\CoordinatorEB\List\"  /
//                          -lA "F:\BaiduYunDownload\第6章                    /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\CoordinatorEB\List\"  /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\CoordinatorEB\Obj\"   /
//                          -e --no_code_motion --debug --core=plain          /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\" -I                  /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\Source\" -I        /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\ZMain\TI2530 /
//                          DB\" -I "F:\BaiduYunDownload\第6章                /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\hal\include\" -I "F:\BaiduYunDownload\第6章  /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\hal\target\CC2530EB\" -I                     /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\include\" -I "F:\BaiduYunDownload\第6章  /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\high_level\" -I                          /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\low_level\srf04\" -I                     /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\low_level\srf04\single_chip\" -I         /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mt\" -I "F:\BaiduYunDownload\第6章           /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\osal\include\" -I "F:\BaiduYunDownload\第6章 /
//                           实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\ /
//                          Utilities\SerialApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\services\saddr\" -I                         /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\services\sdata\" -I                          /
//                          "F:\BaiduYunDownload\第6章                        /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\af\" -I "F:\BaiduYunDownload\第6章     /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\nwk\" -I "F:\BaiduYunDownload\第6章    /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\sapi\" -I "F:\BaiduYunDownload\第6章   /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\sec\" -I "F:\BaiduYunDownload\第6章    /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\sys\" -I "F:\BaiduYunDownload\第6章    /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\zdo\" -I "F:\BaiduYunDownload\第6章    /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\zmac\" -I "F:\BaiduYunDownload\第6章         /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\zmac\f8w\" -Ohz --require_prototypes         /
//    List file          =  F:\BaiduYunDownload\第6章                         /
//                          实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\U /
//                          tilities\SerialApp\CC2530DB\CoordinatorEB\List\Se /
//                          rialApp.s51                                       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SerialApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_DIV_MOD
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??GetDataLen?relay,0203H
        PUBLIC ??SendData?relay
        FUNCTION ??SendData?relay,0203H
        FUNCTION ??SerialApp_CallBack?relay,0203H
        PUBLIC ??SerialApp_Init?relay
        FUNCTION ??SerialApp_Init?relay,0203H
        PUBLIC ??SerialApp_ProcessEvent?relay
        FUNCTION ??SerialApp_ProcessEvent?relay,0203H
        FUNCTION ??SerialApp_ProcessMSGCmd?relay,0203H
        FUNCTION ??SerialApp_Send?relay,0203H
        FUNCTION ??XorCheckSum?relay,0203H
        PUBWEAK `??_IRQ_timer1??INTVEC 75`
        PUBLIC ??init_port?relay
        FUNCTION ??init_port?relay,0203H
        PUBLIC ??init_timer?relay
        FUNCTION ??init_timer?relay,0203H
        PUBLIC ??start_pwm?relay
        FUNCTION ??start_pwm?relay,0203H
        PUBLIC AppTitle
        PUBLIC DataBuf
        FUNCTION GetDataLen,080203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC LedState
        PUBLIC NodeData
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBWEAK PERCFG
        PUBLIC SendData
        FUNCTION SendData,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        FUNCTION SerialApp_CallBack,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SerialApp_ClusterList
        PUBLIC SerialApp_Init
        FUNCTION SerialApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 47, STACK
        PUBLIC SerialApp_ProcessEvent
        FUNCTION SerialApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 34, STACK
        FUNCTION SerialApp_ProcessMSGCmd,0a1203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 59, STACK
        FUNCTION SerialApp_Send,021203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC SerialApp_SimpleDesc
        PUBLIC SerialApp_TaskID
        PUBLIC SerialApp_epDesc
        PUBWEAK T1CC0H
        PUBWEAK T1CC0L
        PUBWEAK T1CTL
        PUBLIC TxBuffer
        FUNCTION XorCheckSum,0203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBWEAK _A_P0
        PUBLIC _IRQ_timer1
        FUNCTION _IRQ_timer1,0233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        PUBLIC init_port
        FUNCTION init_port,0203H
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC init_timer
        FUNCTION init_timer,0203H
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC phaseccw
        PUBLIC phasecw
        PUBLIC start_pwm
        FUNCTION start_pwm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ucDirection
        PUBLIC ucEdDir
        PUBLIC ucSpeed
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_memset         SYMBOL "osal_memset"
osal_strlen         SYMBOL "osal_strlen"
osal_memcpy         SYMBOL "osal_memcpy"
LCD_write_EN_string SYMBOL "LCD_write_EN_string"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalUARTOpen         SYMBOL "HalUARTOpen"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_rand           SYMBOL "osal_rand"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
AF_DataRequest      SYMBOL "AF_DataRequest"
osal_set_event      SYMBOL "osal_set_event"
memset              SYMBOL "memset"
sprintf             SYMBOL "sprintf"
LCD_write_CN_string SYMBOL "LCD_write_CN_string"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
HalUARTWrite        SYMBOL "HalUARTWrite"
HalUARTRead         SYMBOL "HalUARTRead"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??LCD_write_CN_string?relay SYMBOL "?relay", LCD_write_CN_string
??LCD_write_EN_string?relay SYMBOL "?relay", LCD_write_EN_string
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??memset?relay      SYMBOL "?relay", memset
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??osal_strlen?relay SYMBOL "?relay", osal_strlen
??sprintf?relay     SYMBOL "?relay", sprintf
SendData            SYMBOL "SendData"
??SendData?relay    SYMBOL "?relay", SendData
SerialApp_Init      SYMBOL "SerialApp_Init"
??SerialApp_Init?relay SYMBOL "?relay", SerialApp_Init
SerialApp_ProcessEvent SYMBOL "SerialApp_ProcessEvent"
??SerialApp_ProcessEvent?relay SYMBOL "?relay", SerialApp_ProcessEvent
_IRQ_timer1         SYMBOL "_IRQ_timer1"
`??_IRQ_timer1??INTVEC 75` SYMBOL "??INTVEC 75", _IRQ_timer1
init_port           SYMBOL "init_port"
??init_port?relay   SYMBOL "?relay", init_port
init_timer          SYMBOL "init_timer"
??init_timer?relay  SYMBOL "?relay", init_timer
start_pwm           SYMBOL "start_pwm"
??start_pwm?relay   SYMBOL "?relay", start_pwm

        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_write_EN_string
        FUNCTION LCD_write_EN_string,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_write_CN_string
        FUNCTION LCD_write_CN_string,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??LCD_write_CN_string?relay
        FUNCTION ??LCD_write_CN_string?relay,00H
        EXTERN ??LCD_write_EN_string?relay
        FUNCTION ??LCD_write_EN_string?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??memset?relay
        FUNCTION ??memset?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H
        EXTERN Color
        EXTERN Color_BK

// F:\BaiduYunDownload\第6章 实践项目\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c
//    1 /*********************************************************************
//    2 * INCLUDES
//    3 */
//    4 #include <stdio.h>
//    5 #include <string.h>
//    6 
//    7 #include "AF.h"
//    8 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0daH
// unsigned char volatile __sfr T1CC0L
T1CC0L:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0dbH
// unsigned char volatile __sfr T1CC0H
T1CC0H:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e4H
// unsigned char volatile __sfr T1CTL
T1CTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f1H
// unsigned char volatile __sfr PERCFG
PERCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//    9 #include "OSAL_Tasks.h"
//   10 #include "SerialApp.h"
//   11 #include "ZDApp.h"
//   12 #include "ZDObject.h"
//   13 #include "ZDProfile.h"
//   14 #include "hal_lcd.h"
//   15 #include "hal_drivers.h"
//   16 #include "hal_key.h"
//   17 #if defined ( LCD_SUPPORTED )
//   18 
//   19 #endif
//   20 #include "hal_led.h"
//   21 #include "hal_uart.h"
//   22 #include "hal_adc.h"
//   23 #include "DHT11.h"
//   24 #include "nwk_globals.h"
//   25 
//   26 
//   27 //---------------------------------------------------------------------
//   28 //标准版不同的终端需要修改此ID,用于识别协调器发过来的数据，ID相同则处理

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   29 static uint16 EndDeviceID = 0x0000 ; //终端ID，重要
EndDeviceID:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   30 //---------------------------------------------------------------------
//   31 
//   32 //定义节点功能用作传感器或气体+蜂鸣器,还是步进电机
//   33 //#define WSN_SENSOR     //用作4个采集节点
//   34 #define WSN_BEEP     //气体+蜂鸣器 EndDeviceID=5
//   35 //#define WSN_STEP     //步进电机    EndDeviceID=6
//   36 
//   37 
//   38 #define DATA_PIN P0_4            //定义P0.4口为传感器的输入端
//   39 #define LAMP_PIN     P0_5  //定义P0.5口为继电器输入端
//   40 #define DATA_PIN05   P0_5    //定义P0.5口为光敏的输入端
//   41 #define GAS_PIN      P0_6  //定义P0.6口为烟雾传感器的输入端  
//   42 #define BEEP_PIN     P0_7  //定义P0.7口为蜂鸣器的输出端  
//   43 
//   44 #define A1 P0_4            //定义步进电机连接端口
//   45 #define B1 P0_5
//   46 #define C1 P0_6
//   47 #define D1 P0_7
//   48 
//   49 #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
//   50 #define UART0        0x00
//   51 
//   52 #define MAX_NODE     0x04
//   53 #define UART_DEBUG   0x00 //调试宏,通过串口输出协调器和终端的IEEE、短地址
//   54 #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])
//   55 
//   56 #define TIMER1_RUN()  T1CTL|=0X03
//   57 #define TIMER1_STOP() T1CTL&=~0X03
//   58 /*********************************************************************
//   59 * CONSTANTS
//   60 */
//   61 
//   62 #if !defined( SERIAL_APP_PORT )
//   63 #define SERIAL_APP_PORT  0
//   64 #endif
//   65 
//   66 #if !defined( SERIAL_APP_BAUD )
//   67 #define SERIAL_APP_BAUD  HAL_UART_BR_115200  //HAL_UART_BR_38400
//   68 #endif
//   69 
//   70 // When the Rx buf space is less than this threshold, invoke the Rx callback.
//   71 #if !defined( SERIAL_APP_THRESH )
//   72 #define SERIAL_APP_THRESH  64
//   73 #endif
//   74 
//   75 #if !defined( SERIAL_APP_RX_SZ )
//   76 #define SERIAL_APP_RX_SZ  128
//   77 #endif
//   78 
//   79 #if !defined( SERIAL_APP_TX_SZ )
//   80 #define SERIAL_APP_TX_SZ  128
//   81 #endif
//   82 
//   83 // Millisecs of idle time after a byte is received before invoking Rx callback.
//   84 #if !defined( SERIAL_APP_IDLE )
//   85 #define SERIAL_APP_IDLE  6
//   86 #endif
//   87 
//   88 // Loopback Rx bytes to Tx for throughput testing.
//   89 #if !defined( SERIAL_APP_LOOPBACK )
//   90 #define SERIAL_APP_LOOPBACK  FALSE
//   91 #endif
//   92 
//   93 // This is the max byte count per OTA message.
//   94 #if !defined( SERIAL_APP_TX_MAX )
//   95 #define SERIAL_APP_TX_MAX  20
//   96 #endif
//   97 
//   98 #define SERIAL_APP_RSP_CNT  4
//   99 
//  100 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//  101 const cId_t SerialApp_ClusterList[SERIALAPP_MAX_CLUSTERS] =
SerialApp_ClusterList:
        DATA16
        DW 1
        DW 0
//  102 {
//  103   SERIALAPP_CLUSTERID
//  104 };
//  105 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  106 const SimpleDescriptionFormat_t SerialApp_SimpleDesc =
SerialApp_SimpleDesc:
        DB 11
        DATA16
        DW 3845
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SerialApp_ClusterList
        DATA8
        DB 2
        DATA16
        DW SerialApp_ClusterList
//  107 {
//  108   SERIALAPP_ENDPOINT,              //  int   Endpoint;
//  109   SERIALAPP_PROFID,                //  uint16 AppProfId[2];
//  110   SERIALAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  111   SERIALAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  112   SERIALAPP_FLAGS,                 //  int   AppFlags:4;
//  113   SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  114   (cId_t *)SerialApp_ClusterList,  //  byte *pAppInClusterList;
//  115   SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumOutClusters;
//  116   (cId_t *)SerialApp_ClusterList   //  byte *pAppOutClusterList;
//  117 };
//  118 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  119 const endPointDesc_t SerialApp_epDesc =
SerialApp_epDesc:
        DB 11
        DATA16
        DW SerialApp_TaskID
        DW SerialApp_SimpleDesc
        DATA8
        DB 0
//  120 {
//  121   SERIALAPP_ENDPOINT,
//  122   &SerialApp_TaskID,
//  123   (SimpleDescriptionFormat_t *)&SerialApp_SimpleDesc,
//  124   noLatencyReqs
//  125 };
//  126 
//  127 
//  128 /*********************************************************************
//  129 * GLOBAL VARIABLES
//  130 */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  131 uint8 AppTitle[20] = "ALD WSN-system"; //应用程序名称
AppTitle:
        DATA8
        DS 20
        REQUIRE `?<Initializer for AppTitle>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  132 uint8 SerialApp_TaskID;    // Task ID for internal task/event processing.
SerialApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  133 
//  134 
//  135 /*********************************************************************
//  136 * LOCAL VARIABLES
//  137 */
//  138 #ifdef WSN_SENSOR
//  139 static bool SendFlag = 0;
//  140 #endif
//  141 static uint8 SerialApp_MsgID;
//  142 
//  143 static afAddrType_t SerialApp_TxAddr;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  144 static afAddrType_t Broadcast_DstAddr;
Broadcast_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  145 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  146 static uint8 SerialApp_TxSeq;
SerialApp_TxSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  147 static uint8 SerialApp_TxBuf[SERIAL_APP_TX_MAX+1];
SerialApp_TxBuf:
        DS 21
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  148 static uint8 SerialApp_TxLen;
SerialApp_TxLen:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  149 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  150 static afAddrType_t SerialApp_RxAddr;
SerialApp_RxAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  151 static uint8 SerialApp_RspBuf[SERIAL_APP_RSP_CNT];
SerialApp_RspBuf:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  152 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  153 static devStates_t SerialApp_NwkState;
SerialApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  154 static afAddrType_t SerialApp_TxAddr;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  155 static uint8 SerialApp_MsgID;
SerialApp_MsgID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  156 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  157 uint8 NodeData[MAX_NODE][6];         //终端数据缓冲区 0=温度 1=湿度 2=气体 3=灯
NodeData:
        DS 24
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  158 uint8 TxBuffer[128];
TxBuffer:
        DS 128
        REQUIRE __INIT_XDATA_Z
//  159 
//  160 //电机相关的变量

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  161 uint8 LedState = 0;
LedState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  162 uint8 ucEdDir = 1;      //终端1为正转  2为反转
ucEdDir:
        DATA8
        DS 1
        REQUIRE `?<Initializer for ucEdDir>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  163 uint8 ucDirection = 1;  //1为正转  2为反转
ucDirection:
        DATA8
        DS 1
        REQUIRE `?<Initializer for ucDirection>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  164 uint8 ucSpeed = 2;      //速度2-10之间
ucSpeed:
        DATA8
        DS 1
        REQUIRE `?<Initializer for ucSpeed>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  165 uint8 DataBuf[3];
DataBuf:
        DS 3
        REQUIRE __INIT_XDATA_Z
//  166 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  167 uchar phasecw[4] ={0x80,0x40,0x20,0x10};//正转 电机导通相序 D-C-B-A
phasecw:
        DATA32
        DS 4
        REQUIRE `?<Initializer for phasecw>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  168 uchar phaseccw[4]={0x10,0x20,0x40,0x80};//反转 电机导通相序 A-B-C-D
phaseccw:
        DATA32
        DS 4
        REQUIRE `?<Initializer for phaseccw>`
        REQUIRE __INIT_XDATA_I
//  169 /*********************************************************************
//  170 * LOCAL FUNCTIONS
//  171 */
//  172 
//  173 static void SerialApp_HandleKeys( uint8 shift, uint8 keys );
//  174 static void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
//  175 static void SerialApp_Send(void);
//  176 static void SerialApp_Resp(void);
//  177 static void SerialApp_CallBack(uint8 port, uint8 event);
//  178 
//  179 #if UART_DEBUG  
//  180 static void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr);
//  181 static void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr);
//  182 #endif
//  183 static void AfSendAddrInfo(void);
//  184 static void SerialApp_SendPeriodicMessage( void );
//  185 static uint8 GetDataLen(uint8 fc);
//  186 static uint8 GetLamp( void );
//  187 static uint8 GetGas( void );
//  188 static uint8 GetSecurity( void );
//  189 static uint8 XorCheckSum(uint8 * pBuf, uint8 len);
//  190 static uint16 ReadLightData( void );
//  191 uint8 SendData(uint8 addr, uint8 FC);
//  192 
//  193 //WSN_BEEP
//  194 void init_timer(void);
//  195 void init_port(void);
//  196 void start_pwm(void) ;
//  197 __interrupt void _IRQ_timer1(void);
//  198 
//  199 //WSN_STEP
//  200 static void MotorData(uchar data);
//  201 static void MotorCW(void);
//  202 static void MotorCCW(void);
//  203 static void MotorStop(void);
//  204 
//  205 static void Delay_MS(unsigned int Time);
//  206 #ifdef WSN_STEP
//  207 static void InitStepMotor(void);
//  208 #endif
//  209 /*********************************************************************
//  210 * @fn      SerialApp_Init
//  211 *
//  212 * @brief   This is called during OSAL tasks' initialization.
//  213 *
//  214 * @param   task_id - the Task ID assigned by OSAL.
//  215 *
//  216 * @return  none
//  217 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  218 void SerialApp_Init( uint8 task_id )
SerialApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SerialApp_Init
        CODE
//  219 {
        FUNCALL SerialApp_Init, init_port
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, init_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, LCD_write_EN_string
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     ?V0 + 0,R1
//  220   halUARTCfg_t uartConfig;
//  221   
//  222 #ifdef WSN_SENSOR
//  223   P0SEL &= ~0x20;         //设置P0.5口为普通IO
//  224   //P0DIR |= 0x20;          //设置P0.5为输出(继电器)
//  225   P0DIR &= ~0x20;          //设置P0.5为输入(光敏)
//  226   //LAMP_PIN = 1;           //高电平继电器断开;低电平继电器吸合
//  227   P0SEL &= ~0x40;         //设置P0.6为普通IO口
//  228   P0DIR &= ~0x40;         //P0.6定义为输入口
//  229   P0SEL &= ~0x80;         //P0_7配置成通用io
//  230   P0SEL &= ~0x10;         //设置P0.4为普通IO口
//  231   P0DIR &= ~0x10;         //P0.4定义为输入口
//  232 #elif defined WSN_BEEP
//  233   P0SEL &= ~0x20;         //设置P0.5口为普通IO
        ANL     0xf3,#0xdf
//  234   P0DIR |= 0x20;          //设置P0.5为输出(继电器)
        ORL     0xfd,#0x20
//  235   P0SEL &= ~0x40;         //设置P0.6为普通IO口
        ANL     0xf3,#0xbf
//  236   P0DIR &= ~0x40;         //P0.6定义为输入口
        ANL     0xfd,#0xbf
//  237   start_pwm();            //配置T1输出PWM
        ; Setup parameters for call to function init_port
        LCALL   ??init_port?relay
        ; Setup parameters for call to function init_timer
        LCALL   ??init_timer?relay
//  238   TIMER1_STOP();          //默认关闭蜂鸣器
        ANL     0xe4,#0xfc
//  239   EndDeviceID = 0x0005;   //终端5的内部编号  
//  240 #elif defined WSN_STEP
//  241   InitStepMotor();        //初始化电机IO引脚
//  242   EndDeviceID = 0x0006;   //终端6的内部编号  
//  243 #endif
//  244 
//  245 #if defined(ZDO_COORDINATOR) 
//  246   EndDeviceID = 0x0000;
        MOV     DPTR,#EndDeviceID
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  247   //LAMP_PIN = 1;
//  248   P0SEL &= ~0x20;         //设置P0.5口为普通IO
        ANL     0xf3,#0xdf
//  249   P0DIR |= 0x20;          //设置P0.5为输出(继电器)
        ORL     0xfd,#0x20
//  250 #endif
//  251   
//  252   Color    = BLACK; //前景色
        MOV     DPTR,#Color
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  253   Color_BK = GREEN; //背景色
        MOV     DPTR,#Color_BK
        MOV     A,#-0x20
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x7
        MOVX    @DPTR,A
//  254   osal_memset(AppTitle, 0, 20);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x14
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#AppTitle & 0xff
        MOV     R3,#(AppTitle >> 8) & 0xff
        LCALL   ??osal_memset?relay
//  255   //LCD上显示应用程序的标题
//  256   if(EndDeviceID == 0x0001)
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SerialApp_Init_0
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_Init_0:
        JNZ     ??SerialApp_Init_1
//  257     osal_memcpy(AppTitle, "ALD WSN-Node01", osal_strlen("ALD WSN-Node01"));
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node01">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node01">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "ALD WSN-Node01">` & 0xff
        MOV     R3,#(`?<Constant "ALD WSN-Node01">` >> 8) & 0xff
        LJMP    ??SerialApp_Init_2 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 44)
//  258   else if(EndDeviceID == 0x0002)
??SerialApp_Init_1:
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??SerialApp_Init_3
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_Init_3:
        JNZ     ??SerialApp_Init_4
//  259     osal_memcpy(AppTitle, "ALD WSN-Node02", osal_strlen("ALD WSN-Node02"));
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node02">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node02">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "ALD WSN-Node02">` & 0xff
        MOV     R3,#(`?<Constant "ALD WSN-Node02">` >> 8) & 0xff
        LJMP    ??SerialApp_Init_2 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 44)
//  260   else if(EndDeviceID == 0x0003)
??SerialApp_Init_4:
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??SerialApp_Init_5
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_Init_5:
        JNZ     ??SerialApp_Init_6
//  261     osal_memcpy(AppTitle, "ALD WSN-Node03", osal_strlen("ALD WSN-Node03"));
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node03">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node03">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "ALD WSN-Node03">` & 0xff
        MOV     R3,#(`?<Constant "ALD WSN-Node03">` >> 8) & 0xff
        SJMP    ??SerialApp_Init_2
        CFI CFA_XSP16 add(XSP16, 44)
//  262   else if(EndDeviceID == 0x0004)
??SerialApp_Init_6:
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??SerialApp_Init_7
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_Init_7:
        JNZ     ??SerialApp_Init_8
//  263     osal_memcpy(AppTitle, "ALD WSN-Node04", osal_strlen("ALD WSN-Node04"));
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node04">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node04">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "ALD WSN-Node04">` & 0xff
        MOV     R3,#(`?<Constant "ALD WSN-Node04">` >> 8) & 0xff
        SJMP    ??SerialApp_Init_2
        CFI CFA_XSP16 add(XSP16, 44)
//  264   else if(EndDeviceID == 0x0005)
??SerialApp_Init_8:
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??SerialApp_Init_9
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_Init_9:
        JNZ     ??SerialApp_Init_10
//  265     osal_memcpy(AppTitle, "ALD WSN-BEEP05", osal_strlen("ALD WSN-BEEP05"));    
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "ALD WSN-BEEP05">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "ALD WSN-BEEP05">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "ALD WSN-BEEP05">` & 0xff
        MOV     R3,#(`?<Constant "ALD WSN-BEEP05">` >> 8) & 0xff
        SJMP    ??SerialApp_Init_2
        CFI CFA_XSP16 add(XSP16, 44)
//  266   else if(EndDeviceID == 0x0006)
??SerialApp_Init_10:
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SerialApp_Init_11
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_Init_11:
        JNZ     ??SerialApp_Init_12
//  267     osal_memcpy(AppTitle, "stepping motor", osal_strlen("stepping motor")); 
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "stepping motor">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "stepping motor">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "stepping motor">` & 0xff
        MOV     R3,#(`?<Constant "stepping motor">` >> 8) & 0xff
        SJMP    ??SerialApp_Init_2
        CFI CFA_XSP16 add(XSP16, 44)
//  268   else
//  269     osal_memcpy(AppTitle, "ALD WSN-system", osal_strlen("ALD WSN-system")); 
??SerialApp_Init_12:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "ALD WSN-system">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "ALD WSN-system">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "ALD WSN-system">` & 0xff
        MOV     R3,#(`?<Constant "ALD WSN-system">` >> 8) & 0xff
??SerialApp_Init_2:
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#AppTitle & 0xff
        MOV     R3,#(AppTitle >> 8) & 0xff
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
//  270   
//  271   LCD_write_EN_string(64-7*osal_strlen((char *)AppTitle)/2,3,AppTitle); //显示标题
        ; Setup parameters for call to function LCD_write_EN_string
        MOV     R2,#0x3
        MOV     A,R2
        PUSH    A
        CFI CFA_SP SP+-1
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#AppTitle & 0xff
        MOV     R3,#(AppTitle >> 8) & 0xff
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     R0,B
        MOV     B,#0x7
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,#0x40
        CLR     C
        SUBB    A,R0
        MOV     R1,A
        MOV     R4,#AppTitle & 0xff
        MOV     A,#(AppTitle >> 8) & 0xff
        MOV     R5,A
        POP     A
        CFI CFA_SP SP+0
        MOV     R2,A
        LCALL   ??LCD_write_EN_string?relay
//  272   
//  273   SerialApp_TaskID = task_id;
        MOV     A,?V0 + 0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    @DPTR,A
//  274   //SerialApp_RxSeq = 0xC3;
//  275   afRegister( (endPointDesc_t *)&SerialApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SerialApp_epDesc & 0xff
        MOV     R3,#(SerialApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  276   RegisterForKeys( task_id );
        ; Setup parameters for call to function RegisterForKeys
        MOV     R1,?V0 + 0
        LCALL   ??RegisterForKeys?relay
//  277   
//  278   uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  279   uartConfig.baudRate             = SERIAL_APP_BAUD;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  280   uartConfig.flowControl          = FALSE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  281   uartConfig.flowControlThreshold = SERIAL_APP_THRESH; // 2x30 don't care - see uart driver.
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  282   uartConfig.rx.maxBufSize        = SERIAL_APP_RX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  283   uartConfig.tx.maxBufSize        = SERIAL_APP_TX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  284   uartConfig.idleTimeout          = SERIAL_APP_IDLE;   // 2x30 don't care - see uart driver.
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  285   uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  286   uartConfig.callBackFunc         = SerialApp_CallBack;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??SerialApp_CallBack?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??SerialApp_CallBack?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  287   HalUARTOpen (UART0, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  288   
//  289   //#if defined ( LCD_SUPPORTED )
//  290   //  HalLcdWriteString( "SerialApp", HAL_LCD_LINE_2 );
//  291   //#endif
//  292   //HalUARTWrite(UART0, "Init", 4);
//  293   //ZDO_RegisterForZDOMsg( SerialApp_TaskID, End_Device_Bind_rsp );
//  294   //ZDO_RegisterForZDOMsg( SerialApp_TaskID, Match_Desc_rsp );
//  295 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE T1CTL
//  296 
//  297 /*********************************************************************
//  298 * @fn      SerialApp_ProcessEvent
//  299 *
//  300 * @brief   Generic Application Task event processor.
//  301 *
//  302 * @param   task_id  - The OSAL assigned task ID.
//  303 * @param   events   - Bit map of events to process.
//  304 *
//  305 * @return  Event flags of all unprocessed events.
//  306 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  307 UINT16 SerialApp_ProcessEvent( uint8 task_id, UINT16 events )
SerialApp_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SerialApp_ProcessEvent
        CODE
//  308 {
        FUNCALL SerialApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, SerialApp_ProcessMSGCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, SerialApp_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  309   (void)task_id;  // Intentionally unreferenced parameter
//  310   
//  311   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??SerialApp_ProcessEvent_0
//  312   {
//  313     afIncomingMSGPacket_t *MSGpkt;
//  314     
//  315     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SerialApp_TaskID )) )
//  316     {
//  317       switch ( MSGpkt->hdr.event )
//  318       {
//  319       case ZDO_CB_MSG:
//  320         //SerialApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  321         break;
//  322         
//  323       case KEY_CHANGE:
//  324         SerialApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  325         break;
//  326         
//  327       case AF_INCOMING_MSG_CMD:
//  328         SerialApp_ProcessMSGCmd( MSGpkt );
//  329         break;
//  330         
//  331       case ZDO_STATE_CHANGE:
//  332         SerialApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  333         if ( (SerialApp_NwkState == DEV_ZB_COORD)
//  334             || (SerialApp_NwkState == DEV_ROUTER)
//  335               || (SerialApp_NwkState == DEV_END_DEVICE) )
//  336         {
//  337 #if defined(ZDO_COORDINATOR) //协调器通过串口输出自身短地址、IEEE  
//  338           Broadcast_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
//  339           Broadcast_DstAddr.endPoint = SERIALAPP_ENDPOINT;
//  340           Broadcast_DstAddr.addr.shortAddr = 0xFFFF;
//  341 #if UART_DEBUG           
//  342           PrintAddrInfo( NLME_GetShortAddr(), aExtendedAddress + Z_EXTADDR_LEN - 1);
//  343 #endif 
//  344           //初始化灯的状态，1为熄灭状态，0为点亮
//  345           NodeData[0][3] = 1;
//  346           NodeData[1][3] = 1;
//  347           NodeData[2][3] = 1;
//  348           NodeData[3][3] = 1;
//  349 #else                        //终端无线发送短地址、IEEE   
//  350           AfSendAddrInfo();
//  351 #ifdef WSN_BEEP              //蜂鸣器和气体实验时自动检测气体发现异常就报警
//  352           osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT,
//  353                              SERIALAPP_SEND_PERIODIC_TIMEOUT );
//  354           //(SERIALAPP_SEND_PERIODIC_TIMEOUT + (osal_rand() & 0x00FF)) );
//  355 #endif
//  356           
//  357 #endif
//  358         }
//  359         break;				
//  360       default:
//  361         break;
//  362       }
//  363       
//  364       osal_msg_deallocate( (uint8 *)MSGpkt );
//  365     }
//  366     
//  367     return ( events ^ SYS_EVENT_MSG );
//  368   }
//  369   
//  370   //在此事件中可以定时向协调器发送节点传感器参数信息
//  371   if ( events & SERIALAPP_SEND_PERIODIC_EVT )
        MOV     A,R6
        ANL     A,#0x3
        JNZ     $+5
        LJMP    ??SerialApp_ProcessEvent_1 & 0xFFFF
//  372   {
//  373     SerialApp_SendPeriodicMessage();
        MOV     DPTR,#`?<Constant {0}>_1`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0xd
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        MOV     C,0x80.6
        RLC     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        JNZ     ??SerialApp_ProcessEvent_2
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??SerialApp_ProcessEvent_3
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_ProcessEvent_3:
        JNZ     ??SerialApp_ProcessEvent_2
        ORL     0xe4,#0x3
        SJMP    ??SerialApp_ProcessEvent_4
??SerialApp_ProcessEvent_5:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SerialApp_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??SerialApp_ProcessEvent_6
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??SerialApp_ProcessEvent_6
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SerialApp_ProcessEvent_7
??SerialApp_ProcessEvent_6:
        MOV     DPTR,#Broadcast_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
        MOV     DPTR,#Broadcast_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPTR,#NodeData + 3
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPTR,#NodeData + 9
        MOVX    @DPTR,A
        MOV     DPTR,#NodeData + 15
        MOVX    @DPTR,A
        MOV     DPTR,#NodeData + 21
        MOVX    @DPTR,A
??SerialApp_ProcessEvent_7:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
??SerialApp_ProcessEvent_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??SerialApp_ProcessEvent_8
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SerialApp_ProcessEvent_9
        ADD     A,#0x49
        JZ      ??SerialApp_ProcessEvent_5
        SJMP    ??SerialApp_ProcessEvent_7
??SerialApp_ProcessEvent_9:
        ; Setup parameters for call to function SerialApp_ProcessMSGCmd
        LCALL   ??SerialApp_ProcessMSGCmd?relay
        SJMP    ??SerialApp_ProcessEvent_7
??SerialApp_ProcessEvent_8:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SerialApp_ProcessEvent_10:
        MOV     R3,A
        LJMP    ??SerialApp_ProcessEvent_11 & 0xFFFF
??SerialApp_ProcessEvent_2:
        ANL     0xe4,#0xfc
//  374     
//  375     osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT,
//  376                        (SERIALAPP_SEND_PERIODIC_TIMEOUT + (osal_rand() & 0x00FF)) );
??SerialApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0x18
        MOV     R4,A
        CLR     A
        ADDC    A,#0x3
        MOV     R5,A
        MOV     R2,#0x3
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  377     
//  378     return (events ^ SERIALAPP_SEND_PERIODIC_EVT);
        MOV     A,R6
        XRL     A,#0x3
??SerialApp_ProcessEvent_12:
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SerialApp_ProcessEvent_10
//  379   }
//  380   
//  381   if ( events & SERIALAPP_SEND_EVT )
??SerialApp_ProcessEvent_1:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SerialApp_ProcessEvent_13
//  382   {
//  383     SerialApp_Send();
        ; Setup parameters for call to function SerialApp_Send
        LCALL   ??SerialApp_Send?relay
//  384     return ( events ^ SERIALAPP_SEND_EVT );
        MOV     A,R6
        XRL     A,#0x1
        SJMP    ??SerialApp_ProcessEvent_12
//  385   }
//  386   
//  387   if ( events & SERIALAPP_RESP_EVT )
??SerialApp_ProcessEvent_13:
        ANL     A,#0x2
        JZ      ??SerialApp_ProcessEvent_14
//  388   {
//  389     SerialApp_Resp();
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
        MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 0,#SerialApp_RspBuf & 0xff
        MOV     ?V0 + 1,#(SerialApp_RspBuf >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R1,#0x0
        MOV     R4,#SerialApp_epDesc & 0xff
        MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
        MOV     R2,#SerialApp_RxAddr & 0xff
        MOV     R3,#(SerialApp_RxAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R1
        JZ      ??SerialApp_ProcessEvent_15
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  390     return ( events ^ SERIALAPP_RESP_EVT );
??SerialApp_ProcessEvent_15:
        MOV     A,R6
        XRL     A,#0x2
        SJMP    ??SerialApp_ProcessEvent_12
//  391   }
//  392   
//  393   return ( 0 ); 
??SerialApp_ProcessEvent_14:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SerialApp_ProcessEvent_11:
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
        REQUIRE T1CTL
        REQUIRE _A_P0
//  394 }
//  395 
//  396 /*********************************************************************
//  397 * @fn      SerialApp_HandleKeys
//  398 *
//  399 * @brief   Handles all key events for this device.
//  400 *
//  401 * @param   shift - true if in shift/alt.
//  402 * @param   keys  - bit field for key events.
//  403 *
//  404 * @return  none
//  405 */
//  406 void SerialApp_HandleKeys( uint8 shift, uint8 keys )
//  407 { 
//  408   if ( keys & HAL_KEY_SW_6 ) //按S1键启动或停止终端定时上报数据 
//  409   {
//  410 #ifdef WSN_SENSOR
//  411     if(SendFlag == 0)
//  412     {
//  413       SendFlag = 1;
//  414       HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  415       osal_start_timerEx( SerialApp_TaskID,
//  416                          SERIALAPP_SEND_PERIODIC_EVT,
//  417                          SERIALAPP_SEND_PERIODIC_TIMEOUT );
//  418     }
//  419     else
//  420     {      
//  421       SendFlag = 0;
//  422       HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
//  423       osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT);
//  424     }
//  425 #endif
//  426   }
//  427   
//  428   if ( keys & HAL_KEY_SW_1 ) //按S2
//  429   {
//  430     //LAMP_PIN = ~LAMP_PIN;
//  431   }
//  432   
//  433 }
//  434 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  435 void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
SerialApp_ProcessMSGCmd:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SerialApp_ProcessMSGCmd
        CODE
//  436 {
        FUNCALL SerialApp_ProcessMSGCmd, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, LCD_write_EN_string
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, LCD_write_EN_string
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, LCD_write_CN_string
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, LCD_write_CN_string
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, LCD_write_EN_string
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, LCD_write_CN_string
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, LCD_write_CN_string
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, LCD_write_EN_string
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, LCD_write_EN_string
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 45
        MOV     A,#-0x2d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 56)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  437   uint16 i, shortAddr;
//  438   uint8 *pIeeeAddr; 
//  439   uint8 delay;
//  440   uint8 afRxData[30]={0};
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>` & 0xff
        MOV     A,#0x1e
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  441   uint8 wendu[3];
//  442   uint8 shidu[3];
//  443   memset(wendu, 0, 3);
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 56)
//  444   memset(shidu, 0, 3);
        ; Setup parameters for call to function memset
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 56)
//  445   char state0;
//  446   char gas;
//  447   char secustate;
//  448   char str[9];
//  449   osal_memset(str, 0, 9);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x9
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  450   //查询单个终端上所有传感器的数据 3A 00 01 02 39 23  响应：3A 00 01 02 00 00 00 00 xor 23
//  451   switch ( pkt->clusterId )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for SerialApp_ProcessMSGCmd>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SerialApp_ProcessMSGCmd_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SerialApp_ProcessMSGCmd_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SerialApp_ProcessMSGCmd_2
        CODE
//  452   {
//  453     // A message with a serial data block to be transmitted on the serial port.
//  454   case SERIALAPP_CLUSTERID:
//  455     osal_memcpy(afRxData, pkt->cmd.Data, pkt->cmd.DataLength);
??SerialApp_ProcessMSGCmd_1:
        ; Setup parameters for call to function osal_memcpy
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 59)
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 56)
//  456     switch(afRxData[0]) //简单协议命令字解析
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x3a
        JZ      $+5
        LJMP    ??SerialApp_ProcessMSGCmd_0 & 0xFFFF
//  457     {
//  458 #if defined(ZDO_COORDINATOR)
//  459     case 0x3B:  //收到终端无线发过来的短地址和IEEE地址,通过串口输出显示      
//  460       shortAddr=(afRxData[1]<<8)|afRxData[2];
//  461       pIeeeAddr = &afRxData[3];
//  462 #if UART_DEBUG
//  463       PrintAddrInfo(shortAddr, pIeeeAddr + Z_EXTADDR_LEN - 1);
//  464 #endif   
//  465       break;
//  466     case 0x3A:	
//  467       if(afRxData[3] == 0x02) //收到终端传过来的传感器数据并保存
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??SerialApp_ProcessMSGCmd_0 & 0xFFFF
//  468       {  
//  469         NodeData[afRxData[2]-1][0] = afRxData[4];
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     B,#0x6
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#NodeData & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(NodeData >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#-0x6
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_12:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  470         NodeData[afRxData[2]-1][1] = afRxData[5];
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#-0x5
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_13:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  471         NodeData[afRxData[2]-1][2] = afRxData[6];
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#-0x4
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_14:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  472         NodeData[afRxData[2]-1][3] = afRxData[7];
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     A,R0
        ADD     A,#-0x3
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  473         NodeData[afRxData[2]-1][4] = afRxData[9];
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#-0x2
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_16:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  474         NodeData[afRxData[2]-1][5] = 0x00;
        MOV     A,R0
        ADD     A,#-0x1
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_17:
        CLR     A
        MOVX    @DPTR,A
//  475         //HalUARTWrite (UART0, NodeData[afRxData[3]-1], 4);
//  476         //state=afRxData[7];
//  477         state0=afRxData[8];
//  478         sprintf(str, "BRI:%03d ", afRxData[7]);
        ; Setup parameters for call to function sprintf
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     R4,#`?<Constant "BRI:%03d ">` & 0xff
        MOV     R5,#(`?<Constant "BRI:%03d ">` >> 8) & 0xff
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 56)
//  479         gas=afRxData[6];
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
//  480         secustate=afRxData[9];
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R7,A
//  481         wendu[0]=afRxData[4]/10+0x30;
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_10:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine1 & 0xFFFF
//  482         wendu[1]=afRxData[4]%10+0x30;
??CrossCallReturnLabel_0:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  483         shidu[0]=afRxData[5]/10+0x30;
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine1 & 0xFFFF
//  484         shidu[1]=afRxData[5]%10+0x30;
??CrossCallReturnLabel_1:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  485         //HalUARTWrite (UART0, NodeData[afRxData[2]-1], 4);
//  486         LCD_write_EN_string(45,80,wendu);
        ; Setup parameters for call to function LCD_write_EN_string
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x50
        MOV     R1,#0x2d
        LCALL   ??LCD_write_EN_string?relay
//  487         LCD_write_EN_string(45,95,shidu);
        ; Setup parameters for call to function LCD_write_EN_string
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x5f
        MOV     R1,#0x2d
        LCALL   ??LCD_write_EN_string?relay
//  488         LCD_write_CN_string(60,80,"℃");
        ; Setup parameters for call to function LCD_write_CN_string
        MOV     R4,#`?<Constant "\\241\\346">` & 0xff
        MOV     R5,#(`?<Constant "\\241\\346">` >> 8) & 0xff
        MOV     R2,#0x50
        MOV     R1,#0x3c
        LCALL   ??LCD_write_CN_string?relay
//  489         LCD_write_CN_string(60,95,"％");
        ; Setup parameters for call to function LCD_write_CN_string
        MOV     R4,#`?<Constant "\\243\\245">` & 0xff
        MOV     R5,#(`?<Constant "\\243\\245">` >> 8) & 0xff
        MOV     R2,#0x5f
        MOV     R1,#0x3c
        LCALL   ??LCD_write_CN_string?relay
//  490         LCD_write_EN_string(70,110,str);
        ; Setup parameters for call to function LCD_write_EN_string
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x6e
        MOV     R1,#0x46
        LCALL   ??LCD_write_EN_string?relay
//  491         if(state0==0x30)
//  492         {
//  493           //LAMP_PIN =0;
//  494         }
//  495         else if(state0==0x31)
//  496         {
//  497           //LAMP_PIN =1;
//  498         }
//  499         if(gas==0x00)
        MOV     A,R6
        JNZ     ??SerialApp_ProcessMSGCmd_3
//  500         {
//  501           LCD_write_CN_string(9,110,"气体异常");
        ; Setup parameters for call to function LCD_write_CN_string
        MOV     R4,#`?<Constant "\\306\\370\\314\\345\\322\\354\\263\\243">` & 0xff
        MOV     R5,#(`?<Constant "\\306\\370\\314\\345\\322\\354\\263\\243">` >> 8) & 0xff
        SJMP    ??SerialApp_ProcessMSGCmd_4
//  502         }
//  503         else
//  504         {
//  505           LCD_write_CN_string(9,110,"气体正常");
??SerialApp_ProcessMSGCmd_3:
        ; Setup parameters for call to function LCD_write_CN_string
        MOV     R4,#`?<Constant "\\306\\370\\314\\345\\325\\375\\263\\243">` & 0xff
        MOV     R5,#(`?<Constant "\\306\\370\\314\\345\\325\\375\\263\\243">` >> 8) & 0xff
??SerialApp_ProcessMSGCmd_4:
        MOV     R2,#0x6e
        MOV     R1,#0x9
        LCALL   ??LCD_write_CN_string?relay
//  506         }
//  507         if(secustate==0x00)
        MOV     A,R7
        JNZ     ??SerialApp_ProcessMSGCmd_5
//  508         {
//  509           LCD_write_EN_string(70,80,"security");
        ; Setup parameters for call to function LCD_write_EN_string
        MOV     R4,#`?<Constant "security">` & 0xff
        MOV     R5,#(`?<Constant "security">` >> 8) & 0xff
??SerialApp_ProcessMSGCmd_6:
        MOV     R2,#0x50
        MOV     R1,#0x46
        LCALL   ??LCD_write_EN_string?relay
        SJMP    ??SerialApp_ProcessMSGCmd_0
//  510         }
//  511         else
//  512         {
//  513           LCD_write_EN_string(70,80,"insecurity");
??SerialApp_ProcessMSGCmd_5:
        ; Setup parameters for call to function LCD_write_EN_string
        MOV     R4,#`?<Constant "insecurity">` & 0xff
        MOV     R5,#(`?<Constant "insecurity">` >> 8) & 0xff
        SJMP    ??SerialApp_ProcessMSGCmd_6
//  514         }
//  515       }
//  516       
//  517 #if UART_DEBUG
//  518       HalUARTWrite (UART0, NodeData[afRxData[3]-1], 4); //调试时通过串口输出
//  519       HalUARTWrite (UART0, "\n", 1);
//  520 #endif            
//  521       break;
//  522 #else  
//  523     case 0x3A:  //开关灯设备          
//  524       if(afRxData[3] == 0x0A || afRxData[3] == 0x0B || afRxData[3] == 0x0C) //控制终端          
//  525       {  
//  526         if(EndDeviceID == afRxData[2] || afRxData[2]==0xFF)
//  527         {
//  528           if(afRxData[4] == 0)
//  529           {
//  530             //LAMP_PIN = 0;
//  531             HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
//  532           }
//  533           else
//  534           {
//  535             //LAMP_PIN = 1;
//  536             HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
//  537           }
//  538         }
//  539         break;
//  540       }	
//  541       else if(afRxData[3] == 0x07)      //蜂鸣器 功能码为07
//  542       {
//  543         if(EndDeviceID == afRxData[2] || afRxData[2] == 0xFF)  //蜂鸣器 EndDeviceID为05
//  544         {
//  545           if(afRxData[4] == 0)
//  546           {
//  547             TIMER1_STOP();               //收到协调发出的蜂鸣器不响的指令
//  548             HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
//  549           }
//  550           else
//  551           {
//  552             TIMER1_RUN();               //收到协调发出的蜂鸣器响的指令
//  553             HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
//  554           }
//  555         } 
//  556       }
//  557       else if(afRxData[3] == 0x08)    //电机 功能码为08
//  558       {
//  559         if(EndDeviceID == afRxData[2] || afRxData[2] == 0xFF)//电机 EndDeviceID为06
//  560         {
//  561           ucEdDir = afRxData[4];      //保存旋转方向给调速用
//  562           MotorStop();                //停止转动
//  563           if(afRxData[4] == 0x02)   
//  564           {
//  565             for(i=0;i<2000;i++)
//  566               MotorCW();              //顺时针转动
//  567           }
//  568           else if(afRxData[4] == 0x01)//左转标记 
//  569           {
//  570             for(i=0;i<2000;i++)
//  571               MotorCCW();             //逆时针转动
//  572           }
//  573         }
//  574       }
//  575          else if(afRxData[3] == 0x09)      //蜂鸣器 功能码为07
//  576       {
//  577         if(EndDeviceID == afRxData[2] || afRxData[2] == 0xFF)  //蜂鸣器 EndDeviceID为05
//  578         {
//  579           if(afRxData[4] == 0)
//  580           {
//  581             LAMP_PIN=1;
//  582           }
//  583           else
//  584           {
//  585             LAMP_PIN=0;
//  586           }
//  587         } 
//  588       }
//  589 #endif
//  590       default :
//  591         break;
//  592       }
//  593       break;
//  594       // A response to a received serial data block.
//  595     case SERIALAPP_CLUSTERID2:
//  596       if ((pkt->cmd.Data[1] == SerialApp_TxSeq) &&
//  597           ((pkt->cmd.Data[0] == OTA_SUCCESS) || (pkt->cmd.Data[0] == OTA_DUP_MSG)))
??SerialApp_ProcessMSGCmd_2:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#SerialApp_TxSeq
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??SerialApp_ProcessMSGCmd_7
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        JZ      ??SerialApp_ProcessMSGCmd_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_20:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SerialApp_ProcessMSGCmd_7
//  598       {
//  599         SerialApp_TxLen = 0;
??SerialApp_ProcessMSGCmd_8:
        MOV     DPTR,#SerialApp_TxLen
        CLR     A
        MOVX    @DPTR,A
//  600         osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_EVT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,A
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
        SJMP    ??SerialApp_ProcessMSGCmd_0
//  601       }
//  602       else
//  603       {
//  604         // Re-start timeout according to delay sent from other device.
//  605         delay = BUILD_UINT16( pkt->cmd.Data[2], pkt->cmd.Data[3] );
//  606         osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_EVT, delay );
??SerialApp_ProcessMSGCmd_7:
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine2 & 0xFFFF
//  607       }
//  608       break;
//  609       
//  610     default:
//  611       break;
//  612     }
??CrossCallReturnLabel_3:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  613   }
??SerialApp_ProcessMSGCmd_0:
        MOV     A,#0x2d
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+-1
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+-1
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+-1
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     B,#0xa
        DIV     AB
        ADD     A,#0x30
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 59)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_19:
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_5
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_2
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_3
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_21:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_4
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_5
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_2
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_3
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        MOVX    @DPTR,A
        MOV     A,R0
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        ADD     A,#0x30
        RET
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37
//  614   

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  615 uint8 SendData(uint8 addr, uint8 FC)
SendData:
        CFI Block cfiBlock38 Using cfiCommon0
        CFI Function SendData
        CODE
//  616 {
        FUNCALL SendData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, XorCheckSum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, XorCheckSum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
//  617   uint8 ret, i, index=4;
        MOV     ?V0 + 4,#0x4
//  618   
//  619   TxBuffer[0] = 0x3A;
        MOV     DPTR,#TxBuffer
        MOV     A,#0x3a
        MOVX    @DPTR,A
//  620   TxBuffer[1] = 0x00;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  621   TxBuffer[2] = addr;
        MOV     A,R1
        INC     DPTR
        MOVX    @DPTR,A
//  622   TxBuffer[3] = FC;
        MOV     A,R2
        INC     DPTR
        MOVX    @DPTR,A
//  623   
//  624   switch(FC)
        DEC     A
        JZ      ??SendData_0
        DEC     A
        JZ      ??SendData_1
        LJMP    ??SendData_2 & 0xFFFF
//  625   {
//  626   case 0x01: //查询所有终端传感器的数据
//  627     for (i=0; i<MAX_NODE; i++)
??SendData_0:
        MOV     R6,#0x0
//  628     {
//  629       osal_memcpy(&TxBuffer[index], NodeData[i], 5);
??SendData_3:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R6
        MOV     B,#0x6
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#NodeData & 0xff
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,#(NodeData >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 8,?V0 + 0
        MOV     ?V0 + 9,A
        MOV     ?V0 + 10,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     ?V0 + 0,?V0 + 4
        MOV     A,#TxBuffer & 0xff
        ADD     A,?V0 + 0
        MOV     R2,A
        MOV     A,#(TxBuffer >> 8) & 0xff
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  630       index += 5;
        MOV     A,#0x5
        ADD     A,?V0 + 4
        MOV     ?V0 + 4,A
//  631     }
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x4
        JC      ??SendData_3
//  632     TxBuffer[index] = XorCheckSum(TxBuffer, index);
        MOV     DPL,?V0 + 4
        MOV     ?V0 + 0,DPL
        MOV     A,#TxBuffer & 0xff
        ADD     A,?V0 + 0
        MOV     R6,A
        MOV     A,#(TxBuffer >> 8) & 0xff
        ADDC    A,#0x0
        MOV     R7,A
        ; Setup parameters for call to function XorCheckSum
        MOV     R1,?V0 + 4
        MOV     R2,#TxBuffer & 0xff
        MOV     R3,#(TxBuffer >> 8) & 0xff
        LCALL   ??XorCheckSum?relay
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
//  633     TxBuffer[index+1] = 0x23; 
        INC     DPTR
        MOV     A,#0x23
        MOVX    @DPTR,A
//  634     
//  635     HalUARTWrite(UART0, TxBuffer, index+2);
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,#0x0
        MOV     R5,A
??SendData_4:
        MOV     R2,#TxBuffer & 0xff
        MOV     R3,#(TxBuffer >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  636     ret = 1;
        MOV     R1,#0x1
//  637     break;
        SJMP    ??SendData_5
//  638   case 0x02: //查询单个终端上所有传感器的数据
//  639     osal_memcpy(&TxBuffer[index], NodeData[addr-1], 4);
??SendData_1:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R1
        MOV     B,#0x6
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#(NodeData + 250) & 0xff
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,#((NodeData - 6) >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#(TxBuffer + 4) & 0xff
        MOV     R3,#((TxBuffer + 4) >> 8) & 0xff
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  640     index += 4;
//  641     TxBuffer[index] = XorCheckSum(TxBuffer, index);
        ; Setup parameters for call to function XorCheckSum
        MOV     R1,#0x8
        MOV     R2,#TxBuffer & 0xff
        MOV     R3,#(TxBuffer >> 8) & 0xff
        LCALL   ??XorCheckSum?relay
        MOV     A,R1
        MOV     DPTR,#TxBuffer + 8
        MOVX    @DPTR,A
//  642     TxBuffer[index+1] = 0x23; 
        INC     DPTR
        MOV     A,#0x23
        MOVX    @DPTR,A
//  643     HalUARTWrite(UART0, TxBuffer, index+2);		
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xa
        MOV     R5,#0x0
        SJMP    ??SendData_4
//  644     ret = 1;
//  645     break;   
//  646   default:
//  647     ret = 0;
??SendData_2:
        MOV     R1,#0x0
//  648     break;
//  649   }
//  650   
//  651   return ret;
??SendData_5:
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock38
//  652 }
//  653 
//  654 /*********************************************************************
//  655 * @fn      SerialApp_Send
//  656 *
//  657 * @brief   Send data OTA.
//  658 *
//  659 * @param   none
//  660 *  3A000507013923    3A 00 01 01 3A 23
//  661 * @return  none
//  662 */
//  663 #pragma optimize=none  

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  664 static void SerialApp_Send(void)
SerialApp_Send:
        CFI Block cfiBlock39 Using cfiCommon0
        CFI Function SerialApp_Send
        CODE
//  665 {
        FUNCALL SerialApp_Send, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, GetDataLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, XorCheckSum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  666   uint8 len=0, addr, FC;
        MOV     R7,#0x0
//  667   uint8 checksum=0;
        MOV     ?V0 + 0,#0x0
//  668 
//  669   if (!SerialApp_TxLen && 
//  670       (SerialApp_TxLen = HalUARTRead(UART0, SerialApp_TxBuf, SERIAL_APP_TX_MAX)))
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x14
        MOV     R5,#0x0
        MOV     R2,#SerialApp_TxBuf & 0xff
        MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
        MOV     A,R2
        MOV     DPTR,#SerialApp_TxLen
        MOVX    @DPTR,A
        JNZ     $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
//  671   {
//  672     if (SerialApp_TxLen)
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
//  673     {
//  674       SerialApp_TxLen = 0;
        MOV     DPTR,#SerialApp_TxLen
        MOV     A,#0x0
        MOVX    @DPTR,A
//  675       if(SerialApp_TxBuf[0] == 0x3A)
        MOV     DPTR,#SerialApp_TxBuf
        MOVX    A,@DPTR
        XRL     A,#0x3a
        JZ      $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
//  676       {
//  677         addr = SerialApp_TxBuf[2];
        MOV     DPTR,#SerialApp_TxBuf + 2
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  678         FC = SerialApp_TxBuf[3];
        MOV     DPTR,#SerialApp_TxBuf + 3
        MOVX    A,@DPTR
        MOV     R6,A
//  679         len = GetDataLen(FC); 
        ; Setup parameters for call to function GetDataLen
        MOV     A,R6
        MOV     R1,A
        LCALL   ??GetDataLen?relay
        MOV     A,R1
        MOV     R7,A
//  680         len += 4;
        MOV     A,#0x4
        ADD     A,R7
        MOV     R7,A
//  681         checksum = XorCheckSum(SerialApp_TxBuf, len);
        ; Setup parameters for call to function XorCheckSum
        MOV     A,R7
        MOV     R1,A
        MOV     R2,#SerialApp_TxBuf & 0xff
        MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
        LCALL   ??XorCheckSum?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
//  682 
//  683         //接收数据正确返回相应数据
//  684         if(checksum == SerialApp_TxBuf[len] && SerialApp_TxBuf[len+1] == 0x23)
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,#SerialApp_TxBuf & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#(SerialApp_TxBuf >> 8) & 0xff
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,?V0 + 0
        JZ      $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,#(SerialApp_TxBuf + 1) & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#((SerialApp_TxBuf + 1) >> 8) & 0xff
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x23
        JZ      $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
//  685         {
//  686           if(FC == 7 || FC == 8 || FC == 0x0A || FC == 0x0B || FC == 0x0C || FC == 9) //控制终端
        MOV     A,#0x7
        XRL     A,R6
        JZ      ??SerialApp_Send_1
        MOV     A,#0x8
        XRL     A,R6
        JZ      ??SerialApp_Send_1
        MOV     A,#0xa
        XRL     A,R6
        JZ      ??SerialApp_Send_1
        MOV     A,#0xb
        XRL     A,R6
        JZ      ??SerialApp_Send_1
        MOV     A,#0xc
        XRL     A,R6
        JZ      ??SerialApp_Send_1
        MOV     A,#0x9
        XRL     A,R6
        JZ      $+5
        LJMP    ??SerialApp_Send_2 & 0xFFFF
//  687           {                            
//  688             if (afStatus_SUCCESS == AF_DataRequest(&Broadcast_DstAddr,
//  689                                                    (endPointDesc_t *)&SerialApp_epDesc,
//  690                                                    SERIALAPP_CLUSTERID,
//  691                                                    len+2, SerialApp_TxBuf,
//  692                                                    &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
??SerialApp_Send_1:
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 2,#0x1e
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 2,#SerialApp_MsgID & 0xff
        MOV     ?V0 + 3,#(SerialApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 2,#SerialApp_TxBuf & 0xff
        MOV     ?V0 + 3,#(SerialApp_TxBuf >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,?V0 + 2
        ADD     A,#0x2
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,#0x0
        MOV     R4,#SerialApp_epDesc & 0xff
        MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
        MOV     R2,#Broadcast_DstAddr & 0xff
        MOV     R3,#(Broadcast_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        JNZ     ??SerialApp_Send_3
//  693             {
//  694               if(FC == 0x0A) //如果开启自动刷新则不需要这步操作
        MOV     A,#0xa
        XRL     A,R6
        JNZ     ??SerialApp_Send_4
//  695                 NodeData[addr-1][3] = SerialApp_TxBuf[len-1];  //更新缓冲区灯的状态
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,#(SerialApp_TxBuf + 255) & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#((SerialApp_TxBuf - 1) >> 8) & 0xff
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,?V0 + 1
        MOV     R0,?V0 + 1
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x6
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x6
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(NodeData + 253) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((NodeData - 3) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  696               
//  697               HalUARTWrite(UART0, SerialApp_TxBuf, len+2); //无线发送成功后原样返回给上位机	
??SerialApp_Send_4:
        ; Setup parameters for call to function HalUARTWrite
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,?V0 + 2
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,#SerialApp_TxBuf & 0xff
        MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        SJMP    ??SerialApp_Send_0
//  698               
//  699               //HalUARTWrite(UART0,"1111", 4);
//  700               //osal_set_event(SerialApp_TaskID, SERIALAPP_SEND_EVT);
//  701             }
//  702             else  //暂时没发现错误，关闭终端发送也正常。无线发送失败后将数据位和校验位置0返给上位机	
//  703             {
//  704               SerialApp_TxBuf[len-1] = 0x00;
??SerialApp_Send_3:
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,#(SerialApp_TxBuf + 255) & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#((SerialApp_TxBuf - 1) >> 8) & 0xff
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  705               SerialApp_TxBuf[len] = 0x00;
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,#SerialApp_TxBuf & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#(SerialApp_TxBuf >> 8) & 0xff
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  706               HalUARTWrite(UART0, SerialApp_TxBuf, len+2);
        ; Setup parameters for call to function HalUARTWrite
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,?V0 + 2
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,#SerialApp_TxBuf & 0xff
        MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        SJMP    ??SerialApp_Send_0
//  707             }
//  708           }
//  709           else
//  710           {
//  711             SendData(addr, FC);   //查询操作
??SerialApp_Send_2:
        ; Setup parameters for call to function SendData
        MOV     A,R6
        MOV     R2,A
        MOV     R1,?V0 + 1
        LCALL   ??SendData?relay
        MOV     A,R1
//  712           }
//  713         }
//  714       }
//  715     }
//  716   }
//  717 }
??SerialApp_Send_0:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock39
//  718 
//  719 /*********************************************************************
//  720 * @fn      SerialApp_Resp
//  721 *
//  722 * @brief   Send data OTA.
//  723 *
//  724 * @param   none
//  725 *
//  726 * @return  none
//  727 */
//  728 static void SerialApp_Resp(void)
//  729 {
//  730   if (afStatus_SUCCESS != AF_DataRequest(&SerialApp_RxAddr,
//  731                                          (endPointDesc_t *)&SerialApp_epDesc,
//  732                                          SERIALAPP_CLUSTERID2,
//  733                                          SERIAL_APP_RSP_CNT, SerialApp_RspBuf,
//  734                                          &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
//  735   {
//  736     osal_set_event(SerialApp_TaskID, SERIALAPP_RESP_EVT);
//  737   }
//  738 }
//  739 
//  740 /*********************************************************************
//  741 * @fn      SerialApp_CallBack
//  742 *
//  743 * @brief   Send data OTA.
//  744 *
//  745 * @param   port - UART port.
//  746 * @param   event - the UART port event flag.
//  747 *
//  748 * @return  none
//  749 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  750 static void SerialApp_CallBack(uint8 port, uint8 event)
SerialApp_CallBack:
        CFI Block cfiBlock40 Using cfiCommon0
        CFI Function SerialApp_CallBack
        CODE
//  751 {
        FUNCALL SerialApp_CallBack, SerialApp_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  752   (void)port;
//  753   
//  754   if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
//  755 #if SERIAL_APP_LOOPBACK
//  756       (SerialApp_TxLen < SERIAL_APP_TX_MAX))
//  757 #else
//  758     !SerialApp_TxLen)
        MOV     A,#0x7
        ANL     A,R6
        JZ      ??SerialApp_CallBack_0
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        JNZ     ??SerialApp_CallBack_0
//  759 #endif
//  760   {
//  761     SerialApp_Send();
        ; Setup parameters for call to function SerialApp_Send
        LCALL   ??SerialApp_Send?relay
//  762   }
//  763 }
??SerialApp_CallBack_0:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock40
//  764 
//  765 
//  766 //--------------------------------------------------------------------------------------
//  767 //查询单个终端上所有传感器的数据 3A 00 01 02 XX 23  响应：3A 00 01 02 00 00 00 00 xor 23
//  768 void SerialApp_SendPeriodicMessage( void )
//  769 {
//  770   uint8 SendBuf[13]={0};
//  771   char state0;
//  772 #ifdef WSN_SENSOR  
//  773   SendBuf[0] = 0x3A;                          
//  774   SendBuf[1] = HI_UINT16( EndDeviceID );
//  775   SendBuf[2] = LO_UINT16( EndDeviceID );
//  776   SendBuf[3] = 0x02;                       //FC
//  777   
//  778   DHT11();                //获取温湿度
//  779   SendBuf[4] = wendu;  
//  780   SendBuf[5] = shidu;  
//  781   SendBuf[6] = GetGas();  //获取气体传感器的状态 
//  782    if(DATA_PIN05 == 1)
//  783     state0 = 0x30;       //当光敏电阻处于黑暗中时P0.5高电平
//  784   else
//  785     state0 = 0x31;
//  786   SendBuf[7]=ReadLightData();
//  787     //SendBuf[7]=state;//获得光敏电阻的状态
//  788   //SendBuf[7] = GetLamp(); //获得灯的状态
//  789   SendBuf[8]=state0;//获得光敏电阻的状态
//  790   SendBuf[9]=GetSecurity();
//  791   SendBuf[10] = XorCheckSum(SendBuf, 11);
//  792   SendBuf[11] = 0x23;
//  793   
//  794   SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  795   SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
//  796   SerialApp_TxAddr.addr.shortAddr = 0x00;  
//  797   if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
//  798                       SERIALAPP_CLUSTERID,
//  799                       12,
//  800                       SendBuf,
//  801                       &SerialApp_MsgID, 
//  802                       0, 
//  803                       AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
//  804   {
//  805     // Successfully requested to be sent.
//  806   }
//  807   else
//  808   {
//  809     // Error occurred in request to send.
//  810   }
//  811 #endif
//  812   
//  813 #ifdef WSN_BEEP
//  814   SendBuf[0] = GetGas();  //获取气体传感器的状态 0为有害气体   1为正常
//  815   
//  816   //终端5执行蜂鸣器操作   蜂鸣器动作电平 1: 响 ，0: 不响
//  817   if(SendBuf[0] == 0 && EndDeviceID == 5)
//  818   {
//  819     TIMER1_RUN();      //检测到异常气体时蜂鸣器响
//  820   }
//  821   else
//  822   {
//  823     TIMER1_STOP();    //气体正常不响
//  824   }    
//  825 #endif
//  826 }
//  827 
//  828 
//  829 #if UART_DEBUG   
//  830 //通过串口输出短地址 IEEE
//  831 void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr)
//  832 {
//  833   uint8 strIeeeAddr[17] = {0};
//  834   char  buff[30] = {0};    
//  835   
//  836   //获得短地址   
//  837   sprintf(buff, "shortAddr:%04X   IEEE:", shortAddr);  
//  838   
//  839   //获得IEEE地址
//  840   GetIeeeAddr(pIeeeAddr, strIeeeAddr);
//  841   
//  842   HalUARTWrite (UART0, (uint8 *)buff, strlen(buff));
//  843   Delay_ms(10);
//  844   HalUARTWrite (UART0, strIeeeAddr, 16); 
//  845   HalUARTWrite (UART0, "\n", 1);
//  846 }
//  847 
//  848 void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr)
//  849 {
//  850   uint8 i;
//  851   uint8 *xad = pIeeeAddr;
//  852   
//  853   for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
//  854   {
//  855     uint8 ch;
//  856     ch = (*xad >> 4) & 0x0F;
//  857     *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
//  858     i++;
//  859     ch = *xad & 0x0F;
//  860     *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
//  861     i++;
//  862   }
//  863 }
//  864 #endif  
//  865 
//  866 void AfSendAddrInfo(void)
//  867 {
//  868   uint16 shortAddr;
//  869   uint8 strBuf[11]={0};  
//  870   
//  871   SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  872   SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
//  873   SerialApp_TxAddr.addr.shortAddr = 0x00;   
//  874   
//  875   shortAddr=NLME_GetShortAddr();
//  876   
//  877   strBuf[0] = 0x3B;                          //发送地址给协调器 可用于点播
//  878   strBuf[1] = HI_UINT16( shortAddr );        //存放短地址高8位
//  879   strBuf[2] = LO_UINT16( shortAddr );        //存放短地址低8位
//  880   
//  881   osal_memcpy(&strBuf[3], NLME_GetExtAddr(), 8);
//  882   
//  883   if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
//  884                       SERIALAPP_CLUSTERID,
//  885                       11,
//  886                       strBuf,
//  887                       &SerialApp_MsgID, 
//  888                       0, 
//  889                       AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
//  890   {
//  891   }
//  892   else
//  893   {
//  894     // Error occurred in request to send.
//  895   }   
//  896 }
//  897 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  898 uint8 XorCheckSum(uint8 * pBuf, uint8 len)
XorCheckSum:
        CFI Block cfiBlock41 Using cfiCommon0
        CFI Function XorCheckSum
        CODE
//  899 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
//  900   uint8 i;
//  901   uint8 byRet=0;
//  902   
//  903   if(len == 0)
        JNZ     ??XorCheckSum_0
//  904     return byRet;
        MOV     R1,#0x0
        SJMP    ??XorCheckSum_1
//  905   else
//  906     byRet = pBuf[0];
??XorCheckSum_0:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R1,A
//  907   
//  908   for(i = 1; i < len; i ++)
        MOV     R0,#0x1
        SJMP    ??XorCheckSum_2
//  909     byRet = byRet ^ pBuf[i];
??XorCheckSum_3:
        MOV     ?V0 + 0,R0
        MOV     A,R2
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XCH     A,R1
        XRL     A,R1
        MOV     R1,A
        INC     R0
??XorCheckSum_2:
        MOV     A,R0
        CLR     C
        SUBB    A,R4
        JC      ??XorCheckSum_3
//  910   
//  911   return byRet;
??XorCheckSum_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock41
//  912 }
//  913 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  914 uint8 GetDataLen(uint8 fc)
GetDataLen:
        CFI Block cfiBlock42 Using cfiCommon0
        CFI Function GetDataLen
        CODE
//  915 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
//  916   uint8 len=0;
        MOV     R1,#0x0
//  917   switch(fc)
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for GetDataLen>_0`:
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        7
        DATA
        DATA8
        DATA
        DATA8
        DB        13
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GetDataLen_0
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GetDataLen_1
        CODE
//  918   {
//  919   case 0x07:
//  920   case 0x08:
//  921   case 0x0A:
//  922   case 0x0B:
//  923   case 0x0C:
//  924   case 0x0D:
//  925   case 0x09:
//  926     len = 1;
??GetDataLen_0:
        INC     R1
        CFI EndBlock cfiBlock42
//  927     break;
//  928   }
//  929   
//  930   return len;
??GetDataLen_1:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  931 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock43 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock43
//  932 
//  933 //获得P0_5 继电器引脚的电平
//  934 uint8 GetLamp( void )
//  935 {
//  936   uint8 ret;
//  937   
//  938  //if(LAMP_PIN == 0)
//  939    // ret = 0;
//  940   //else
//  941     //ret = 1;
//  942   
//  943   return ret;
//  944 }
//  945 
//  946 //获得P0_6 MQ-2气体传感器的数据 0为有害气体   1为正常
//  947 uint8 GetGas( void )
//  948 {
//  949   uint8 ret;
//  950   
//  951   if(GAS_PIN == 0)
//  952   {
//  953     ret = 0;
//  954   }
//  955   else
//  956   {
//  957     ret = 1;
//  958   }
//  959   
//  960   return ret;
//  961 }
//  962 uint8 GetSecurity(void)
//  963 {
//  964   uint8 ret;
//  965     if(DATA_PIN == 0)
//  966   {
//  967     ret = 0;
//  968   }
//  969   else
//  970   {
//  971     ret = 1;
//  972   }
//  973   
//  974   return ret;
//  975 }
//  976 //-------------------------------------------------------------------
//  977 
//  978 
//  979 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//  980 //#ifdef WSN_BEEP
//  981 //步进电机驱动部分
//  982 static void MotorData(uchar data)
//  983 {
//  984   A1 = 1&(data>>4);
//  985   B1 = 1&(data>>5);
//  986   C1 = 1&(data>>6);
//  987   D1 = 1&(data>>7);
//  988 }
//  989 
//  990 //顺时针转动
//  991 static void MotorCW(void)
//  992 {
//  993   uchar i;
//  994   for(i=0;i<4;i++)
//  995   {
//  996     MotorData(phasecw[i]);
//  997     Delay_MS(ucSpeed);//转速调节
//  998   }
//  999 }
// 1000 //逆时针转动
// 1001 static void MotorCCW(void)
// 1002 {
// 1003   uchar i;
// 1004   for(i=0;i<4;i++)
// 1005   {
// 1006     MotorData(phaseccw[i]);
// 1007     Delay_MS(ucSpeed);//转速调节
// 1008   }
// 1009 }
// 1010 
// 1011 //停止转动
// 1012 static void MotorStop(void)
// 1013 {
// 1014   MotorData(0x00);
// 1015 }
// 1016 
// 1017 #ifdef WSN_STEP
// 1018 //初始化IO口程序
// 1019 static void InitStepMotor(void)
// 1020 {
// 1021   P0SEL &= 0x0F;  //P04 05 06 07定义为普通IO
// 1022   P0DIR |= 0xF0;  //P04 05 06 07定义为输出
// 1023   
// 1024   MotorData(0x00);//停止转动
// 1025 }
// 1026 #endif
// 1027 
// 1028 static void Delay_MS(unsigned int Time)// 1ms延时
// 1029 {
// 1030   char i;
// 1031   
// 1032   while(Time--)
// 1033   {
// 1034     for(i=0;i<100;i++)
// 1035       MicroWait(10);
// 1036   }
// 1037 }
// 1038 //#endif
// 1039 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 1040 
// 1041 
// 1042 //-------------------------------------------------------------------
// 1043 //协议栈里使用timer 1输出PWM，使用的是正计数/倒计数模式，占空比可调整

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1044 void init_port(void)
init_port:
        CFI Block cfiBlock44 Using cfiCommon0
        CFI Function init_port
        CODE
// 1045 {
        ; Saved register size: 0
        ; Auto size: 0
// 1046   P0SEL |= 0x80;         //设置P0.7口为外设
        ORL     0xf3,#0x80
// 1047   P0DIR |= 0x80;         //设置P0.7为输出
        ORL     0xfd,#0x80
// 1048   PERCFG |= 0x40;        //设置定时器1 的I / O 位置   1： 备用位置2
        ORL     0xf1,#0x40
// 1049   
// 1050   return ;
        LJMP    ?BRET
        CFI EndBlock cfiBlock44
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE PERCFG
// 1051 }
// 1052 
// 1053 // 将基准值放入T1CC0 寄存器, 将被比较值放入T1CC3寄存器
// 1054 // 当T1CC3中的值与T1CC0中的值相等时，则T1CC3 设置or清除

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1055 void init_timer(void)
init_timer:
        CFI Block cfiBlock45 Using cfiCommon0
        CFI Function init_timer
        CODE
// 1056 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1057   T1CC0L = 0xff;         //PWM duty cycle  周期
        MOV     0xda,#-0x1
// 1058   T1CC0H = 0x0;
        MOV     0xdb,#0x0
// 1059   
// 1060   T1CC3L = 0x00;        //PWM signal period 占空比
        MOV     DPTR,#0x62ac
        CLR     A
        MOVX    @DPTR,A
// 1061   T1CC3H = 0x00;
        INC     DPTR
        MOVX    @DPTR,A
// 1062   
// 1063   //等于T1CC0中的数值时候，输出高电平 1； 等于T1CC3中的数值时候，输出低电平 0 
// 1064   //其实整个占空比就为50%  为了蜂鸣器输出连续的响声修改了占空比
// 1065   T1CCTL3 = 0x34;       
        MOV     DPTR,#0x62a3
        MOV     A,#0x34
        MOVX    @DPTR,A
// 1066   T1CTL |= 0x0f;         // divide with 128 and to do i up-down mode
        ORL     0xe4,#0xf
// 1067   return ;
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock45
        REQUIRE T1CC0L
        REQUIRE T1CC0H
        REQUIRE T1CTL
// 1068 }
// 1069 uint16 ReadLightData( void )
// 1070 {
// 1071   uint16 reading = 0;
// 1072   
// 1073   P0DIR &= ~0x20;  // 设置P0.5为输入方式
// 1074   asm("NOP");asm("NOP");
// 1075   
// 1076   /* Clear ADC interrupt flag */
// 1077   ADCIF = 0;
// 1078   
// 1079   ADCCON3 = (0x80 | HAL_ADC_DEC_064 | HAL_ADC_CHANNEL_5);
// 1080   
// 1081   /* Wait for the conversion to finish */
// 1082   while ( !ADCIF );
// 1083   
// 1084   asm("NOP");asm("NOP");
// 1085   
// 1086   /* Read the result */
// 1087   reading = ADCL;
// 1088   reading |= (int16) (ADCH << 8);
// 1089   reading >>= 8;
// 1090   
// 1091   return reading;
// 1092 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1093 void start_pwm(void) 
start_pwm:
        CFI Block cfiBlock46 Using cfiCommon0
        CFI Function start_pwm
        CODE
// 1094 {
        FUNCALL start_pwm, init_port
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL start_pwm, init_timer
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1095   init_port();
        ; Setup parameters for call to function init_port
        LCALL   ??init_port?relay
// 1096   init_timer();
        ; Setup parameters for call to function init_timer
        LCALL   ??init_timer?relay
// 1097   // IEN1 |=0x02;     //Timer 1 中断使能
// 1098   // EA = 1;          //全局中断使能
// 1099   // while(1) {;}
// 1100   return ;
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock46
// 1101 }
// 1102 
// 1103 //volatile unsigned char count = 0;
// 1104 
// 1105 #pragma vector=T1_VECTOR

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1106 __interrupt void _IRQ_timer1(void)
_IRQ_timer1:
        CFI Block cfiBlock47 Using cfiCommon1
        CFI Function _IRQ_timer1
        CODE
// 1107 {
        ; Saved register size: 1
        ; Auto size: 0
// 1108   //TODO....
// 1109 }
        RETI
        CFI EndBlock cfiBlock47

        COMMON INTVEC:CODE:ROOT(0)
        ORG 75
`??_IRQ_timer1??INTVEC 75`:
        LJMP       (_IRQ_timer1)

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for AppTitle>`:
        DB "ALD WSN-system"
        DB 0, 0, 0, 0, 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ucEdDir>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ucDirection>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ucSpeed>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for phasecw>`:
        DATA8
        DB 128
        DB 64
        DB 32
        DB 16

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for phaseccw>`:
        DATA8
        DB 16
        DB 32
        DB 64
        DB 128

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_ProcessMSGCmd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_ProcessMSGCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SendData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SendData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_Send?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_Send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_CallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??XorCheckSum?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    XorCheckSum

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetDataLen?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetDataLen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??init_port?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    init_port

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??init_timer?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    init_timer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??start_pwm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    start_pwm

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ALD WSN-Node01">`:
        DB "ALD WSN-Node01"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ALD WSN-Node02">`:
        DB "ALD WSN-Node02"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ALD WSN-Node03">`:
        DB "ALD WSN-Node03"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ALD WSN-Node04">`:
        DB "ALD WSN-Node04"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ALD WSN-BEEP05">`:
        DB "ALD WSN-BEEP05"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "stepping motor">`:
        DB "stepping motor"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ALD WSN-system">`:
        DB "ALD WSN-system"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "BRI:%03d ">`:
        DB "BRI:%03d "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\241\\346">`:
        DB "\241\346"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\243\\245">`:
        DB "\243\245"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\306\\370\\314\\345\\322\\354\\263\\243">`:
        DB "\306\370\314\345\322\354\263\243"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\306\\370\\314\\345\\325\\375\\263\\243">`:
        DB "\306\370\314\345\325\375\263\243"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "security">`:
        DB "security"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "insecurity">`:
        DB "insecurity"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_1`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0

        END
// 1110 //-------------------------------------------------------------------
// 1111 
// 1112 
// 1113 /*********************************************************************
// 1114 *********************************************************************/
// 1115   
// 
// 2 337 bytes in segment BANKED_CODE
//    66 bytes in segment BANK_RELAYS
//     3 bytes in segment INTVEC
//     1 byte  in segment NEAR_CODE
//     7 bytes in segment SFR_AN
//    31 bytes in segment XDATA_I
//    31 bytes in segment XDATA_ID
//   224 bytes in segment XDATA_ROM_C
//   212 bytes in segment XDATA_Z
// 
// 2 435 bytes of CODE  memory (+ 3 bytes shared)
//   224 bytes of CONST memory
//     0 bytes of DATA  memory (+ 7 bytes shared)
//   243 bytes of XDATA memory
//
//Errors: none
//Warnings: 13
