// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "ithermometerx.h"

// Dispatch interfaces referenced by this interface
#include "Font.h"
#include "Picture.h"

/////////////////////////////////////////////////////////////////////////////
// CiThermometerX

IMPLEMENT_DYNCREATE(CiThermometerX, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CiThermometerX properties

/////////////////////////////////////////////////////////////////////////////
// CiThermometerX operations

long CiThermometerX::GetIndicatorWidth()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetIndicatorWidth(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CiThermometerX::GetIndicatorBulbSize()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetIndicatorBulbSize(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CiThermometerX::GetEndsMargin()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetEndsMargin(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

unsigned long CiThermometerX::GetIndicatorColor()
{
	unsigned long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetIndicatorColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CiThermometerX::GetIndicatorBackGroundColor()
{
	unsigned long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetIndicatorBackGroundColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long CiThermometerX::GetOrientation()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetOrientation(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CiThermometerX::GetOrientationTickMarks()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetOrientationTickMarks(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL CiThermometerX::GetShowTicksMajorFirstLast()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetShowTicksMajorFirstLast(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

unsigned long CiThermometerX::GetBackGroundColor()
{
	unsigned long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetBackGroundColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long CiThermometerX::GetBorderStyle()
{
	long result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetBorderStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL CiThermometerX::GetShowMaxPointer()
{
	BOOL result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetShowMaxPointer(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CiThermometerX::GetShowMinPointer()
{
	BOOL result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetShowMinPointer(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CiThermometerX::GetMinMaxPointerSize()
{
	long result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetMinMaxPointerSize(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CiThermometerX::GetMinMaxPointerMargin()
{
	long result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetMinMaxPointerMargin(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

unsigned long CiThermometerX::GetMaxPointerColor()
{
	unsigned long result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetMaxPointerColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CiThermometerX::GetMinPointerColor()
{
	unsigned long result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetMinPointerColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long CiThermometerX::GetOffsetX()
{
	long result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetOffsetX(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CiThermometerX::GetOffsetY()
{
	long result;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetOffsetY(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x12, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CiThermometerX::GetTickMajorStyle()
{
	long result;
	InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetTickMajorStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x13, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CiThermometerX::GetTickMinorStyle()
{
	long result;
	InvokeHelper(0x14, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetTickMinorStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x14, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL CiThermometerX::GetShowTicksMajor()
{
	BOOL result;
	InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetShowTicksMajor(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x15, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CiThermometerX::GetShowTicksMinor()
{
	BOOL result;
	InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetShowTicksMinor(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x16, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CiThermometerX::GetShowTickLabels()
{
	BOOL result;
	InvokeHelper(0x17, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetShowTickLabels(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x17, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CiThermometerX::GetTickMajorCount()
{
	long result;
	InvokeHelper(0x18, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetTickMajorCount(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x18, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

unsigned long CiThermometerX::GetTickMajorColor()
{
	unsigned long result;
	InvokeHelper(0x19, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetTickMajorColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x19, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long CiThermometerX::GetTickMajorLength()
{
	long result;
	InvokeHelper(0x1a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetTickMajorLength(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CiThermometerX::GetTickMinorAlignment()
{
	long result;
	InvokeHelper(0x1b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetTickMinorAlignment(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CiThermometerX::GetTickMinorCount()
{
	long result;
	InvokeHelper(0x1c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetTickMinorCount(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

unsigned long CiThermometerX::GetTickMinorColor()
{
	unsigned long result;
	InvokeHelper(0x1d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetTickMinorColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long CiThermometerX::GetTickMinorLength()
{
	long result;
	InvokeHelper(0x1e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetTickMinorLength(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CiThermometerX::GetTickMargin()
{
	long result;
	InvokeHelper(0x1f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetTickMargin(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CiThermometerX::GetTickLabelMargin()
{
	long result;
	InvokeHelper(0x20, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetTickLabelMargin(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

COleFont CiThermometerX::GetTickLabelFont()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x21, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return COleFont(pDispatch);
}

void CiThermometerX::SetTickLabelFont(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x21, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long CiThermometerX::GetTickLabelPrecision()
{
	long result;
	InvokeHelper(0x22, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetTickLabelPrecision(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x22, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void CiThermometerX::ResetMinMax()
{
	InvokeHelper(0x23, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

double CiThermometerX::GetCurrentMax()
{
	double result;
	InvokeHelper(0x24, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetCurrentMax(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x24, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double CiThermometerX::GetCurrentMin()
{
	double result;
	InvokeHelper(0x25, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetCurrentMin(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x25, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double CiThermometerX::GetPositionPercent()
{
	double result;
	InvokeHelper(0x26, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetPositionPercent(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x26, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double CiThermometerX::GetPosition()
{
	double result;
	InvokeHelper(0x27, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetPosition(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x27, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double CiThermometerX::GetPositionMax()
{
	double result;
	InvokeHelper(0x28, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetPositionMax(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x28, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double CiThermometerX::GetPositionMin()
{
	double result;
	InvokeHelper(0x29, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetPositionMin(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x29, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL CiThermometerX::GetVisible()
{
	BOOL result;
	InvokeHelper(0x2a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CiThermometerX::GetEnabled()
{
	BOOL result;
	InvokeHelper(DISPID_ENABLED, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetEnabled(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(DISPID_ENABLED, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

void CiThermometerX::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

unsigned long CiThermometerX::GetTickLabelFontColor()
{
	unsigned long result;
	InvokeHelper(0x48, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetTickLabelFontColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x48, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

CPicture CiThermometerX::GetBackGroundPicture()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x2b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPicture(pDispatch);
}

void CiThermometerX::SetBackGroundPicture(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void CiThermometerX::ShowPropertyEditor()
{
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CiThermometerX::SetPositionNoEvent(double Value)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Value);
}

BOOL CiThermometerX::GetMinMaxFixed()
{
	BOOL result;
	InvokeHelper(0x2e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetMinMaxFixed(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CiThermometerX::GetMinMaxUserCanMove()
{
	BOOL result;
	InvokeHelper(0x2f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetMinMaxUserCanMove(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CiThermometerX::GetIndicatorStyle()
{
	long result;
	InvokeHelper(0x30, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetIndicatorStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x30, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL CiThermometerX::GetTransparent()
{
	BOOL result;
	InvokeHelper(0x41, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetTransparent(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x41, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

void CiThermometerX::AddLimit(long PointerSize, long PointerMargin, BOOL DrawScaleSide, double UpperValue, double LowerValue, unsigned long UpperPointerColor, unsigned long LowerPointerColor)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL VTS_R8 VTS_R8 VTS_I4 VTS_I4;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PointerSize, PointerMargin, DrawScaleSide, UpperValue, LowerValue, UpperPointerColor, LowerPointerColor);
}

void CiThermometerX::RemoveLimit(long Index)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index);
}

void CiThermometerX::RemoveAllLimits()
{
	InvokeHelper(0x33, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

double CiThermometerX::GetLimitUpperValue(long Index)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		Index);
	return result;
}

double CiThermometerX::GetLimitLowerValue(long Index)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		Index);
	return result;
}

long CiThermometerX::GetLimitPointerSize(long Index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Index);
	return result;
}

long CiThermometerX::GetLimitPointerMargin(long Index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Index);
	return result;
}

unsigned long CiThermometerX::GetLimitUpperPointerColor(long Index)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Index);
	return result;
}

BOOL CiThermometerX::GetLimitShowUpperPointer(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

BOOL CiThermometerX::GetLimitDrawScaleSide(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

long CiThermometerX::GetLimitCount()
{
	long result;
	InvokeHelper(0x3c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetLimitUpperValue(long Index, double Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, Value);
}

void CiThermometerX::SetLimitLowerValue(long Index, double Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, Value);
}

void CiThermometerX::SetLimitPointerSize(long Index, long Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, Value);
}

void CiThermometerX::SetLimitPointerMargin(long Index, long Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, Value);
}

void CiThermometerX::SetLimitUpperPointerColor(long Index, unsigned long Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, Value);
}

void CiThermometerX::SetLimitShowUpperPointer(long Index, BOOL Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, Value);
}

void CiThermometerX::SetLimitDrawScaleSide(long Index, BOOL Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x45, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, Value);
}

void CiThermometerX::RepaintAll()
{
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CiThermometerX::GetAutoCenter()
{
	BOOL result;
	InvokeHelper(0x43, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetAutoCenter(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x43, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

unsigned long CiThermometerX::GetLimitLowerPointerColor(long Index)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x46, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Index);
	return result;
}

BOOL CiThermometerX::GetLimitShowLowerPointer(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x47, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

void CiThermometerX::SetLimitLowerPointerColor(long Index, unsigned long Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x49, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, Value);
}

void CiThermometerX::SetLimitShowLowerPointer(long Index, BOOL Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x4a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, Value);
}

long CiThermometerX::GetPrecisionStyle()
{
	long result;
	InvokeHelper(0x4b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetPrecisionStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void CiThermometerX::BeginUpdate()
{
	InvokeHelper(0x4c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CiThermometerX::EndUpdate()
{
	InvokeHelper(0x4d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CiThermometerX::GetAutoScaleDesiredTicks()
{
	long result;
	InvokeHelper(0x4e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetAutoScaleDesiredTicks(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CiThermometerX::GetAutoScaleMaxTicks()
{
	long result;
	InvokeHelper(0x4f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetAutoScaleMaxTicks(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL CiThermometerX::GetAutoScaleEnabled()
{
	BOOL result;
	InvokeHelper(0x50, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetAutoScaleEnabled(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x50, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CiThermometerX::GetAutoScaleStyle()
{
	long result;
	InvokeHelper(0x51, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetAutoScaleStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x51, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void CiThermometerX::Lock()
{
	InvokeHelper(0x52, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CiThermometerX::Unlock()
{
	InvokeHelper(0x53, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CiThermometerX::GetUpdateFrameRate()
{
	long result;
	InvokeHelper(0x54, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetUpdateFrameRate(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x54, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CiThermometerX::GetComponentHandle()
{
	long result;
	InvokeHelper(0x55, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SaveImageToBitmap(LPCTSTR FileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x56, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FileName);
}

void CiThermometerX::SaveImageToMetaFile(LPCTSTR FileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x57, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FileName);
}

void CiThermometerX::SaveImageToJPEG(LPCTSTR FileName, long Compression, BOOL Progressive)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_BOOL;
	InvokeHelper(0x58, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FileName, Compression, Progressive);
}

long CiThermometerX::OPCAddItem()
{
	long result;
	InvokeHelper(0x1001, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CiThermometerX::OPCItemCount()
{
	long result;
	InvokeHelper(0x1002, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::OPCRemoveAllItems()
{
	InvokeHelper(0x1003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CiThermometerX::OPCItemActivate(long Index)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1004, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index);
}

void CiThermometerX::OPCItemDeactivate(long Index)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1005, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index);
}

CString CiThermometerX::GetOPCItemComputerName(long Index)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1006, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Index);
	return result;
}

CString CiThermometerX::GetOPCItemServerName(long Index)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1007, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Index);
	return result;
}

CString CiThermometerX::GetOPCItemItemName(long Index)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1008, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Index);
	return result;
}

CString CiThermometerX::GetOPCItemPropertyName(long Index)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1009, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Index);
	return result;
}

BOOL CiThermometerX::GetOPCItemAutoConnect(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x100a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

long CiThermometerX::GetOPCItemUpdateRate(long Index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x100b, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Index);
	return result;
}

void CiThermometerX::SetOPCItemComputerName(long Index, LPCTSTR Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x100c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, Value);
}

void CiThermometerX::SetOPCItemServerName(long Index, LPCTSTR Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x100d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, Value);
}

void CiThermometerX::SetOPCItemItemName(long Index, LPCTSTR Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x100e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, Value);
}

void CiThermometerX::SetOPCItemPropertyName(long Index, LPCTSTR Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x100f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, Value);
}

void CiThermometerX::SetOPCItemAutoConnect(long Index, BOOL Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x1010, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, Value);
}

void CiThermometerX::SetOPCItemUpdateRate(long Index, long Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x1011, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, Value);
}

void CiThermometerX::OPCItemLoaded(long Index)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1012, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index);
}

BOOL CiThermometerX::GetCachedDrawing()
{
	BOOL result;
	InvokeHelper(0x59, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetCachedDrawing(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x59, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CiThermometerX::GetObjectPointer()
{
	long result;
	InvokeHelper(0x1068, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

VARIANT CiThermometerX::GetBytesJPEG(long Compression, BOOL Progressive)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x1069, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		Compression, Progressive);
	return result;
}

void CiThermometerX::SavePropertiesToFile(LPCTSTR FileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x106a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FileName);
}

void CiThermometerX::LoadPropertiesFromFile(LPCTSTR FileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x106b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FileName);
}

BOOL CiThermometerX::GetReverseScale()
{
	BOOL result;
	InvokeHelper(0x5a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetReverseScale(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CiThermometerX::GetIndicatorFillReferenceStyle()
{
	long result;
	InvokeHelper(0x5b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetIndicatorFillReferenceStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double CiThermometerX::GetIndicatorFillReferenceValue()
{
	double result;
	InvokeHelper(0x5c, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetIndicatorFillReferenceValue(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL CiThermometerX::GetOptionSaveAllProperties()
{
	BOOL result;
	InvokeHelper(0x106d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetOptionSaveAllProperties(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x106d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CiThermometerX::GetAutoFrameRate()
{
	BOOL result;
	InvokeHelper(0x106e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetAutoFrameRate(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x106e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

void CiThermometerX::iPaintToDC(long X, long Y, BOOL Transparent, long DC)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL VTS_I4;
	InvokeHelper(0x10cc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 X, Y, Transparent, DC);
}

long CiThermometerX::GetWidth()
{
	long result;
	InvokeHelper(0x5d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetWidth(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CiThermometerX::GetHeight()
{
	long result;
	InvokeHelper(0x5e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CiThermometerX::SetHeight(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void CiThermometerX::OPCItemUpdateResume(long Index)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1013, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index);
}

void CiThermometerX::OPCItemUpdateSuspend(long Index)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1014, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index);
}

VARIANT CiThermometerX::GetOPCItemData(long Index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1015, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		Index);
	return result;
}

short CiThermometerX::GetOPCItemQuality(long Index)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1016, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		Index);
	return result;
}

double CiThermometerX::GetOPCItemTimeStamp(long Index)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1017, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		Index);
	return result;
}

void CiThermometerX::SetOPCItemData(long Index, const VARIANT& Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x1018, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, &Value);
}

BOOL CiThermometerX::GetOPCItemActive(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1019, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

CString CiThermometerX::GetOPCItemGroupName(long Index)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x101c, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Index);
	return result;
}

void CiThermometerX::SetOPCItemGroupName(long Index, LPCTSTR Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x101d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index, Value);
}

void CiThermometerX::OPCDeleteItem(long Index)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x101e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index);
}

void CiThermometerX::OPCItemActivateSuspend(long Index)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x101f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index);
}

VARIANT CiThermometerX::GetBytesPNG(long Compression)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1020, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		Compression);
	return result;
}

void CiThermometerX::SaveImageToPNG(LPCTSTR FileName, long Compression)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x1021, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FileName, Compression);
}
